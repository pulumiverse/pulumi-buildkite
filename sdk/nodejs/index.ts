// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { GetMetaResult } from "./getMeta";
export const getMeta: typeof import("./getMeta").getMeta = null as any;
export const getMetaOutput: typeof import("./getMeta").getMetaOutput = null as any;
utilities.lazyLoad(exports, ["getMeta","getMetaOutput"], () => require("./getMeta"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));


// Export sub-modules:
import * as agent from "./agent";
import * as cluster from "./cluster";
import * as config from "./config";
import * as organization from "./organization";
import * as pipeline from "./pipeline";
import * as team from "./team";
import * as testsuite from "./testsuite";
import * as types from "./types";

export {
    agent,
    cluster,
    config,
    organization,
    pipeline,
    team,
    testsuite,
    types,
};
pulumi.runtime.registerResourcePackage("buildkite", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:buildkite") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
