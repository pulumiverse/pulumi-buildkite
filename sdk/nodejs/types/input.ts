// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface ProviderTimeouts {
    /**
     * A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
     */
    create?: pulumi.Input<string>;
    /**
     * A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
     */
    delete?: pulumi.Input<string>;
    /**
     * A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Read operations occur during any refresh or planning operation when refresh is enabled.
     */
    read?: pulumi.Input<string>;
    /**
     * A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
     */
    update?: pulumi.Input<string>;
}
export namespace Pipeline {
    export interface PipelineProviderSettings {
        /**
         * Whether to create builds when branches are pushed.
         */
        buildBranches?: pulumi.Input<boolean>;
        /**
         * Whether to create builds for pull requests from third-party forks.
         */
        buildPullRequestForks?: pulumi.Input<boolean>;
        /**
         * Whether to create builds for pull requests when labels are added or removed.
         */
        buildPullRequestLabelsChanged?: pulumi.Input<boolean>;
        /**
         * Whether to create a build when a pull request changes to "Ready for review".
         */
        buildPullRequestReadyForReview?: pulumi.Input<boolean>;
        /**
         * Whether to create builds for commits that are part of a pull request.
         */
        buildPullRequests?: pulumi.Input<boolean>;
        /**
         * Whether to create builds when tags are pushed.
         */
        buildTags?: pulumi.Input<boolean>;
        /**
         * Automatically cancel running builds for a branch if the branch is deleted.
         */
        cancelDeletedBranchBuilds?: pulumi.Input<boolean>;
        /**
         * The condition to evaluate when deciding if a build should run. More details available in [the documentation](https://buildkite.com/docs/pipelines/conditionals#conditionals-in-pipelines).
         */
        filterCondition?: pulumi.Input<string>;
        /**
         * Whether to filter builds to only run when the condition in `filterCondition` is true.
         */
        filterEnabled?: pulumi.Input<boolean>;
        /**
         * Prefix branch names for third-party fork builds to ensure they don't trigger branch conditions. For example, the main branch from some-user will become some-user:main.
         */
        prefixPullRequestForkBranchNames?: pulumi.Input<boolean>;
        /**
         * The status to use for blocked builds. Pending can be used with [required status checks](https://help.github.com/en/articles/enabling-required-status-checks) to prevent merging pull requests with blocked builds.
         */
        publishBlockedAsPending?: pulumi.Input<boolean>;
        /**
         * Whether to update the status of commits in Bitbucket or GitHub.
         */
        publishCommitStatus?: pulumi.Input<boolean>;
        /**
         * Whether to create a separate status for each job in a build, allowing you to see the status of each job directly in Bitbucket or GitHub.
         */
        publishCommitStatusPerStep?: pulumi.Input<boolean>;
        /**
         * Filter pull requests builds by the branch filter.
         */
        pullRequestBranchFilterConfiguration?: pulumi.Input<string>;
        /**
         * Filter pull request builds.
         */
        pullRequestBranchFilterEnabled?: pulumi.Input<boolean>;
        /**
         * Whether to create a separate status for pull request builds, allowing you to require a passing pull request build in your [required status checks](https://help.github.com/en/articles/enabling-required-status-checks) in GitHub.
         */
        separatePullRequestStatuses?: pulumi.Input<boolean>;
        /**
         * Whether to skip creating a new build if an existing build for the commit and branch already exists. This option is only valid if the pipeline uses a GitHub repository.
         */
        skipBuildsForExistingCommits?: pulumi.Input<boolean>;
        /**
         * Whether to skip creating a new build for a pull request if an existing build for the commit and branch already exists.
         */
        skipPullRequestBuildsForExistingCommits?: pulumi.Input<boolean>;
        /**
         * What type of event to trigger builds on. Must be one of:
         * 	- `code` will create builds when code is pushed to GitHub.
         * 	- `deployment` will create builds when a deployment is created in GitHub.
         * 	- `fork` will create builds when the GitHub repository is forked.
         * 	- `none` will not create any builds based on GitHub activity.
         *
         * 	> `triggerMode` is only valid if the pipeline uses a GitHub repository.
         */
        triggerMode?: pulumi.Input<string>;
    }
}

export namespace config {
}
