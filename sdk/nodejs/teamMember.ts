// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## # Resource: teamMember
 *
 * This resource allows manage team membership for existing organization users.
 *
 * The user must already be part of the organization to which you are managing team membership. This will not invite a new user to the organization.
 *
 * Buildkite Documentation: https://buildkite.com/docs/pipelines/permissions
 *
 * Note: You must first enable Teams on your organization.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as buildkite from "@grapl/pulumi-buildkite";
 *
 * const team = new buildkite.Team("team", {
 *     privacy: "VISIBLE",
 *     defaultTeam: true,
 *     defaultMemberRole: "MEMBER",
 * });
 * const aSmith = new buildkite.TeamMember("aSmith", {
 *     role: "MEMBER",
 *     teamId: team.id,
 *     userId: "VXNlci0tLWRlOTdmMjBiLWJkZmMtNGNjOC1hOTcwLTY1ODNiZTk2ZGEyYQ==",
 * });
 * ```
 *
 * ## Import
 *
 * Team members can be imported using the GraphQL ID of the membership. Note this is different to the ID of the user.
 *
 * ```sh
 *  $ pulumi import buildkite:index/teamMember:TeamMember a_smith VGVhbU1lbWJlci0tLTVlZDEyMmY2LTM2NjQtNDI1MS04YzMwLTc4NjRiMDdiZDQ4Zg==
 * ```
 *
 *  To find the ID of a team member you are trying to import you can use the GraphQL snippet below. A link to this snippet can also be found at https://buildkite.com/user/graphql/console/c6a2cc65-dc59-49df-95c6-7167b68dbd5d. You will need fo fill in the organization slug and search terms for teams and members. Both search terms work on the name of the associated object. graphql query {
 *
 *  organization(slug"") {
 *
 *  teams(first2, search"") {
 *
 *  edges {
 *
 *  node {
 *
 *  members(first2, search"") {
 *
 *  edges {
 *
 *  node {
 *
 *  id
 *
 *  }
 *
 *  }
 *
 *  }
 *
 *  }
 *
 *  }
 *
 *  }
 *
 *  } }
 */
export class TeamMember extends pulumi.CustomResource {
    /**
     * Get an existing TeamMember resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TeamMemberState, opts?: pulumi.CustomResourceOptions): TeamMember {
        return new TeamMember(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'buildkite:index/teamMember:TeamMember';

    /**
     * Returns true if the given object is an instance of TeamMember.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is TeamMember {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TeamMember.__pulumiType;
    }

    /**
     * Either MEMBER or MAINTAINER.
     */
    public readonly role!: pulumi.Output<string>;
    /**
     * The GraphQL ID of the team to add to/remove from.
     */
    public readonly teamId!: pulumi.Output<string>;
    /**
     * The GraphQL ID of the user to add/remove.
     */
    public readonly userId!: pulumi.Output<string>;
    /**
     * The UUID for the team membership.
     */
    public /*out*/ readonly uuid!: pulumi.Output<string>;

    /**
     * Create a TeamMember resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TeamMemberArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TeamMemberArgs | TeamMemberState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TeamMemberState | undefined;
            resourceInputs["role"] = state ? state.role : undefined;
            resourceInputs["teamId"] = state ? state.teamId : undefined;
            resourceInputs["userId"] = state ? state.userId : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as TeamMemberArgs | undefined;
            if ((!args || args.role === undefined) && !opts.urn) {
                throw new Error("Missing required property 'role'");
            }
            if ((!args || args.teamId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'teamId'");
            }
            if ((!args || args.userId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'userId'");
            }
            resourceInputs["role"] = args ? args.role : undefined;
            resourceInputs["teamId"] = args ? args.teamId : undefined;
            resourceInputs["userId"] = args ? args.userId : undefined;
            resourceInputs["uuid"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(TeamMember.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering TeamMember resources.
 */
export interface TeamMemberState {
    /**
     * Either MEMBER or MAINTAINER.
     */
    role?: pulumi.Input<string>;
    /**
     * The GraphQL ID of the team to add to/remove from.
     */
    teamId?: pulumi.Input<string>;
    /**
     * The GraphQL ID of the user to add/remove.
     */
    userId?: pulumi.Input<string>;
    /**
     * The UUID for the team membership.
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a TeamMember resource.
 */
export interface TeamMemberArgs {
    /**
     * Either MEMBER or MAINTAINER.
     */
    role: pulumi.Input<string>;
    /**
     * The GraphQL ID of the team to add to/remove from.
     */
    teamId: pulumi.Input<string>;
    /**
     * The GraphQL ID of the user to add/remove.
     */
    userId: pulumi.Input<string>;
}
