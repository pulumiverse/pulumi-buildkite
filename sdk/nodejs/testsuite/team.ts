// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manage team access to a test suite.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as buildkite from "@pulumiverse/buildkite";
 *
 * // create a test suite
 * const main = new buildkite.testsuite.TestSuite("main", {
 *     defaultBranch: "main",
 *     teamOwnerId: "VGVhbU1lbWJlci0tLTVlZDEyMmY2LTM2NjQtNDI1MS04YzMwLTc4NjRiMDdiZDQ4Zg==",
 * });
 * // give the "everyone" team manage access to the "main" test suite
 * const mainEveryone = new buildkite.testsuite.Team("mainEveryone", {
 *     testSuiteId: main.id,
 *     teamId: "VGVhbS0tLWU1YjQyMDQyLTUzN2QtNDZjNi04MjY0LTliZjFkMzkyYjZkNQ==",
 *     accessLevel: "MANAGE_AND_READ",
 * });
 * ```
 *
 * ## Import
 *
 * import a test suite team resource using the GraphQL ID
 *
 * # 
 *
 *  you can use this query to find the ID:
 *
 *  query getTeamSuiteIds {
 *
 *  organization(slug: "ORGANIZATION_SLUG") {
 *
 *  suites(first: 1, search:"SUITE_SEARCH_TERM") {
 *
 *  edges {
 *
 *  node {
 *
 *  id
 *
 *  name
 *
 *  teams(first: 10){
 *
 *  edges {
 *
 *  node {
 *
 *  id
 *
 *  accessLevel
 *
 *  team{
 *
 *  name
 *
 *  }
 *
 *  }
 *
 *  }
 *
 *  }
 *
 *  }
 *
 *  }
 *
 *  }
 *
 *  }
 *
 *  }
 *
 * ```sh
 * $ pulumi import buildkite:TestSuite/team:Team main_everyone VGVhbvDf4eRef20tMzIxMGEfYTctNzEF5g00M8f5s6E2YjYtODNlOGNlZgD6HcBi
 * ```
 */
export class Team extends pulumi.CustomResource {
    /**
     * Get an existing Team resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TeamState, opts?: pulumi.CustomResourceOptions): Team {
        return new Team(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'buildkite:TestSuite/team:Team';

    /**
     * Returns true if the given object is an instance of Team.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Team {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Team.__pulumiType;
    }

    /**
     * The access level the team has on the test suite. Either `READ_ONLY` or `MANAGE_AND_READ`.
     */
    public readonly accessLevel!: pulumi.Output<string>;
    /**
     * The GraphQL ID of the team.
     */
    public readonly teamId!: pulumi.Output<string>;
    /**
     * The GraphQL ID of the test suite.
     */
    public readonly testSuiteId!: pulumi.Output<string>;
    /**
     * The UUID of the test suite-team relationship.
     */
    public /*out*/ readonly uuid!: pulumi.Output<string>;

    /**
     * Create a Team resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TeamArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TeamArgs | TeamState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TeamState | undefined;
            resourceInputs["accessLevel"] = state ? state.accessLevel : undefined;
            resourceInputs["teamId"] = state ? state.teamId : undefined;
            resourceInputs["testSuiteId"] = state ? state.testSuiteId : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as TeamArgs | undefined;
            if ((!args || args.accessLevel === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accessLevel'");
            }
            if ((!args || args.teamId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'teamId'");
            }
            if ((!args || args.testSuiteId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'testSuiteId'");
            }
            resourceInputs["accessLevel"] = args ? args.accessLevel : undefined;
            resourceInputs["teamId"] = args ? args.teamId : undefined;
            resourceInputs["testSuiteId"] = args ? args.testSuiteId : undefined;
            resourceInputs["uuid"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Team.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Team resources.
 */
export interface TeamState {
    /**
     * The access level the team has on the test suite. Either `READ_ONLY` or `MANAGE_AND_READ`.
     */
    accessLevel?: pulumi.Input<string>;
    /**
     * The GraphQL ID of the team.
     */
    teamId?: pulumi.Input<string>;
    /**
     * The GraphQL ID of the test suite.
     */
    testSuiteId?: pulumi.Input<string>;
    /**
     * The UUID of the test suite-team relationship.
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Team resource.
 */
export interface TeamArgs {
    /**
     * The access level the team has on the test suite. Either `READ_ONLY` or `MANAGE_AND_READ`.
     */
    accessLevel: pulumi.Input<string>;
    /**
     * The GraphQL ID of the team.
     */
    teamId: pulumi.Input<string>;
    /**
     * The GraphQL ID of the test suite.
     */
    testSuiteId: pulumi.Input<string>;
}
