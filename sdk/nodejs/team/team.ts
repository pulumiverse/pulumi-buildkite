// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * ## # Resource: team
 *
 * This resource allows you to create and manage teams.
 *
 * Buildkite Documentation: https://buildkite.com/docs/pipelines/permissions
 *
 * Note: You must first enable Teams on your organization.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as buildkite from "@pulumiverse/buildkite";
 *
 * const team = new buildkite.team.Team("team", {
 *     defaultMemberRole: "MEMBER",
 *     defaultTeam: true,
 *     privacy: "VISIBLE",
 * });
 * ```
 *
 * ## Import
 *
 * Teams can be imported using the `GraphQL ID` (not UUID), e.g.
 *
 * ```sh
 *  $ pulumi import buildkite:Team/team:Team fleet UGlwZWxpbmUtLS00MzVjYWQ1OC1lODFkLTQ1YWYtODYzNy1iMWNmODA3MDIzOGQ=
 * ```
 *
 *  To find the ID to use, you can use the GraphQL query below. Alternatively, you could use this [pre-saved query](https://buildkite.com/user/graphql/console/6e74c89c-4e91-4d1d-92ca-4fb19d0ea453), where you will need fo fill in the organization slug and search term (TEAM_SEARCH_TERM) for the team. graphql query getTeamId {
 *
 *  organization(slug"ORGANIZATION_SLUG") {
 *
 *  teams(first1, search"TEAM_SEARCH_TERM") {
 *
 *  edges {
 *
 *  node {
 *
 *  id
 *
 *  name
 *
 *  }
 *
 *  }
 *
 *  }
 *
 *  } }
 */
export class Team extends pulumi.CustomResource {
    /**
     * Get an existing Team resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TeamState, opts?: pulumi.CustomResourceOptions): Team {
        return new Team(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'buildkite:Team/team:Team';

    /**
     * Returns true if the given object is an instance of Team.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Team {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Team.__pulumiType;
    }

    /**
     * Default role to assign to a team member.
     */
    public readonly defaultMemberRole!: pulumi.Output<string>;
    /**
     * Whether to assign this team to a user by default.
     */
    public readonly defaultTeam!: pulumi.Output<boolean>;
    /**
     * The description to assign to the team.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Whether team members can create.
     */
    public readonly membersCanCreatePipelines!: pulumi.Output<boolean | undefined>;
    /**
     * The name of the team.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The privacy level to set the team too.
     */
    public readonly privacy!: pulumi.Output<string>;
    /**
     * The name of the team.
     */
    public /*out*/ readonly slug!: pulumi.Output<string>;
    /**
     * The UUID for the team.
     */
    public /*out*/ readonly uuid!: pulumi.Output<string>;

    /**
     * Create a Team resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TeamArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TeamArgs | TeamState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TeamState | undefined;
            resourceInputs["defaultMemberRole"] = state ? state.defaultMemberRole : undefined;
            resourceInputs["defaultTeam"] = state ? state.defaultTeam : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["membersCanCreatePipelines"] = state ? state.membersCanCreatePipelines : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["privacy"] = state ? state.privacy : undefined;
            resourceInputs["slug"] = state ? state.slug : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as TeamArgs | undefined;
            if ((!args || args.defaultMemberRole === undefined) && !opts.urn) {
                throw new Error("Missing required property 'defaultMemberRole'");
            }
            if ((!args || args.defaultTeam === undefined) && !opts.urn) {
                throw new Error("Missing required property 'defaultTeam'");
            }
            if ((!args || args.privacy === undefined) && !opts.urn) {
                throw new Error("Missing required property 'privacy'");
            }
            resourceInputs["defaultMemberRole"] = args ? args.defaultMemberRole : undefined;
            resourceInputs["defaultTeam"] = args ? args.defaultTeam : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["membersCanCreatePipelines"] = args ? args.membersCanCreatePipelines : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["privacy"] = args ? args.privacy : undefined;
            resourceInputs["slug"] = undefined /*out*/;
            resourceInputs["uuid"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Team.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Team resources.
 */
export interface TeamState {
    /**
     * Default role to assign to a team member.
     */
    defaultMemberRole?: pulumi.Input<string>;
    /**
     * Whether to assign this team to a user by default.
     */
    defaultTeam?: pulumi.Input<boolean>;
    /**
     * The description to assign to the team.
     */
    description?: pulumi.Input<string>;
    /**
     * Whether team members can create.
     */
    membersCanCreatePipelines?: pulumi.Input<boolean>;
    /**
     * The name of the team.
     */
    name?: pulumi.Input<string>;
    /**
     * The privacy level to set the team too.
     */
    privacy?: pulumi.Input<string>;
    /**
     * The name of the team.
     */
    slug?: pulumi.Input<string>;
    /**
     * The UUID for the team.
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Team resource.
 */
export interface TeamArgs {
    /**
     * Default role to assign to a team member.
     */
    defaultMemberRole: pulumi.Input<string>;
    /**
     * Whether to assign this team to a user by default.
     */
    defaultTeam: pulumi.Input<boolean>;
    /**
     * The description to assign to the team.
     */
    description?: pulumi.Input<string>;
    /**
     * Whether team members can create.
     */
    membersCanCreatePipelines?: pulumi.Input<boolean>;
    /**
     * The name of the team.
     */
    name?: pulumi.Input<string>;
    /**
     * The privacy level to set the team too.
     */
    privacy: pulumi.Input<string>;
}
