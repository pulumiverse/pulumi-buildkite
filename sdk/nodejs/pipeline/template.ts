// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * This resource allows for standardized step configurations that can be used within various pipelines of an organization.
 *
 * More information on pipeline templates can be found in the [documentation](https://buildkite.com/docs/pipelines/templates).
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as buildkite from "@pulumiverse/buildkite";
 *
 * const templateRequired = new buildkite.pipeline.Template("templateRequired", {configuration: `steps:
 *   - label: ":pipeline:"
 *     command: "buildkite-agent pipeline upload .buildkite/pipeline-qa.yml"
 *
 * `});
 * const templateFull = new buildkite.pipeline.Template("templateFull", {
 *     available: true,
 *     configuration: `steps:
 *   - label: ":pipeline:"
 *     command: "buildkite-agent pipeline upload .buildkite/pipeline-production.yml"
 *
 * `,
 *     description: "Production upload template",
 * });
 * ```
 *
 * ## Import
 *
 * import a pipeline template resource using the templates GraphQL ID
 *
 * # 
 *
 *  You can use this query to find the first 50 templates (adjust for less or more):
 *
 *  query getPipelineTemplateIds {
 *
 *  organization(slug: "ORGANIZATION_SLUG") {
 *
 *  pipelineTemplates(first: 50) {
 *
 *  edges{
 *
 *  node{
 *
 *  id
 *
 *  name
 *
 *  }
 *
 *  }
 *
 *  }
 *
 *  }
 *
 *  }
 *
 * ```sh
 * $ pulumi import buildkite:Pipeline/template:Template template UGlwZWxpbmVUZW1wbGF0ZS0tLWU0YWQ3YjdjLTljZDYtNGM0MS1hYWE0LTY2ZmI3ODY0MTMwNw==
 * ```
 */
export class Template extends pulumi.CustomResource {
    /**
     * Get an existing Template resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TemplateState, opts?: pulumi.CustomResourceOptions): Template {
        return new Template(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'buildkite:Pipeline/template:Template';

    /**
     * Returns true if the given object is an instance of Template.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Template {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Template.__pulumiType;
    }

    /**
     * If the pipeline template is available for assignment by non admin users.
     */
    public readonly available!: pulumi.Output<boolean>;
    /**
     * The YAML step configuration for the pipeline template.
     */
    public readonly configuration!: pulumi.Output<string>;
    /**
     * A description for the pipeline template.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The name of the pipeline template.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The UUID of the pipeline template.
     */
    public /*out*/ readonly uuid!: pulumi.Output<string>;

    /**
     * Create a Template resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TemplateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TemplateArgs | TemplateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TemplateState | undefined;
            resourceInputs["available"] = state ? state.available : undefined;
            resourceInputs["configuration"] = state ? state.configuration : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as TemplateArgs | undefined;
            if ((!args || args.configuration === undefined) && !opts.urn) {
                throw new Error("Missing required property 'configuration'");
            }
            resourceInputs["available"] = args ? args.available : undefined;
            resourceInputs["configuration"] = args ? args.configuration : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["uuid"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Template.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Template resources.
 */
export interface TemplateState {
    /**
     * If the pipeline template is available for assignment by non admin users.
     */
    available?: pulumi.Input<boolean>;
    /**
     * The YAML step configuration for the pipeline template.
     */
    configuration?: pulumi.Input<string>;
    /**
     * A description for the pipeline template.
     */
    description?: pulumi.Input<string>;
    /**
     * The name of the pipeline template.
     */
    name?: pulumi.Input<string>;
    /**
     * The UUID of the pipeline template.
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Template resource.
 */
export interface TemplateArgs {
    /**
     * If the pipeline template is available for assignment by non admin users.
     */
    available?: pulumi.Input<boolean>;
    /**
     * The YAML step configuration for the pipeline template.
     */
    configuration: pulumi.Input<string>;
    /**
     * A description for the pipeline template.
     */
    description?: pulumi.Input<string>;
    /**
     * The name of the pipeline template.
     */
    name?: pulumi.Input<string>;
}
