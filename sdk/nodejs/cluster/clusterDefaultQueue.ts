// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * This resource allows you to manage a default queue for a Buildkite Cluster.
 * Find out more information in our [documentation](https://buildkite.com/docs/clusters/overview).
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as buildkite from "@pulumiverse/buildkite";
 *
 * // create a cluster
 * const primaryCluster = new buildkite.cluster.Cluster("primaryCluster", {
 *     description: "Runs the monolith build and deploy",
 *     emoji: "ðŸš€",
 *     color: "#bada55",
 * });
 * const _default = new buildkite.cluster.ClusterQueue("default", {
 *     clusterId: primaryCluster.id,
 *     key: "default",
 * });
 * const primaryClusterDefaultQueue = new buildkite.cluster.ClusterDefaultQueue("primaryClusterDefaultQueue", {
 *     clusterId: primaryCluster.id,
 *     queueId: _default.id,
 * });
 * ```
 *
 * ## Import
 *
 * import a clusters default queue resource using the GraphQL ID of the cluster itself
 *
 * # 
 *
 *  you can use this query to find the ID:
 *
 *  query getClusters {
 *
 *  organization(slug: "ORGANIZATION"){
 *
 *  clusters(first: 5, order:NAME) {
 *
 *  edges{
 *
 *  node {
 *
 *  id
 *
 *  name
 *
 *  }
 *
 *  }
 *
 *  }
 *
 *  }
 *
 *  }
 *
 * ```sh
 * $ pulumi import buildkite:Cluster/clusterDefaultQueue:ClusterDefaultQueue primary Q2x1c3Rlci0tLTI3ZmFmZjA4LTA3OWEtNDk5ZC1hMmIwLTIzNmY3NWFkMWZjYg==
 * ```
 */
export class ClusterDefaultQueue extends pulumi.CustomResource {
    /**
     * Get an existing ClusterDefaultQueue resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ClusterDefaultQueueState, opts?: pulumi.CustomResourceOptions): ClusterDefaultQueue {
        return new ClusterDefaultQueue(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'buildkite:Cluster/clusterDefaultQueue:ClusterDefaultQueue';

    /**
     * Returns true if the given object is an instance of ClusterDefaultQueue.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ClusterDefaultQueue {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ClusterDefaultQueue.__pulumiType;
    }

    /**
     * The GraphQL ID of the cluster to which to add a default queue.
     */
    public readonly clusterId!: pulumi.Output<string>;
    /**
     * The GraphQL ID of the cluster queue to set as default on the cluster.
     */
    public readonly queueId!: pulumi.Output<string>;
    /**
     * The UUID of the cluster.
     */
    public /*out*/ readonly uuid!: pulumi.Output<string>;

    /**
     * Create a ClusterDefaultQueue resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ClusterDefaultQueueArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ClusterDefaultQueueArgs | ClusterDefaultQueueState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ClusterDefaultQueueState | undefined;
            resourceInputs["clusterId"] = state ? state.clusterId : undefined;
            resourceInputs["queueId"] = state ? state.queueId : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as ClusterDefaultQueueArgs | undefined;
            if ((!args || args.clusterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterId'");
            }
            if ((!args || args.queueId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'queueId'");
            }
            resourceInputs["clusterId"] = args ? args.clusterId : undefined;
            resourceInputs["queueId"] = args ? args.queueId : undefined;
            resourceInputs["uuid"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ClusterDefaultQueue.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ClusterDefaultQueue resources.
 */
export interface ClusterDefaultQueueState {
    /**
     * The GraphQL ID of the cluster to which to add a default queue.
     */
    clusterId?: pulumi.Input<string>;
    /**
     * The GraphQL ID of the cluster queue to set as default on the cluster.
     */
    queueId?: pulumi.Input<string>;
    /**
     * The UUID of the cluster.
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ClusterDefaultQueue resource.
 */
export interface ClusterDefaultQueueArgs {
    /**
     * The GraphQL ID of the cluster to which to add a default queue.
     */
    clusterId: pulumi.Input<string>;
    /**
     * The GraphQL ID of the cluster queue to set as default on the cluster.
     */
    queueId: pulumi.Input<string>;
}
