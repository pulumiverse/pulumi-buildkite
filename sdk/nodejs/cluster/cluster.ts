// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * This resource allows you to create and manage a Buildkite Cluster to run your builds in.
 * Clusters are useful for grouping agents by there capabilities or permissions.
 * Find out more information in our [documentation](https://buildkite.com/docs/clusters/overview).
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as buildkite from "@pulumiverse/buildkite";
 *
 * // create a cluster
 * const primary = new buildkite.cluster.Cluster("primary", {
 *     description: "Runs the monolith build and deploy",
 *     emoji: "ðŸš€",
 *     color: "#bada55",
 * });
 * // add a pipeline to the cluster
 * const monolith = new buildkite.pipeline.Pipeline("monolith", {
 *     repository: "https://github.com/...",
 *     clusterId: primary.id,
 * });
 * const _default = new buildkite.cluster.ClusterQueue("default", {
 *     clusterId: primary.id,
 *     key: "default",
 * });
 * ```
 *
 * ## Import
 *
 * import a cluster resource using the GraphQL ID
 *
 * # 
 *
 *  you can use this query to find the ID:
 *
 *  query getClusters {
 *
 *  organization(slug: "ORGANIZATION"){
 *
 *  clusters(first: 5, order:NAME) {
 *
 *  edges{
 *
 *  node {
 *
 *  id
 *
 *  name
 *
 *  }
 *
 *  }
 *
 *  }
 *
 *  }
 *
 *  }
 *
 * ```sh
 * $ pulumi import buildkite:Cluster/cluster:Cluster primary Q2x1c3Rlci0tLTI3ZmFmZjA4LTA3OWEtNDk5ZC1hMmIwLTIzNmY3NWFkMWZjYg==
 * ```
 */
export class Cluster extends pulumi.CustomResource {
    /**
     * Get an existing Cluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ClusterState, opts?: pulumi.CustomResourceOptions): Cluster {
        return new Cluster(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'buildkite:Cluster/cluster:Cluster';

    /**
     * Returns true if the given object is an instance of Cluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Cluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Cluster.__pulumiType;
    }

    /**
     * A color representation of the Cluster. Accepts hex codes, eg #BADA55.
     */
    public readonly color!: pulumi.Output<string | undefined>;
    /**
     * This is a description for the cluster, this may describe the usage for it, the region, or something else
     * which would help identify the Cluster's purpose.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * An emoji to use with the Cluster, this can either be set using :buildkite: notation, or with the
     * emoji itself, such as ðŸš€.
     */
    public readonly emoji!: pulumi.Output<string | undefined>;
    /**
     * The name of the Cluster. Can only contain numbers and letters, no spaces or special characters.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The UUID of the cluster.
     */
    public /*out*/ readonly uuid!: pulumi.Output<string>;

    /**
     * Create a Cluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ClusterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ClusterArgs | ClusterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ClusterState | undefined;
            resourceInputs["color"] = state ? state.color : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["emoji"] = state ? state.emoji : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as ClusterArgs | undefined;
            resourceInputs["color"] = args ? args.color : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["emoji"] = args ? args.emoji : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["uuid"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Cluster.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Cluster resources.
 */
export interface ClusterState {
    /**
     * A color representation of the Cluster. Accepts hex codes, eg #BADA55.
     */
    color?: pulumi.Input<string>;
    /**
     * This is a description for the cluster, this may describe the usage for it, the region, or something else
     * which would help identify the Cluster's purpose.
     */
    description?: pulumi.Input<string>;
    /**
     * An emoji to use with the Cluster, this can either be set using :buildkite: notation, or with the
     * emoji itself, such as ðŸš€.
     */
    emoji?: pulumi.Input<string>;
    /**
     * The name of the Cluster. Can only contain numbers and letters, no spaces or special characters.
     */
    name?: pulumi.Input<string>;
    /**
     * The UUID of the cluster.
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Cluster resource.
 */
export interface ClusterArgs {
    /**
     * A color representation of the Cluster. Accepts hex codes, eg #BADA55.
     */
    color?: pulumi.Input<string>;
    /**
     * This is a description for the cluster, this may describe the usage for it, the region, or something else
     * which would help identify the Cluster's purpose.
     */
    description?: pulumi.Input<string>;
    /**
     * An emoji to use with the Cluster, this can either be set using :buildkite: notation, or with the
     * emoji itself, such as ðŸš€.
     */
    emoji?: pulumi.Input<string>;
    /**
     * The name of the Cluster. Can only contain numbers and letters, no spaces or special characters.
     */
    name?: pulumi.Input<string>;
}
