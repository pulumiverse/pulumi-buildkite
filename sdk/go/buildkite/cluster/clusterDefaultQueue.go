// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cluster

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-buildkite/sdk/v3/go/buildkite/internal"
)

// This resource allows you to manage a default queue for a Buildkite Cluster.
// Find out more information in our [documentation](https://buildkite.com/docs/clusters/overview).
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-buildkite/sdk/v3/go/buildkite/Cluster"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// create a cluster
//			primaryCluster, err := Cluster.NewCluster(ctx, "primaryCluster", &Cluster.ClusterArgs{
//				Description: pulumi.String("Runs the monolith build and deploy"),
//				Emoji:       pulumi.String("ðŸš€"),
//				Color:       pulumi.String("#bada55"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = Cluster.NewClusterQueue(ctx, "default", &Cluster.ClusterQueueArgs{
//				ClusterId: primaryCluster.ID(),
//				Key:       pulumi.String("default"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = Cluster.NewClusterDefaultQueue(ctx, "primaryClusterDefaultQueue", &Cluster.ClusterDefaultQueueArgs{
//				ClusterId: primaryCluster.ID(),
//				QueueId:   _default.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// import a clusters default queue resource using the GraphQL ID of the cluster itself
//
// #
//
// you can use this query to find the ID:
//
// query getClusters {
//
//	organization(slug: "ORGANIZATION"){
//
//	  clusters(first: 5, order:NAME) {
//
//	    edges{
//
//	      node {
//
//	        id
//
//	        name
//
//	      }
//
//	    }
//
//	  }
//
//	}
//
// }
//
// ```sh
// $ pulumi import buildkite:Cluster/clusterDefaultQueue:ClusterDefaultQueue primary Q2x1c3Rlci0tLTI3ZmFmZjA4LTA3OWEtNDk5ZC1hMmIwLTIzNmY3NWFkMWZjYg==
// ```
type ClusterDefaultQueue struct {
	pulumi.CustomResourceState

	// The GraphQL ID of the cluster to which to add a default queue.
	ClusterId pulumi.StringOutput `pulumi:"clusterId"`
	// The GraphQL ID of the cluster queue to set as default on the cluster.
	QueueId pulumi.StringOutput `pulumi:"queueId"`
	// The UUID of the cluster.
	Uuid pulumi.StringOutput `pulumi:"uuid"`
}

// NewClusterDefaultQueue registers a new resource with the given unique name, arguments, and options.
func NewClusterDefaultQueue(ctx *pulumi.Context,
	name string, args *ClusterDefaultQueueArgs, opts ...pulumi.ResourceOption) (*ClusterDefaultQueue, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterId == nil {
		return nil, errors.New("invalid value for required argument 'ClusterId'")
	}
	if args.QueueId == nil {
		return nil, errors.New("invalid value for required argument 'QueueId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ClusterDefaultQueue
	err := ctx.RegisterResource("buildkite:Cluster/clusterDefaultQueue:ClusterDefaultQueue", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetClusterDefaultQueue gets an existing ClusterDefaultQueue resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetClusterDefaultQueue(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClusterDefaultQueueState, opts ...pulumi.ResourceOption) (*ClusterDefaultQueue, error) {
	var resource ClusterDefaultQueue
	err := ctx.ReadResource("buildkite:Cluster/clusterDefaultQueue:ClusterDefaultQueue", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ClusterDefaultQueue resources.
type clusterDefaultQueueState struct {
	// The GraphQL ID of the cluster to which to add a default queue.
	ClusterId *string `pulumi:"clusterId"`
	// The GraphQL ID of the cluster queue to set as default on the cluster.
	QueueId *string `pulumi:"queueId"`
	// The UUID of the cluster.
	Uuid *string `pulumi:"uuid"`
}

type ClusterDefaultQueueState struct {
	// The GraphQL ID of the cluster to which to add a default queue.
	ClusterId pulumi.StringPtrInput
	// The GraphQL ID of the cluster queue to set as default on the cluster.
	QueueId pulumi.StringPtrInput
	// The UUID of the cluster.
	Uuid pulumi.StringPtrInput
}

func (ClusterDefaultQueueState) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterDefaultQueueState)(nil)).Elem()
}

type clusterDefaultQueueArgs struct {
	// The GraphQL ID of the cluster to which to add a default queue.
	ClusterId string `pulumi:"clusterId"`
	// The GraphQL ID of the cluster queue to set as default on the cluster.
	QueueId string `pulumi:"queueId"`
}

// The set of arguments for constructing a ClusterDefaultQueue resource.
type ClusterDefaultQueueArgs struct {
	// The GraphQL ID of the cluster to which to add a default queue.
	ClusterId pulumi.StringInput
	// The GraphQL ID of the cluster queue to set as default on the cluster.
	QueueId pulumi.StringInput
}

func (ClusterDefaultQueueArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterDefaultQueueArgs)(nil)).Elem()
}

type ClusterDefaultQueueInput interface {
	pulumi.Input

	ToClusterDefaultQueueOutput() ClusterDefaultQueueOutput
	ToClusterDefaultQueueOutputWithContext(ctx context.Context) ClusterDefaultQueueOutput
}

func (*ClusterDefaultQueue) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterDefaultQueue)(nil)).Elem()
}

func (i *ClusterDefaultQueue) ToClusterDefaultQueueOutput() ClusterDefaultQueueOutput {
	return i.ToClusterDefaultQueueOutputWithContext(context.Background())
}

func (i *ClusterDefaultQueue) ToClusterDefaultQueueOutputWithContext(ctx context.Context) ClusterDefaultQueueOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterDefaultQueueOutput)
}

// ClusterDefaultQueueArrayInput is an input type that accepts ClusterDefaultQueueArray and ClusterDefaultQueueArrayOutput values.
// You can construct a concrete instance of `ClusterDefaultQueueArrayInput` via:
//
//	ClusterDefaultQueueArray{ ClusterDefaultQueueArgs{...} }
type ClusterDefaultQueueArrayInput interface {
	pulumi.Input

	ToClusterDefaultQueueArrayOutput() ClusterDefaultQueueArrayOutput
	ToClusterDefaultQueueArrayOutputWithContext(context.Context) ClusterDefaultQueueArrayOutput
}

type ClusterDefaultQueueArray []ClusterDefaultQueueInput

func (ClusterDefaultQueueArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ClusterDefaultQueue)(nil)).Elem()
}

func (i ClusterDefaultQueueArray) ToClusterDefaultQueueArrayOutput() ClusterDefaultQueueArrayOutput {
	return i.ToClusterDefaultQueueArrayOutputWithContext(context.Background())
}

func (i ClusterDefaultQueueArray) ToClusterDefaultQueueArrayOutputWithContext(ctx context.Context) ClusterDefaultQueueArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterDefaultQueueArrayOutput)
}

// ClusterDefaultQueueMapInput is an input type that accepts ClusterDefaultQueueMap and ClusterDefaultQueueMapOutput values.
// You can construct a concrete instance of `ClusterDefaultQueueMapInput` via:
//
//	ClusterDefaultQueueMap{ "key": ClusterDefaultQueueArgs{...} }
type ClusterDefaultQueueMapInput interface {
	pulumi.Input

	ToClusterDefaultQueueMapOutput() ClusterDefaultQueueMapOutput
	ToClusterDefaultQueueMapOutputWithContext(context.Context) ClusterDefaultQueueMapOutput
}

type ClusterDefaultQueueMap map[string]ClusterDefaultQueueInput

func (ClusterDefaultQueueMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ClusterDefaultQueue)(nil)).Elem()
}

func (i ClusterDefaultQueueMap) ToClusterDefaultQueueMapOutput() ClusterDefaultQueueMapOutput {
	return i.ToClusterDefaultQueueMapOutputWithContext(context.Background())
}

func (i ClusterDefaultQueueMap) ToClusterDefaultQueueMapOutputWithContext(ctx context.Context) ClusterDefaultQueueMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterDefaultQueueMapOutput)
}

type ClusterDefaultQueueOutput struct{ *pulumi.OutputState }

func (ClusterDefaultQueueOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterDefaultQueue)(nil)).Elem()
}

func (o ClusterDefaultQueueOutput) ToClusterDefaultQueueOutput() ClusterDefaultQueueOutput {
	return o
}

func (o ClusterDefaultQueueOutput) ToClusterDefaultQueueOutputWithContext(ctx context.Context) ClusterDefaultQueueOutput {
	return o
}

// The GraphQL ID of the cluster to which to add a default queue.
func (o ClusterDefaultQueueOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *ClusterDefaultQueue) pulumi.StringOutput { return v.ClusterId }).(pulumi.StringOutput)
}

// The GraphQL ID of the cluster queue to set as default on the cluster.
func (o ClusterDefaultQueueOutput) QueueId() pulumi.StringOutput {
	return o.ApplyT(func(v *ClusterDefaultQueue) pulumi.StringOutput { return v.QueueId }).(pulumi.StringOutput)
}

// The UUID of the cluster.
func (o ClusterDefaultQueueOutput) Uuid() pulumi.StringOutput {
	return o.ApplyT(func(v *ClusterDefaultQueue) pulumi.StringOutput { return v.Uuid }).(pulumi.StringOutput)
}

type ClusterDefaultQueueArrayOutput struct{ *pulumi.OutputState }

func (ClusterDefaultQueueArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ClusterDefaultQueue)(nil)).Elem()
}

func (o ClusterDefaultQueueArrayOutput) ToClusterDefaultQueueArrayOutput() ClusterDefaultQueueArrayOutput {
	return o
}

func (o ClusterDefaultQueueArrayOutput) ToClusterDefaultQueueArrayOutputWithContext(ctx context.Context) ClusterDefaultQueueArrayOutput {
	return o
}

func (o ClusterDefaultQueueArrayOutput) Index(i pulumi.IntInput) ClusterDefaultQueueOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ClusterDefaultQueue {
		return vs[0].([]*ClusterDefaultQueue)[vs[1].(int)]
	}).(ClusterDefaultQueueOutput)
}

type ClusterDefaultQueueMapOutput struct{ *pulumi.OutputState }

func (ClusterDefaultQueueMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ClusterDefaultQueue)(nil)).Elem()
}

func (o ClusterDefaultQueueMapOutput) ToClusterDefaultQueueMapOutput() ClusterDefaultQueueMapOutput {
	return o
}

func (o ClusterDefaultQueueMapOutput) ToClusterDefaultQueueMapOutputWithContext(ctx context.Context) ClusterDefaultQueueMapOutput {
	return o
}

func (o ClusterDefaultQueueMapOutput) MapIndex(k pulumi.StringInput) ClusterDefaultQueueOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ClusterDefaultQueue {
		return vs[0].(map[string]*ClusterDefaultQueue)[vs[1].(string)]
	}).(ClusterDefaultQueueOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterDefaultQueueInput)(nil)).Elem(), &ClusterDefaultQueue{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterDefaultQueueArrayInput)(nil)).Elem(), ClusterDefaultQueueArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterDefaultQueueMapInput)(nil)).Elem(), ClusterDefaultQueueMap{})
	pulumi.RegisterOutputType(ClusterDefaultQueueOutput{})
	pulumi.RegisterOutputType(ClusterDefaultQueueArrayOutput{})
	pulumi.RegisterOutputType(ClusterDefaultQueueMapOutput{})
}
