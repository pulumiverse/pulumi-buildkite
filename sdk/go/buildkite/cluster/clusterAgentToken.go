// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cluster

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-buildkite/sdk/v2/go/buildkite/internal"
)

// A Cluster Agent Token is a token used to connect an agent to a cluster in Buildkite.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-buildkite/sdk/v2/go/buildkite/Cluster"
//	"github.com/pulumiverse/pulumi-buildkite/sdk/v2/go/buildkite/Pipeline"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// create a cluster
//			primary, err := Cluster.NewCluster(ctx, "primary", &Cluster.ClusterArgs{
//				Description: pulumi.String("Runs the monolith build and deploy"),
//				Emoji:       pulumi.String("ðŸš€"),
//				Color:       pulumi.String("#bada55"),
//			})
//			if err != nil {
//				return err
//			}
//			// create an agent token for the cluster
//			_, err = Cluster.NewClusterAgentToken(ctx, "defaultClusterAgentToken", &Cluster.ClusterAgentTokenArgs{
//				Description: pulumi.String("Default cluster token"),
//				ClusterId:   primary.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = Cluster.NewClusterAgentToken(ctx, "ipLimitedToken", &Cluster.ClusterAgentTokenArgs{
//				Description: pulumi.String("Token with allowed IP range"),
//				ClusterId:   primary.ID(),
//				AllowedIpAddresses: pulumi.StringArray{
//					pulumi.String("10.100.1.0/28"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = Pipeline.NewPipeline(ctx, "monolith", &Pipeline.PipelineArgs{
//				Repository: pulumi.String("https://github.com/..."),
//				ClusterId:  primary.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = Cluster.NewClusterQueue(ctx, "defaultClusterQueue", &Cluster.ClusterQueueArgs{
//				ClusterId: primary.ID(),
//				Key:       pulumi.String("default"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type ClusterAgentToken struct {
	pulumi.CustomResourceState

	// A list of CIDR-notation IPv4 addresses from which agents can use this Cluster Agent Token.If not set, all IP addresses are allowed (the same as setting 0.0.0.0/0).
	AllowedIpAddresses pulumi.StringArrayOutput `pulumi:"allowedIpAddresses"`
	// The GraphQL ID of the Cluster that this Cluster Agent Token belongs to.
	ClusterId pulumi.StringOutput `pulumi:"clusterId"`
	// The UUID of the Cluster that this token belongs to.
	ClusterUuid pulumi.StringOutput `pulumi:"clusterUuid"`
	// A description about what this cluster agent token is used for.
	Description pulumi.StringOutput `pulumi:"description"`
	// The token value used by an agent to register with the API.
	Token pulumi.StringOutput `pulumi:"token"`
	// The UUID of the token.
	Uuid pulumi.StringOutput `pulumi:"uuid"`
}

// NewClusterAgentToken registers a new resource with the given unique name, arguments, and options.
func NewClusterAgentToken(ctx *pulumi.Context,
	name string, args *ClusterAgentTokenArgs, opts ...pulumi.ResourceOption) (*ClusterAgentToken, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterId == nil {
		return nil, errors.New("invalid value for required argument 'ClusterId'")
	}
	if args.Description == nil {
		return nil, errors.New("invalid value for required argument 'Description'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"token",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ClusterAgentToken
	err := ctx.RegisterResource("buildkite:Cluster/clusterAgentToken:ClusterAgentToken", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetClusterAgentToken gets an existing ClusterAgentToken resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetClusterAgentToken(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClusterAgentTokenState, opts ...pulumi.ResourceOption) (*ClusterAgentToken, error) {
	var resource ClusterAgentToken
	err := ctx.ReadResource("buildkite:Cluster/clusterAgentToken:ClusterAgentToken", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ClusterAgentToken resources.
type clusterAgentTokenState struct {
	// A list of CIDR-notation IPv4 addresses from which agents can use this Cluster Agent Token.If not set, all IP addresses are allowed (the same as setting 0.0.0.0/0).
	AllowedIpAddresses []string `pulumi:"allowedIpAddresses"`
	// The GraphQL ID of the Cluster that this Cluster Agent Token belongs to.
	ClusterId *string `pulumi:"clusterId"`
	// The UUID of the Cluster that this token belongs to.
	ClusterUuid *string `pulumi:"clusterUuid"`
	// A description about what this cluster agent token is used for.
	Description *string `pulumi:"description"`
	// The token value used by an agent to register with the API.
	Token *string `pulumi:"token"`
	// The UUID of the token.
	Uuid *string `pulumi:"uuid"`
}

type ClusterAgentTokenState struct {
	// A list of CIDR-notation IPv4 addresses from which agents can use this Cluster Agent Token.If not set, all IP addresses are allowed (the same as setting 0.0.0.0/0).
	AllowedIpAddresses pulumi.StringArrayInput
	// The GraphQL ID of the Cluster that this Cluster Agent Token belongs to.
	ClusterId pulumi.StringPtrInput
	// The UUID of the Cluster that this token belongs to.
	ClusterUuid pulumi.StringPtrInput
	// A description about what this cluster agent token is used for.
	Description pulumi.StringPtrInput
	// The token value used by an agent to register with the API.
	Token pulumi.StringPtrInput
	// The UUID of the token.
	Uuid pulumi.StringPtrInput
}

func (ClusterAgentTokenState) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterAgentTokenState)(nil)).Elem()
}

type clusterAgentTokenArgs struct {
	// A list of CIDR-notation IPv4 addresses from which agents can use this Cluster Agent Token.If not set, all IP addresses are allowed (the same as setting 0.0.0.0/0).
	AllowedIpAddresses []string `pulumi:"allowedIpAddresses"`
	// The GraphQL ID of the Cluster that this Cluster Agent Token belongs to.
	ClusterId string `pulumi:"clusterId"`
	// A description about what this cluster agent token is used for.
	Description string `pulumi:"description"`
}

// The set of arguments for constructing a ClusterAgentToken resource.
type ClusterAgentTokenArgs struct {
	// A list of CIDR-notation IPv4 addresses from which agents can use this Cluster Agent Token.If not set, all IP addresses are allowed (the same as setting 0.0.0.0/0).
	AllowedIpAddresses pulumi.StringArrayInput
	// The GraphQL ID of the Cluster that this Cluster Agent Token belongs to.
	ClusterId pulumi.StringInput
	// A description about what this cluster agent token is used for.
	Description pulumi.StringInput
}

func (ClusterAgentTokenArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterAgentTokenArgs)(nil)).Elem()
}

type ClusterAgentTokenInput interface {
	pulumi.Input

	ToClusterAgentTokenOutput() ClusterAgentTokenOutput
	ToClusterAgentTokenOutputWithContext(ctx context.Context) ClusterAgentTokenOutput
}

func (*ClusterAgentToken) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterAgentToken)(nil)).Elem()
}

func (i *ClusterAgentToken) ToClusterAgentTokenOutput() ClusterAgentTokenOutput {
	return i.ToClusterAgentTokenOutputWithContext(context.Background())
}

func (i *ClusterAgentToken) ToClusterAgentTokenOutputWithContext(ctx context.Context) ClusterAgentTokenOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterAgentTokenOutput)
}

// ClusterAgentTokenArrayInput is an input type that accepts ClusterAgentTokenArray and ClusterAgentTokenArrayOutput values.
// You can construct a concrete instance of `ClusterAgentTokenArrayInput` via:
//
//	ClusterAgentTokenArray{ ClusterAgentTokenArgs{...} }
type ClusterAgentTokenArrayInput interface {
	pulumi.Input

	ToClusterAgentTokenArrayOutput() ClusterAgentTokenArrayOutput
	ToClusterAgentTokenArrayOutputWithContext(context.Context) ClusterAgentTokenArrayOutput
}

type ClusterAgentTokenArray []ClusterAgentTokenInput

func (ClusterAgentTokenArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ClusterAgentToken)(nil)).Elem()
}

func (i ClusterAgentTokenArray) ToClusterAgentTokenArrayOutput() ClusterAgentTokenArrayOutput {
	return i.ToClusterAgentTokenArrayOutputWithContext(context.Background())
}

func (i ClusterAgentTokenArray) ToClusterAgentTokenArrayOutputWithContext(ctx context.Context) ClusterAgentTokenArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterAgentTokenArrayOutput)
}

// ClusterAgentTokenMapInput is an input type that accepts ClusterAgentTokenMap and ClusterAgentTokenMapOutput values.
// You can construct a concrete instance of `ClusterAgentTokenMapInput` via:
//
//	ClusterAgentTokenMap{ "key": ClusterAgentTokenArgs{...} }
type ClusterAgentTokenMapInput interface {
	pulumi.Input

	ToClusterAgentTokenMapOutput() ClusterAgentTokenMapOutput
	ToClusterAgentTokenMapOutputWithContext(context.Context) ClusterAgentTokenMapOutput
}

type ClusterAgentTokenMap map[string]ClusterAgentTokenInput

func (ClusterAgentTokenMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ClusterAgentToken)(nil)).Elem()
}

func (i ClusterAgentTokenMap) ToClusterAgentTokenMapOutput() ClusterAgentTokenMapOutput {
	return i.ToClusterAgentTokenMapOutputWithContext(context.Background())
}

func (i ClusterAgentTokenMap) ToClusterAgentTokenMapOutputWithContext(ctx context.Context) ClusterAgentTokenMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterAgentTokenMapOutput)
}

type ClusterAgentTokenOutput struct{ *pulumi.OutputState }

func (ClusterAgentTokenOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterAgentToken)(nil)).Elem()
}

func (o ClusterAgentTokenOutput) ToClusterAgentTokenOutput() ClusterAgentTokenOutput {
	return o
}

func (o ClusterAgentTokenOutput) ToClusterAgentTokenOutputWithContext(ctx context.Context) ClusterAgentTokenOutput {
	return o
}

// A list of CIDR-notation IPv4 addresses from which agents can use this Cluster Agent Token.If not set, all IP addresses are allowed (the same as setting 0.0.0.0/0).
func (o ClusterAgentTokenOutput) AllowedIpAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ClusterAgentToken) pulumi.StringArrayOutput { return v.AllowedIpAddresses }).(pulumi.StringArrayOutput)
}

// The GraphQL ID of the Cluster that this Cluster Agent Token belongs to.
func (o ClusterAgentTokenOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *ClusterAgentToken) pulumi.StringOutput { return v.ClusterId }).(pulumi.StringOutput)
}

// The UUID of the Cluster that this token belongs to.
func (o ClusterAgentTokenOutput) ClusterUuid() pulumi.StringOutput {
	return o.ApplyT(func(v *ClusterAgentToken) pulumi.StringOutput { return v.ClusterUuid }).(pulumi.StringOutput)
}

// A description about what this cluster agent token is used for.
func (o ClusterAgentTokenOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *ClusterAgentToken) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// The token value used by an agent to register with the API.
func (o ClusterAgentTokenOutput) Token() pulumi.StringOutput {
	return o.ApplyT(func(v *ClusterAgentToken) pulumi.StringOutput { return v.Token }).(pulumi.StringOutput)
}

// The UUID of the token.
func (o ClusterAgentTokenOutput) Uuid() pulumi.StringOutput {
	return o.ApplyT(func(v *ClusterAgentToken) pulumi.StringOutput { return v.Uuid }).(pulumi.StringOutput)
}

type ClusterAgentTokenArrayOutput struct{ *pulumi.OutputState }

func (ClusterAgentTokenArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ClusterAgentToken)(nil)).Elem()
}

func (o ClusterAgentTokenArrayOutput) ToClusterAgentTokenArrayOutput() ClusterAgentTokenArrayOutput {
	return o
}

func (o ClusterAgentTokenArrayOutput) ToClusterAgentTokenArrayOutputWithContext(ctx context.Context) ClusterAgentTokenArrayOutput {
	return o
}

func (o ClusterAgentTokenArrayOutput) Index(i pulumi.IntInput) ClusterAgentTokenOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ClusterAgentToken {
		return vs[0].([]*ClusterAgentToken)[vs[1].(int)]
	}).(ClusterAgentTokenOutput)
}

type ClusterAgentTokenMapOutput struct{ *pulumi.OutputState }

func (ClusterAgentTokenMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ClusterAgentToken)(nil)).Elem()
}

func (o ClusterAgentTokenMapOutput) ToClusterAgentTokenMapOutput() ClusterAgentTokenMapOutput {
	return o
}

func (o ClusterAgentTokenMapOutput) ToClusterAgentTokenMapOutputWithContext(ctx context.Context) ClusterAgentTokenMapOutput {
	return o
}

func (o ClusterAgentTokenMapOutput) MapIndex(k pulumi.StringInput) ClusterAgentTokenOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ClusterAgentToken {
		return vs[0].(map[string]*ClusterAgentToken)[vs[1].(string)]
	}).(ClusterAgentTokenOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterAgentTokenInput)(nil)).Elem(), &ClusterAgentToken{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterAgentTokenArrayInput)(nil)).Elem(), ClusterAgentTokenArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterAgentTokenMapInput)(nil)).Elem(), ClusterAgentTokenMap{})
	pulumi.RegisterOutputType(ClusterAgentTokenOutput{})
	pulumi.RegisterOutputType(ClusterAgentTokenArrayOutput{})
	pulumi.RegisterOutputType(ClusterAgentTokenMapOutput{})
}
