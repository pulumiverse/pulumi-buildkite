// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cluster

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-buildkite/sdk/v3/go/buildkite/internal"
)

// A Cluster Queue is a queue belonging to a specific Cluster for its Agents to target builds on.
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-buildkite/sdk/v3/go/buildkite/Cluster"
//	"github.com/pulumiverse/pulumi-buildkite/sdk/v3/go/buildkite/Pipeline"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// create a cluster
//			primary, err := Cluster.NewCluster(ctx, "primary", &Cluster.ClusterArgs{
//				Description: pulumi.String("Runs the monolith build and deploy"),
//				Emoji:       pulumi.String("ðŸš€"),
//				Color:       pulumi.String("#bada55"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = Pipeline.NewPipeline(ctx, "monolith", &Pipeline.PipelineArgs{
//				Repository: pulumi.String("https://github.com/..."),
//				ClusterId:  primary.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			// create a queue to put pipeline builds in
//			_, err = Cluster.NewClusterQueue(ctx, "default", &Cluster.ClusterQueueArgs{
//				ClusterId: primary.ID(),
//				Key:       pulumi.String("default"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// import a cluster queue resource using the GraphQL ID along with its respective cluster UUID
//
// #
//
// you can use this query to find the ID:
//
// query getClusterQueues {
//
//	organization(slug: "ORGANIZATION_SLUG") {
//
//	  cluster(id: "CLUSTER_UUID") {
//
//	    queues(first: 50) {
//
//	      edges {
//
//	        node {
//
//	          id
//
//	          key
//
//	        }
//
//	      }
//
//	    }
//
//	  }
//
//	}
//
// }
//
// ```sh
// $ pulumi import buildkite:Cluster/clusterQueue:ClusterQueue test Q2x1c3RlclF1ZXVlLS0tYjJiOGRhNTEtOWY5My00Y2MyLTkyMjktMGRiNzg3ZDQzOTAz,35498aaf-ad05-4fa5-9a07-91bf6cacd2bd
// ```
type ClusterQueue struct {
	pulumi.CustomResourceState

	// The ID of the cluster that this cluster queue belongs to.
	ClusterId pulumi.StringOutput `pulumi:"clusterId"`
	// The UUID of the cluster this queue belongs to.
	ClusterUuid pulumi.StringOutput `pulumi:"clusterUuid"`
	// A description for the cluster queue.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The key of the cluster queue.
	Key pulumi.StringOutput `pulumi:"key"`
	// The UUID of the cluster queue.
	Uuid pulumi.StringOutput `pulumi:"uuid"`
}

// NewClusterQueue registers a new resource with the given unique name, arguments, and options.
func NewClusterQueue(ctx *pulumi.Context,
	name string, args *ClusterQueueArgs, opts ...pulumi.ResourceOption) (*ClusterQueue, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterId == nil {
		return nil, errors.New("invalid value for required argument 'ClusterId'")
	}
	if args.Key == nil {
		return nil, errors.New("invalid value for required argument 'Key'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ClusterQueue
	err := ctx.RegisterResource("buildkite:Cluster/clusterQueue:ClusterQueue", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetClusterQueue gets an existing ClusterQueue resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetClusterQueue(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClusterQueueState, opts ...pulumi.ResourceOption) (*ClusterQueue, error) {
	var resource ClusterQueue
	err := ctx.ReadResource("buildkite:Cluster/clusterQueue:ClusterQueue", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ClusterQueue resources.
type clusterQueueState struct {
	// The ID of the cluster that this cluster queue belongs to.
	ClusterId *string `pulumi:"clusterId"`
	// The UUID of the cluster this queue belongs to.
	ClusterUuid *string `pulumi:"clusterUuid"`
	// A description for the cluster queue.
	Description *string `pulumi:"description"`
	// The key of the cluster queue.
	Key *string `pulumi:"key"`
	// The UUID of the cluster queue.
	Uuid *string `pulumi:"uuid"`
}

type ClusterQueueState struct {
	// The ID of the cluster that this cluster queue belongs to.
	ClusterId pulumi.StringPtrInput
	// The UUID of the cluster this queue belongs to.
	ClusterUuid pulumi.StringPtrInput
	// A description for the cluster queue.
	Description pulumi.StringPtrInput
	// The key of the cluster queue.
	Key pulumi.StringPtrInput
	// The UUID of the cluster queue.
	Uuid pulumi.StringPtrInput
}

func (ClusterQueueState) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterQueueState)(nil)).Elem()
}

type clusterQueueArgs struct {
	// The ID of the cluster that this cluster queue belongs to.
	ClusterId string `pulumi:"clusterId"`
	// A description for the cluster queue.
	Description *string `pulumi:"description"`
	// The key of the cluster queue.
	Key string `pulumi:"key"`
}

// The set of arguments for constructing a ClusterQueue resource.
type ClusterQueueArgs struct {
	// The ID of the cluster that this cluster queue belongs to.
	ClusterId pulumi.StringInput
	// A description for the cluster queue.
	Description pulumi.StringPtrInput
	// The key of the cluster queue.
	Key pulumi.StringInput
}

func (ClusterQueueArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterQueueArgs)(nil)).Elem()
}

type ClusterQueueInput interface {
	pulumi.Input

	ToClusterQueueOutput() ClusterQueueOutput
	ToClusterQueueOutputWithContext(ctx context.Context) ClusterQueueOutput
}

func (*ClusterQueue) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterQueue)(nil)).Elem()
}

func (i *ClusterQueue) ToClusterQueueOutput() ClusterQueueOutput {
	return i.ToClusterQueueOutputWithContext(context.Background())
}

func (i *ClusterQueue) ToClusterQueueOutputWithContext(ctx context.Context) ClusterQueueOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterQueueOutput)
}

// ClusterQueueArrayInput is an input type that accepts ClusterQueueArray and ClusterQueueArrayOutput values.
// You can construct a concrete instance of `ClusterQueueArrayInput` via:
//
//	ClusterQueueArray{ ClusterQueueArgs{...} }
type ClusterQueueArrayInput interface {
	pulumi.Input

	ToClusterQueueArrayOutput() ClusterQueueArrayOutput
	ToClusterQueueArrayOutputWithContext(context.Context) ClusterQueueArrayOutput
}

type ClusterQueueArray []ClusterQueueInput

func (ClusterQueueArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ClusterQueue)(nil)).Elem()
}

func (i ClusterQueueArray) ToClusterQueueArrayOutput() ClusterQueueArrayOutput {
	return i.ToClusterQueueArrayOutputWithContext(context.Background())
}

func (i ClusterQueueArray) ToClusterQueueArrayOutputWithContext(ctx context.Context) ClusterQueueArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterQueueArrayOutput)
}

// ClusterQueueMapInput is an input type that accepts ClusterQueueMap and ClusterQueueMapOutput values.
// You can construct a concrete instance of `ClusterQueueMapInput` via:
//
//	ClusterQueueMap{ "key": ClusterQueueArgs{...} }
type ClusterQueueMapInput interface {
	pulumi.Input

	ToClusterQueueMapOutput() ClusterQueueMapOutput
	ToClusterQueueMapOutputWithContext(context.Context) ClusterQueueMapOutput
}

type ClusterQueueMap map[string]ClusterQueueInput

func (ClusterQueueMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ClusterQueue)(nil)).Elem()
}

func (i ClusterQueueMap) ToClusterQueueMapOutput() ClusterQueueMapOutput {
	return i.ToClusterQueueMapOutputWithContext(context.Background())
}

func (i ClusterQueueMap) ToClusterQueueMapOutputWithContext(ctx context.Context) ClusterQueueMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterQueueMapOutput)
}

type ClusterQueueOutput struct{ *pulumi.OutputState }

func (ClusterQueueOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterQueue)(nil)).Elem()
}

func (o ClusterQueueOutput) ToClusterQueueOutput() ClusterQueueOutput {
	return o
}

func (o ClusterQueueOutput) ToClusterQueueOutputWithContext(ctx context.Context) ClusterQueueOutput {
	return o
}

// The ID of the cluster that this cluster queue belongs to.
func (o ClusterQueueOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *ClusterQueue) pulumi.StringOutput { return v.ClusterId }).(pulumi.StringOutput)
}

// The UUID of the cluster this queue belongs to.
func (o ClusterQueueOutput) ClusterUuid() pulumi.StringOutput {
	return o.ApplyT(func(v *ClusterQueue) pulumi.StringOutput { return v.ClusterUuid }).(pulumi.StringOutput)
}

// A description for the cluster queue.
func (o ClusterQueueOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterQueue) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The key of the cluster queue.
func (o ClusterQueueOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v *ClusterQueue) pulumi.StringOutput { return v.Key }).(pulumi.StringOutput)
}

// The UUID of the cluster queue.
func (o ClusterQueueOutput) Uuid() pulumi.StringOutput {
	return o.ApplyT(func(v *ClusterQueue) pulumi.StringOutput { return v.Uuid }).(pulumi.StringOutput)
}

type ClusterQueueArrayOutput struct{ *pulumi.OutputState }

func (ClusterQueueArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ClusterQueue)(nil)).Elem()
}

func (o ClusterQueueArrayOutput) ToClusterQueueArrayOutput() ClusterQueueArrayOutput {
	return o
}

func (o ClusterQueueArrayOutput) ToClusterQueueArrayOutputWithContext(ctx context.Context) ClusterQueueArrayOutput {
	return o
}

func (o ClusterQueueArrayOutput) Index(i pulumi.IntInput) ClusterQueueOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ClusterQueue {
		return vs[0].([]*ClusterQueue)[vs[1].(int)]
	}).(ClusterQueueOutput)
}

type ClusterQueueMapOutput struct{ *pulumi.OutputState }

func (ClusterQueueMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ClusterQueue)(nil)).Elem()
}

func (o ClusterQueueMapOutput) ToClusterQueueMapOutput() ClusterQueueMapOutput {
	return o
}

func (o ClusterQueueMapOutput) ToClusterQueueMapOutputWithContext(ctx context.Context) ClusterQueueMapOutput {
	return o
}

func (o ClusterQueueMapOutput) MapIndex(k pulumi.StringInput) ClusterQueueOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ClusterQueue {
		return vs[0].(map[string]*ClusterQueue)[vs[1].(string)]
	}).(ClusterQueueOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterQueueInput)(nil)).Elem(), &ClusterQueue{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterQueueArrayInput)(nil)).Elem(), ClusterQueueArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterQueueMapInput)(nil)).Elem(), ClusterQueueMap{})
	pulumi.RegisterOutputType(ClusterQueueOutput{})
	pulumi.RegisterOutputType(ClusterQueueArrayOutput{})
	pulumi.RegisterOutputType(ClusterQueueMapOutput{})
}
