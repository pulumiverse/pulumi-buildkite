// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cluster

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-buildkite/sdk/v2/go/buildkite/internal"
)

// ## # Resource: clusterQueue
//
// This resource allows you to create and manage cluster queues.
//
// Buildkite Documentation: https://buildkite.com/docs/clusters/manage-clusters#set-up-clusters-create-a-queue
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-buildkite/sdk/v2/go/buildkite/Cluster"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Cluster.NewClusterQueue(ctx, "queue1", &Cluster.ClusterQueueArgs{
//				ClusterId:   pulumi.String("Q2x1c3Rlci0tLTMzMDc0ZDhiLTM4MjctNDRkNC05YTQ3LTkwN2E2NWZjODViNg=="),
//				Description: pulumi.String("Prod deployment cluster queue"),
//				Key:         pulumi.String("prod-deploy"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Cluster queues can be imported using its `GraphQL ID`, along with its respective cluster `UUID`, separated by a comma. e.g.
//
// ```sh
//
//	$ pulumi import buildkite:Cluster/clusterQueue:ClusterQueue test Q2x1c3RlclF1ZXVlLS0tYjJiOGRhNTEtOWY5My00Y2MyLTkyMjktMGRiNzg3ZDQzOTAz,35498aaf-ad05-4fa5-9a07-91bf6cacd2bd
//
// ```
//
//	To find the cluster's `UUID` to utilize, you can use the below GraphQL query below. Alternatively, you can use this [pre-saved query](https://buildkite.com/user/graphql/console/3adf0389-02bd-45ef-adcd-4e8e5ae57f25), where you will need fo fill in the organization slug (ORGANIZATION_SLUG) for obtaining the relevant cluster name/`UUID` that the cluster queue is in. graphql query getClusters {
//
//	organization(slug"ORGANIZATION_SLUG") {
//
//	clusters(first50) {
//
//	edges{
//
//	node{
//
//	name
//
//	uuid
//
//	}
//
//	}
//
//	}
//
//	} } After the cluster `UUID` has been found, you can use the below GraphQL query to find the cluster queue's `GraphQL ID`. Alternatively, this [pre-saved query](https://buildkite.com/user/graphql/console/1d913905-900e-40e7-8f46-651543487b5a) can be used, specifying the organization slug (ORGANIZATION_SLUG) and the cluster `UUID` from above (CLUSTER_UUID). graphql query getClusterQueues {
//
//	organization(slug"ORGANIZATION_SLUG") {
//
//	cluster(id"CLUSTER_UUID") {
//
//	queues(first50) {
//
//	edges {
//
//	node {
//
//	id
//
//	key
//
//	}
//
//	}
//
//	}
//
//	}
//
//	} }
type ClusterQueue struct {
	pulumi.CustomResourceState

	// The ID of the cluster that this cluster queue belongs to.
	ClusterId pulumi.StringOutput `pulumi:"clusterId"`
	// The UUID of the cluster that this cluster queue belongs to.
	ClusterUuid pulumi.StringOutput `pulumi:"clusterUuid"`
	// The description of the cluster queue.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The key of the cluster queue.
	Key pulumi.StringOutput `pulumi:"key"`
	// The UUID of the created cluster queue.
	Uuid pulumi.StringOutput `pulumi:"uuid"`
}

// NewClusterQueue registers a new resource with the given unique name, arguments, and options.
func NewClusterQueue(ctx *pulumi.Context,
	name string, args *ClusterQueueArgs, opts ...pulumi.ResourceOption) (*ClusterQueue, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterId == nil {
		return nil, errors.New("invalid value for required argument 'ClusterId'")
	}
	if args.Key == nil {
		return nil, errors.New("invalid value for required argument 'Key'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ClusterQueue
	err := ctx.RegisterResource("buildkite:Cluster/clusterQueue:ClusterQueue", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetClusterQueue gets an existing ClusterQueue resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetClusterQueue(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClusterQueueState, opts ...pulumi.ResourceOption) (*ClusterQueue, error) {
	var resource ClusterQueue
	err := ctx.ReadResource("buildkite:Cluster/clusterQueue:ClusterQueue", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ClusterQueue resources.
type clusterQueueState struct {
	// The ID of the cluster that this cluster queue belongs to.
	ClusterId *string `pulumi:"clusterId"`
	// The UUID of the cluster that this cluster queue belongs to.
	ClusterUuid *string `pulumi:"clusterUuid"`
	// The description of the cluster queue.
	Description *string `pulumi:"description"`
	// The key of the cluster queue.
	Key *string `pulumi:"key"`
	// The UUID of the created cluster queue.
	Uuid *string `pulumi:"uuid"`
}

type ClusterQueueState struct {
	// The ID of the cluster that this cluster queue belongs to.
	ClusterId pulumi.StringPtrInput
	// The UUID of the cluster that this cluster queue belongs to.
	ClusterUuid pulumi.StringPtrInput
	// The description of the cluster queue.
	Description pulumi.StringPtrInput
	// The key of the cluster queue.
	Key pulumi.StringPtrInput
	// The UUID of the created cluster queue.
	Uuid pulumi.StringPtrInput
}

func (ClusterQueueState) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterQueueState)(nil)).Elem()
}

type clusterQueueArgs struct {
	// The ID of the cluster that this cluster queue belongs to.
	ClusterId string `pulumi:"clusterId"`
	// The description of the cluster queue.
	Description *string `pulumi:"description"`
	// The key of the cluster queue.
	Key string `pulumi:"key"`
}

// The set of arguments for constructing a ClusterQueue resource.
type ClusterQueueArgs struct {
	// The ID of the cluster that this cluster queue belongs to.
	ClusterId pulumi.StringInput
	// The description of the cluster queue.
	Description pulumi.StringPtrInput
	// The key of the cluster queue.
	Key pulumi.StringInput
}

func (ClusterQueueArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterQueueArgs)(nil)).Elem()
}

type ClusterQueueInput interface {
	pulumi.Input

	ToClusterQueueOutput() ClusterQueueOutput
	ToClusterQueueOutputWithContext(ctx context.Context) ClusterQueueOutput
}

func (*ClusterQueue) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterQueue)(nil)).Elem()
}

func (i *ClusterQueue) ToClusterQueueOutput() ClusterQueueOutput {
	return i.ToClusterQueueOutputWithContext(context.Background())
}

func (i *ClusterQueue) ToClusterQueueOutputWithContext(ctx context.Context) ClusterQueueOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterQueueOutput)
}

// ClusterQueueArrayInput is an input type that accepts ClusterQueueArray and ClusterQueueArrayOutput values.
// You can construct a concrete instance of `ClusterQueueArrayInput` via:
//
//	ClusterQueueArray{ ClusterQueueArgs{...} }
type ClusterQueueArrayInput interface {
	pulumi.Input

	ToClusterQueueArrayOutput() ClusterQueueArrayOutput
	ToClusterQueueArrayOutputWithContext(context.Context) ClusterQueueArrayOutput
}

type ClusterQueueArray []ClusterQueueInput

func (ClusterQueueArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ClusterQueue)(nil)).Elem()
}

func (i ClusterQueueArray) ToClusterQueueArrayOutput() ClusterQueueArrayOutput {
	return i.ToClusterQueueArrayOutputWithContext(context.Background())
}

func (i ClusterQueueArray) ToClusterQueueArrayOutputWithContext(ctx context.Context) ClusterQueueArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterQueueArrayOutput)
}

// ClusterQueueMapInput is an input type that accepts ClusterQueueMap and ClusterQueueMapOutput values.
// You can construct a concrete instance of `ClusterQueueMapInput` via:
//
//	ClusterQueueMap{ "key": ClusterQueueArgs{...} }
type ClusterQueueMapInput interface {
	pulumi.Input

	ToClusterQueueMapOutput() ClusterQueueMapOutput
	ToClusterQueueMapOutputWithContext(context.Context) ClusterQueueMapOutput
}

type ClusterQueueMap map[string]ClusterQueueInput

func (ClusterQueueMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ClusterQueue)(nil)).Elem()
}

func (i ClusterQueueMap) ToClusterQueueMapOutput() ClusterQueueMapOutput {
	return i.ToClusterQueueMapOutputWithContext(context.Background())
}

func (i ClusterQueueMap) ToClusterQueueMapOutputWithContext(ctx context.Context) ClusterQueueMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterQueueMapOutput)
}

type ClusterQueueOutput struct{ *pulumi.OutputState }

func (ClusterQueueOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterQueue)(nil)).Elem()
}

func (o ClusterQueueOutput) ToClusterQueueOutput() ClusterQueueOutput {
	return o
}

func (o ClusterQueueOutput) ToClusterQueueOutputWithContext(ctx context.Context) ClusterQueueOutput {
	return o
}

// The ID of the cluster that this cluster queue belongs to.
func (o ClusterQueueOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *ClusterQueue) pulumi.StringOutput { return v.ClusterId }).(pulumi.StringOutput)
}

// The UUID of the cluster that this cluster queue belongs to.
func (o ClusterQueueOutput) ClusterUuid() pulumi.StringOutput {
	return o.ApplyT(func(v *ClusterQueue) pulumi.StringOutput { return v.ClusterUuid }).(pulumi.StringOutput)
}

// The description of the cluster queue.
func (o ClusterQueueOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterQueue) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The key of the cluster queue.
func (o ClusterQueueOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v *ClusterQueue) pulumi.StringOutput { return v.Key }).(pulumi.StringOutput)
}

// The UUID of the created cluster queue.
func (o ClusterQueueOutput) Uuid() pulumi.StringOutput {
	return o.ApplyT(func(v *ClusterQueue) pulumi.StringOutput { return v.Uuid }).(pulumi.StringOutput)
}

type ClusterQueueArrayOutput struct{ *pulumi.OutputState }

func (ClusterQueueArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ClusterQueue)(nil)).Elem()
}

func (o ClusterQueueArrayOutput) ToClusterQueueArrayOutput() ClusterQueueArrayOutput {
	return o
}

func (o ClusterQueueArrayOutput) ToClusterQueueArrayOutputWithContext(ctx context.Context) ClusterQueueArrayOutput {
	return o
}

func (o ClusterQueueArrayOutput) Index(i pulumi.IntInput) ClusterQueueOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ClusterQueue {
		return vs[0].([]*ClusterQueue)[vs[1].(int)]
	}).(ClusterQueueOutput)
}

type ClusterQueueMapOutput struct{ *pulumi.OutputState }

func (ClusterQueueMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ClusterQueue)(nil)).Elem()
}

func (o ClusterQueueMapOutput) ToClusterQueueMapOutput() ClusterQueueMapOutput {
	return o
}

func (o ClusterQueueMapOutput) ToClusterQueueMapOutputWithContext(ctx context.Context) ClusterQueueMapOutput {
	return o
}

func (o ClusterQueueMapOutput) MapIndex(k pulumi.StringInput) ClusterQueueOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ClusterQueue {
		return vs[0].(map[string]*ClusterQueue)[vs[1].(string)]
	}).(ClusterQueueOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterQueueInput)(nil)).Elem(), &ClusterQueue{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterQueueArrayInput)(nil)).Elem(), ClusterQueueArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterQueueMapInput)(nil)).Elem(), ClusterQueueMap{})
	pulumi.RegisterOutputType(ClusterQueueOutput{})
	pulumi.RegisterOutputType(ClusterQueueArrayOutput{})
	pulumi.RegisterOutputType(ClusterQueueMapOutput{})
}
