// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cluster

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-buildkite/sdk/v2/go/buildkite/internal"
)

// This resource allows you to create and manage a Buildkite Cluster to run your builds in.
// Clusters are useful for grouping agents by there capabilities or permissions.
// Find out more information in our [documentation](https://buildkite.com/docs/clusters/overview).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-buildkite/sdk/v2/go/buildkite/Cluster"
//	"github.com/pulumiverse/pulumi-buildkite/sdk/v2/go/buildkite/Pipeline"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// create a cluster
//			primary, err := Cluster.NewCluster(ctx, "primary", &Cluster.ClusterArgs{
//				Description: pulumi.String("Runs the monolith build and deploy"),
//				Emoji:       pulumi.String("ðŸš€"),
//				Color:       pulumi.String("#bada55"),
//			})
//			if err != nil {
//				return err
//			}
//			// add a pipeline to the cluster
//			_, err = Pipeline.NewPipeline(ctx, "monolith", &Pipeline.PipelineArgs{
//				Repository: pulumi.String("https://github.com/..."),
//				ClusterId:  primary.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = Cluster.NewClusterQueue(ctx, "default", &Cluster.ClusterQueueArgs{
//				ClusterId: primary.ID(),
//				Key:       pulumi.String("default"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// import a cluster resource using the GraphQL ID
//
// #
//
//	you can use this query to find the ID:
//
//	query getClusters {
//
//	organization(slug: "ORGANIZATION"){
//
//	clusters(first: 5, order:NAME) {
//
//	edges{
//
//	node {
//
//	id
//
//	name
//
//	}
//
//	}
//
//	}
//
//	}
//
//	}
//
// ```sh
// $ pulumi import buildkite:Cluster/cluster:Cluster primary Q2x1c3Rlci0tLTI3ZmFmZjA4LTA3OWEtNDk5ZC1hMmIwLTIzNmY3NWFkMWZjYg==
// ```
type Cluster struct {
	pulumi.CustomResourceState

	// A color representation of the Cluster. Accepts hex codes, eg #BADA55.
	Color pulumi.StringPtrOutput `pulumi:"color"`
	// This is a description for the cluster, this may describe the usage for it, the region, or something else
	// which would help identify the Cluster's purpose.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// An emoji to use with the Cluster, this can either be set using :buildkite: notation, or with the
	// emoji itself, such as ðŸš€.
	Emoji pulumi.StringPtrOutput `pulumi:"emoji"`
	// The name of the Cluster. Can only contain numbers and letters, no spaces or special characters.
	Name pulumi.StringOutput `pulumi:"name"`
	// The UUID of the cluster.
	Uuid pulumi.StringOutput `pulumi:"uuid"`
}

// NewCluster registers a new resource with the given unique name, arguments, and options.
func NewCluster(ctx *pulumi.Context,
	name string, args *ClusterArgs, opts ...pulumi.ResourceOption) (*Cluster, error) {
	if args == nil {
		args = &ClusterArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Cluster
	err := ctx.RegisterResource("buildkite:Cluster/cluster:Cluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCluster gets an existing Cluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClusterState, opts ...pulumi.ResourceOption) (*Cluster, error) {
	var resource Cluster
	err := ctx.ReadResource("buildkite:Cluster/cluster:Cluster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Cluster resources.
type clusterState struct {
	// A color representation of the Cluster. Accepts hex codes, eg #BADA55.
	Color *string `pulumi:"color"`
	// This is a description for the cluster, this may describe the usage for it, the region, or something else
	// which would help identify the Cluster's purpose.
	Description *string `pulumi:"description"`
	// An emoji to use with the Cluster, this can either be set using :buildkite: notation, or with the
	// emoji itself, such as ðŸš€.
	Emoji *string `pulumi:"emoji"`
	// The name of the Cluster. Can only contain numbers and letters, no spaces or special characters.
	Name *string `pulumi:"name"`
	// The UUID of the cluster.
	Uuid *string `pulumi:"uuid"`
}

type ClusterState struct {
	// A color representation of the Cluster. Accepts hex codes, eg #BADA55.
	Color pulumi.StringPtrInput
	// This is a description for the cluster, this may describe the usage for it, the region, or something else
	// which would help identify the Cluster's purpose.
	Description pulumi.StringPtrInput
	// An emoji to use with the Cluster, this can either be set using :buildkite: notation, or with the
	// emoji itself, such as ðŸš€.
	Emoji pulumi.StringPtrInput
	// The name of the Cluster. Can only contain numbers and letters, no spaces or special characters.
	Name pulumi.StringPtrInput
	// The UUID of the cluster.
	Uuid pulumi.StringPtrInput
}

func (ClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterState)(nil)).Elem()
}

type clusterArgs struct {
	// A color representation of the Cluster. Accepts hex codes, eg #BADA55.
	Color *string `pulumi:"color"`
	// This is a description for the cluster, this may describe the usage for it, the region, or something else
	// which would help identify the Cluster's purpose.
	Description *string `pulumi:"description"`
	// An emoji to use with the Cluster, this can either be set using :buildkite: notation, or with the
	// emoji itself, such as ðŸš€.
	Emoji *string `pulumi:"emoji"`
	// The name of the Cluster. Can only contain numbers and letters, no spaces or special characters.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a Cluster resource.
type ClusterArgs struct {
	// A color representation of the Cluster. Accepts hex codes, eg #BADA55.
	Color pulumi.StringPtrInput
	// This is a description for the cluster, this may describe the usage for it, the region, or something else
	// which would help identify the Cluster's purpose.
	Description pulumi.StringPtrInput
	// An emoji to use with the Cluster, this can either be set using :buildkite: notation, or with the
	// emoji itself, such as ðŸš€.
	Emoji pulumi.StringPtrInput
	// The name of the Cluster. Can only contain numbers and letters, no spaces or special characters.
	Name pulumi.StringPtrInput
}

func (ClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterArgs)(nil)).Elem()
}

type ClusterInput interface {
	pulumi.Input

	ToClusterOutput() ClusterOutput
	ToClusterOutputWithContext(ctx context.Context) ClusterOutput
}

func (*Cluster) ElementType() reflect.Type {
	return reflect.TypeOf((**Cluster)(nil)).Elem()
}

func (i *Cluster) ToClusterOutput() ClusterOutput {
	return i.ToClusterOutputWithContext(context.Background())
}

func (i *Cluster) ToClusterOutputWithContext(ctx context.Context) ClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterOutput)
}

// ClusterArrayInput is an input type that accepts ClusterArray and ClusterArrayOutput values.
// You can construct a concrete instance of `ClusterArrayInput` via:
//
//	ClusterArray{ ClusterArgs{...} }
type ClusterArrayInput interface {
	pulumi.Input

	ToClusterArrayOutput() ClusterArrayOutput
	ToClusterArrayOutputWithContext(context.Context) ClusterArrayOutput
}

type ClusterArray []ClusterInput

func (ClusterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Cluster)(nil)).Elem()
}

func (i ClusterArray) ToClusterArrayOutput() ClusterArrayOutput {
	return i.ToClusterArrayOutputWithContext(context.Background())
}

func (i ClusterArray) ToClusterArrayOutputWithContext(ctx context.Context) ClusterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterArrayOutput)
}

// ClusterMapInput is an input type that accepts ClusterMap and ClusterMapOutput values.
// You can construct a concrete instance of `ClusterMapInput` via:
//
//	ClusterMap{ "key": ClusterArgs{...} }
type ClusterMapInput interface {
	pulumi.Input

	ToClusterMapOutput() ClusterMapOutput
	ToClusterMapOutputWithContext(context.Context) ClusterMapOutput
}

type ClusterMap map[string]ClusterInput

func (ClusterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Cluster)(nil)).Elem()
}

func (i ClusterMap) ToClusterMapOutput() ClusterMapOutput {
	return i.ToClusterMapOutputWithContext(context.Background())
}

func (i ClusterMap) ToClusterMapOutputWithContext(ctx context.Context) ClusterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterMapOutput)
}

type ClusterOutput struct{ *pulumi.OutputState }

func (ClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Cluster)(nil)).Elem()
}

func (o ClusterOutput) ToClusterOutput() ClusterOutput {
	return o
}

func (o ClusterOutput) ToClusterOutputWithContext(ctx context.Context) ClusterOutput {
	return o
}

// A color representation of the Cluster. Accepts hex codes, eg #BADA55.
func (o ClusterOutput) Color() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringPtrOutput { return v.Color }).(pulumi.StringPtrOutput)
}

// This is a description for the cluster, this may describe the usage for it, the region, or something else
// which would help identify the Cluster's purpose.
func (o ClusterOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// An emoji to use with the Cluster, this can either be set using :buildkite: notation, or with the
// emoji itself, such as ðŸš€.
func (o ClusterOutput) Emoji() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringPtrOutput { return v.Emoji }).(pulumi.StringPtrOutput)
}

// The name of the Cluster. Can only contain numbers and letters, no spaces or special characters.
func (o ClusterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The UUID of the cluster.
func (o ClusterOutput) Uuid() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.Uuid }).(pulumi.StringOutput)
}

type ClusterArrayOutput struct{ *pulumi.OutputState }

func (ClusterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Cluster)(nil)).Elem()
}

func (o ClusterArrayOutput) ToClusterArrayOutput() ClusterArrayOutput {
	return o
}

func (o ClusterArrayOutput) ToClusterArrayOutputWithContext(ctx context.Context) ClusterArrayOutput {
	return o
}

func (o ClusterArrayOutput) Index(i pulumi.IntInput) ClusterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Cluster {
		return vs[0].([]*Cluster)[vs[1].(int)]
	}).(ClusterOutput)
}

type ClusterMapOutput struct{ *pulumi.OutputState }

func (ClusterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Cluster)(nil)).Elem()
}

func (o ClusterMapOutput) ToClusterMapOutput() ClusterMapOutput {
	return o
}

func (o ClusterMapOutput) ToClusterMapOutputWithContext(ctx context.Context) ClusterMapOutput {
	return o
}

func (o ClusterMapOutput) MapIndex(k pulumi.StringInput) ClusterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Cluster {
		return vs[0].(map[string]*Cluster)[vs[1].(string)]
	}).(ClusterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterInput)(nil)).Elem(), &Cluster{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterArrayInput)(nil)).Elem(), ClusterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterMapInput)(nil)).Elem(), ClusterMap{})
	pulumi.RegisterOutputType(ClusterOutput{})
	pulumi.RegisterOutputType(ClusterArrayOutput{})
	pulumi.RegisterOutputType(ClusterMapOutput{})
}
