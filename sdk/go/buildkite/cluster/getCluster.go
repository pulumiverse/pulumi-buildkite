// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cluster

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-buildkite/sdk/v2/go/buildkite/internal"
)

// Use this data source to retrieve a cluster by name. You can find out more about clusters in the Buildkite [documentation](https://buildkite.com/docs/clusters/overview).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-buildkite/sdk/v2/go/buildkite/Cluster"
//	"github.com/pulumiverse/pulumi-buildkite/sdk/v2/go/buildkite/Pipeline"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_default, err := Cluster.GetCluster(ctx, &cluster.GetClusterArgs{
//				Name: "default",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			// Assign a pipeline to that cluster
//			_, err = Pipeline.NewPipeline(ctx, "terraform-provider-buildkite", &Pipeline.PipelineArgs{
//				Repository: pulumi.String("git@github.com:buildkite/terraform-provider-buildkite.git"),
//				ClusterId:  *pulumi.String(_default.Id),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupCluster(ctx *pulumi.Context, args *LookupClusterArgs, opts ...pulumi.InvokeOption) (*LookupClusterResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupClusterResult
	err := ctx.Invoke("buildkite:Cluster/getCluster:getCluster", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getCluster.
type LookupClusterArgs struct {
	// The name of the cluster to retrieve.
	Name string `pulumi:"name"`
}

// A collection of values returned by getCluster.
type LookupClusterResult struct {
	// The color of the cluster.
	Color string `pulumi:"color"`
	// The description of the cluster.
	Description string `pulumi:"description"`
	// The emoji of the cluster.
	Emoji string `pulumi:"emoji"`
	// The GraphQL ID of the cluster.
	Id string `pulumi:"id"`
	// The name of the cluster to retrieve.
	Name string `pulumi:"name"`
	// The UUID of the cluster
	Uuid string `pulumi:"uuid"`
}

func LookupClusterOutput(ctx *pulumi.Context, args LookupClusterOutputArgs, opts ...pulumi.InvokeOption) LookupClusterResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupClusterResult, error) {
			args := v.(LookupClusterArgs)
			r, err := LookupCluster(ctx, &args, opts...)
			var s LookupClusterResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupClusterResultOutput)
}

// A collection of arguments for invoking getCluster.
type LookupClusterOutputArgs struct {
	// The name of the cluster to retrieve.
	Name pulumi.StringInput `pulumi:"name"`
}

func (LookupClusterOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupClusterArgs)(nil)).Elem()
}

// A collection of values returned by getCluster.
type LookupClusterResultOutput struct{ *pulumi.OutputState }

func (LookupClusterResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupClusterResult)(nil)).Elem()
}

func (o LookupClusterResultOutput) ToLookupClusterResultOutput() LookupClusterResultOutput {
	return o
}

func (o LookupClusterResultOutput) ToLookupClusterResultOutputWithContext(ctx context.Context) LookupClusterResultOutput {
	return o
}

// The color of the cluster.
func (o LookupClusterResultOutput) Color() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClusterResult) string { return v.Color }).(pulumi.StringOutput)
}

// The description of the cluster.
func (o LookupClusterResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClusterResult) string { return v.Description }).(pulumi.StringOutput)
}

// The emoji of the cluster.
func (o LookupClusterResultOutput) Emoji() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClusterResult) string { return v.Emoji }).(pulumi.StringOutput)
}

// The GraphQL ID of the cluster.
func (o LookupClusterResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClusterResult) string { return v.Id }).(pulumi.StringOutput)
}

// The name of the cluster to retrieve.
func (o LookupClusterResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClusterResult) string { return v.Name }).(pulumi.StringOutput)
}

// The UUID of the cluster
func (o LookupClusterResultOutput) Uuid() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClusterResult) string { return v.Uuid }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupClusterResultOutput{})
}
