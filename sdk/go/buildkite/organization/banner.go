// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package organization

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-buildkite/sdk/v2/go/buildkite/internal"
)

// This resource allows you to create and manage banners for specific organizations, displayed to all members at the top of each page in Buildkite's UI.
//
// More information on organization/system banners can be found in the [documentation](https://buildkite.com/docs/team-management/system-banners).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-buildkite/sdk/v2/go/buildkite/Organization"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Organization.NewBanner(ctx, "banner", &Organization.BannerArgs{
//				Message: pulumi.String(":warning: Please be aware of the maintenance window this weekend!"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// import an organization banner resource using the banner's GraphQL ID
//
// #
//
//	you can use this query to find the banner's ID:
//
//	query getOrganizationBannerId {
//
//	organization(slug: "ORGANIZATION_SLUG") {
//
//	banners(first: 1) {
//
//	edges {
//
//	node {
//
//	id
//
//	}
//
//	}
//
//	}
//
//	}
//
//	}
//
// ```sh
// $ pulumi import buildkite:Organization/banner:Banner banner T3JnYW5pemF0aW9uQmFubmVyLS0tNjZlMmE5YzktM2IzMy00OGE5LTk1NjItMzY2YzMwNzYzN2Uz
// ```
type Banner struct {
	pulumi.CustomResourceState

	// The organization banner's message.
	Message pulumi.StringOutput `pulumi:"message"`
	// The UUID of the organization banner.
	Uuid pulumi.StringOutput `pulumi:"uuid"`
}

// NewBanner registers a new resource with the given unique name, arguments, and options.
func NewBanner(ctx *pulumi.Context,
	name string, args *BannerArgs, opts ...pulumi.ResourceOption) (*Banner, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Message == nil {
		return nil, errors.New("invalid value for required argument 'Message'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Banner
	err := ctx.RegisterResource("buildkite:Organization/banner:Banner", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBanner gets an existing Banner resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBanner(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BannerState, opts ...pulumi.ResourceOption) (*Banner, error) {
	var resource Banner
	err := ctx.ReadResource("buildkite:Organization/banner:Banner", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Banner resources.
type bannerState struct {
	// The organization banner's message.
	Message *string `pulumi:"message"`
	// The UUID of the organization banner.
	Uuid *string `pulumi:"uuid"`
}

type BannerState struct {
	// The organization banner's message.
	Message pulumi.StringPtrInput
	// The UUID of the organization banner.
	Uuid pulumi.StringPtrInput
}

func (BannerState) ElementType() reflect.Type {
	return reflect.TypeOf((*bannerState)(nil)).Elem()
}

type bannerArgs struct {
	// The organization banner's message.
	Message string `pulumi:"message"`
}

// The set of arguments for constructing a Banner resource.
type BannerArgs struct {
	// The organization banner's message.
	Message pulumi.StringInput
}

func (BannerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*bannerArgs)(nil)).Elem()
}

type BannerInput interface {
	pulumi.Input

	ToBannerOutput() BannerOutput
	ToBannerOutputWithContext(ctx context.Context) BannerOutput
}

func (*Banner) ElementType() reflect.Type {
	return reflect.TypeOf((**Banner)(nil)).Elem()
}

func (i *Banner) ToBannerOutput() BannerOutput {
	return i.ToBannerOutputWithContext(context.Background())
}

func (i *Banner) ToBannerOutputWithContext(ctx context.Context) BannerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BannerOutput)
}

// BannerArrayInput is an input type that accepts BannerArray and BannerArrayOutput values.
// You can construct a concrete instance of `BannerArrayInput` via:
//
//	BannerArray{ BannerArgs{...} }
type BannerArrayInput interface {
	pulumi.Input

	ToBannerArrayOutput() BannerArrayOutput
	ToBannerArrayOutputWithContext(context.Context) BannerArrayOutput
}

type BannerArray []BannerInput

func (BannerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Banner)(nil)).Elem()
}

func (i BannerArray) ToBannerArrayOutput() BannerArrayOutput {
	return i.ToBannerArrayOutputWithContext(context.Background())
}

func (i BannerArray) ToBannerArrayOutputWithContext(ctx context.Context) BannerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BannerArrayOutput)
}

// BannerMapInput is an input type that accepts BannerMap and BannerMapOutput values.
// You can construct a concrete instance of `BannerMapInput` via:
//
//	BannerMap{ "key": BannerArgs{...} }
type BannerMapInput interface {
	pulumi.Input

	ToBannerMapOutput() BannerMapOutput
	ToBannerMapOutputWithContext(context.Context) BannerMapOutput
}

type BannerMap map[string]BannerInput

func (BannerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Banner)(nil)).Elem()
}

func (i BannerMap) ToBannerMapOutput() BannerMapOutput {
	return i.ToBannerMapOutputWithContext(context.Background())
}

func (i BannerMap) ToBannerMapOutputWithContext(ctx context.Context) BannerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BannerMapOutput)
}

type BannerOutput struct{ *pulumi.OutputState }

func (BannerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Banner)(nil)).Elem()
}

func (o BannerOutput) ToBannerOutput() BannerOutput {
	return o
}

func (o BannerOutput) ToBannerOutputWithContext(ctx context.Context) BannerOutput {
	return o
}

// The organization banner's message.
func (o BannerOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v *Banner) pulumi.StringOutput { return v.Message }).(pulumi.StringOutput)
}

// The UUID of the organization banner.
func (o BannerOutput) Uuid() pulumi.StringOutput {
	return o.ApplyT(func(v *Banner) pulumi.StringOutput { return v.Uuid }).(pulumi.StringOutput)
}

type BannerArrayOutput struct{ *pulumi.OutputState }

func (BannerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Banner)(nil)).Elem()
}

func (o BannerArrayOutput) ToBannerArrayOutput() BannerArrayOutput {
	return o
}

func (o BannerArrayOutput) ToBannerArrayOutputWithContext(ctx context.Context) BannerArrayOutput {
	return o
}

func (o BannerArrayOutput) Index(i pulumi.IntInput) BannerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Banner {
		return vs[0].([]*Banner)[vs[1].(int)]
	}).(BannerOutput)
}

type BannerMapOutput struct{ *pulumi.OutputState }

func (BannerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Banner)(nil)).Elem()
}

func (o BannerMapOutput) ToBannerMapOutput() BannerMapOutput {
	return o
}

func (o BannerMapOutput) ToBannerMapOutputWithContext(ctx context.Context) BannerMapOutput {
	return o
}

func (o BannerMapOutput) MapIndex(k pulumi.StringInput) BannerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Banner {
		return vs[0].(map[string]*Banner)[vs[1].(string)]
	}).(BannerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BannerInput)(nil)).Elem(), &Banner{})
	pulumi.RegisterInputType(reflect.TypeOf((*BannerArrayInput)(nil)).Elem(), BannerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BannerMapInput)(nil)).Elem(), BannerMap{})
	pulumi.RegisterOutputType(BannerOutput{})
	pulumi.RegisterOutputType(BannerArrayOutput{})
	pulumi.RegisterOutputType(BannerMapOutput{})
}
