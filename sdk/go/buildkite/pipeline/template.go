// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package pipeline

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-buildkite/sdk/v2/go/buildkite/internal"
)

// This resource allows for standardized step configurations that can be used within various pipelines of an organization.
//
// More information on pipeline templates can be found in the [documentation](https://buildkite.com/docs/pipelines/templates).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-buildkite/sdk/v2/go/buildkite/Pipeline"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Pipeline.NewTemplate(ctx, "templateRequired", &Pipeline.TemplateArgs{
//				Configuration: pulumi.String("steps:\n  - label: \":pipeline:\"\n    command: \"buildkite-agent pipeline upload .buildkite/pipeline-qa.yml\"\n\n"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = Pipeline.NewTemplate(ctx, "templateFull", &Pipeline.TemplateArgs{
//				Available:     pulumi.Bool(true),
//				Configuration: pulumi.String("steps:\n  - label: \":pipeline:\"\n    command: \"buildkite-agent pipeline upload .buildkite/pipeline-production.yml\"\n\n"),
//				Description:   pulumi.String("Production upload template"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// import a pipeline template resource using the templates GraphQL ID
//
// #
//
//	You can use this query to find the first 50 templates (adjust for less or more):
//
//	query getPipelineTemplateIds {
//
//	organization(slug: "ORGANIZATION_SLUG") {
//
//	pipelineTemplates(first: 50) {
//
//	edges{
//
//	node{
//
//	id
//
//	name
//
//	}
//
//	}
//
//	}
//
//	}
//
//	}
//
// ```sh
// $ pulumi import buildkite:Pipeline/template:Template template UGlwZWxpbmVUZW1wbGF0ZS0tLWU0YWQ3YjdjLTljZDYtNGM0MS1hYWE0LTY2ZmI3ODY0MTMwNw==
// ```
type Template struct {
	pulumi.CustomResourceState

	// If the pipeline template is available for assignment by non admin users.
	Available pulumi.BoolOutput `pulumi:"available"`
	// The YAML step configuration for the pipeline template.
	Configuration pulumi.StringOutput `pulumi:"configuration"`
	// A description for the pipeline template.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The name of the pipeline template.
	Name pulumi.StringOutput `pulumi:"name"`
	// The UUID of the pipeline template.
	Uuid pulumi.StringOutput `pulumi:"uuid"`
}

// NewTemplate registers a new resource with the given unique name, arguments, and options.
func NewTemplate(ctx *pulumi.Context,
	name string, args *TemplateArgs, opts ...pulumi.ResourceOption) (*Template, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Configuration == nil {
		return nil, errors.New("invalid value for required argument 'Configuration'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Template
	err := ctx.RegisterResource("buildkite:Pipeline/template:Template", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTemplate gets an existing Template resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTemplate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TemplateState, opts ...pulumi.ResourceOption) (*Template, error) {
	var resource Template
	err := ctx.ReadResource("buildkite:Pipeline/template:Template", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Template resources.
type templateState struct {
	// If the pipeline template is available for assignment by non admin users.
	Available *bool `pulumi:"available"`
	// The YAML step configuration for the pipeline template.
	Configuration *string `pulumi:"configuration"`
	// A description for the pipeline template.
	Description *string `pulumi:"description"`
	// The name of the pipeline template.
	Name *string `pulumi:"name"`
	// The UUID of the pipeline template.
	Uuid *string `pulumi:"uuid"`
}

type TemplateState struct {
	// If the pipeline template is available for assignment by non admin users.
	Available pulumi.BoolPtrInput
	// The YAML step configuration for the pipeline template.
	Configuration pulumi.StringPtrInput
	// A description for the pipeline template.
	Description pulumi.StringPtrInput
	// The name of the pipeline template.
	Name pulumi.StringPtrInput
	// The UUID of the pipeline template.
	Uuid pulumi.StringPtrInput
}

func (TemplateState) ElementType() reflect.Type {
	return reflect.TypeOf((*templateState)(nil)).Elem()
}

type templateArgs struct {
	// If the pipeline template is available for assignment by non admin users.
	Available *bool `pulumi:"available"`
	// The YAML step configuration for the pipeline template.
	Configuration string `pulumi:"configuration"`
	// A description for the pipeline template.
	Description *string `pulumi:"description"`
	// The name of the pipeline template.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a Template resource.
type TemplateArgs struct {
	// If the pipeline template is available for assignment by non admin users.
	Available pulumi.BoolPtrInput
	// The YAML step configuration for the pipeline template.
	Configuration pulumi.StringInput
	// A description for the pipeline template.
	Description pulumi.StringPtrInput
	// The name of the pipeline template.
	Name pulumi.StringPtrInput
}

func (TemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*templateArgs)(nil)).Elem()
}

type TemplateInput interface {
	pulumi.Input

	ToTemplateOutput() TemplateOutput
	ToTemplateOutputWithContext(ctx context.Context) TemplateOutput
}

func (*Template) ElementType() reflect.Type {
	return reflect.TypeOf((**Template)(nil)).Elem()
}

func (i *Template) ToTemplateOutput() TemplateOutput {
	return i.ToTemplateOutputWithContext(context.Background())
}

func (i *Template) ToTemplateOutputWithContext(ctx context.Context) TemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateOutput)
}

// TemplateArrayInput is an input type that accepts TemplateArray and TemplateArrayOutput values.
// You can construct a concrete instance of `TemplateArrayInput` via:
//
//	TemplateArray{ TemplateArgs{...} }
type TemplateArrayInput interface {
	pulumi.Input

	ToTemplateArrayOutput() TemplateArrayOutput
	ToTemplateArrayOutputWithContext(context.Context) TemplateArrayOutput
}

type TemplateArray []TemplateInput

func (TemplateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Template)(nil)).Elem()
}

func (i TemplateArray) ToTemplateArrayOutput() TemplateArrayOutput {
	return i.ToTemplateArrayOutputWithContext(context.Background())
}

func (i TemplateArray) ToTemplateArrayOutputWithContext(ctx context.Context) TemplateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateArrayOutput)
}

// TemplateMapInput is an input type that accepts TemplateMap and TemplateMapOutput values.
// You can construct a concrete instance of `TemplateMapInput` via:
//
//	TemplateMap{ "key": TemplateArgs{...} }
type TemplateMapInput interface {
	pulumi.Input

	ToTemplateMapOutput() TemplateMapOutput
	ToTemplateMapOutputWithContext(context.Context) TemplateMapOutput
}

type TemplateMap map[string]TemplateInput

func (TemplateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Template)(nil)).Elem()
}

func (i TemplateMap) ToTemplateMapOutput() TemplateMapOutput {
	return i.ToTemplateMapOutputWithContext(context.Background())
}

func (i TemplateMap) ToTemplateMapOutputWithContext(ctx context.Context) TemplateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateMapOutput)
}

type TemplateOutput struct{ *pulumi.OutputState }

func (TemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Template)(nil)).Elem()
}

func (o TemplateOutput) ToTemplateOutput() TemplateOutput {
	return o
}

func (o TemplateOutput) ToTemplateOutputWithContext(ctx context.Context) TemplateOutput {
	return o
}

// If the pipeline template is available for assignment by non admin users.
func (o TemplateOutput) Available() pulumi.BoolOutput {
	return o.ApplyT(func(v *Template) pulumi.BoolOutput { return v.Available }).(pulumi.BoolOutput)
}

// The YAML step configuration for the pipeline template.
func (o TemplateOutput) Configuration() pulumi.StringOutput {
	return o.ApplyT(func(v *Template) pulumi.StringOutput { return v.Configuration }).(pulumi.StringOutput)
}

// A description for the pipeline template.
func (o TemplateOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Template) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The name of the pipeline template.
func (o TemplateOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Template) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The UUID of the pipeline template.
func (o TemplateOutput) Uuid() pulumi.StringOutput {
	return o.ApplyT(func(v *Template) pulumi.StringOutput { return v.Uuid }).(pulumi.StringOutput)
}

type TemplateArrayOutput struct{ *pulumi.OutputState }

func (TemplateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Template)(nil)).Elem()
}

func (o TemplateArrayOutput) ToTemplateArrayOutput() TemplateArrayOutput {
	return o
}

func (o TemplateArrayOutput) ToTemplateArrayOutputWithContext(ctx context.Context) TemplateArrayOutput {
	return o
}

func (o TemplateArrayOutput) Index(i pulumi.IntInput) TemplateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Template {
		return vs[0].([]*Template)[vs[1].(int)]
	}).(TemplateOutput)
}

type TemplateMapOutput struct{ *pulumi.OutputState }

func (TemplateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Template)(nil)).Elem()
}

func (o TemplateMapOutput) ToTemplateMapOutput() TemplateMapOutput {
	return o
}

func (o TemplateMapOutput) ToTemplateMapOutputWithContext(ctx context.Context) TemplateMapOutput {
	return o
}

func (o TemplateMapOutput) MapIndex(k pulumi.StringInput) TemplateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Template {
		return vs[0].(map[string]*Template)[vs[1].(string)]
	}).(TemplateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateInput)(nil)).Elem(), &Template{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateArrayInput)(nil)).Elem(), TemplateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateMapInput)(nil)).Elem(), TemplateMap{})
	pulumi.RegisterOutputType(TemplateOutput{})
	pulumi.RegisterOutputType(TemplateArrayOutput{})
	pulumi.RegisterOutputType(TemplateMapOutput{})
}
