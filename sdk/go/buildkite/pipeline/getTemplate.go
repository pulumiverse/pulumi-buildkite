// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package pipeline

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-buildkite/sdk/v2/go/buildkite/internal"
)

// Use this data source to retrieve a pipeline template by its ID or name.
//
// More information on pipeline templates can be found in the [documentation](https://buildkite.com/docs/pipelines/templates).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-buildkite/sdk/v2/go/buildkite/Pipeline"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			repository := "git@github.com:my-org/my-repo.git"
//			devTemplate, err := Pipeline.GetTemplate(ctx, &pipeline.GetTemplateArgs{
//				Id: pulumi.StringRef(buildkite_pipeline_template.Template_dev.Id),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			frontendTemplate, err := Pipeline.GetTemplate(ctx, &pipeline.GetTemplateArgs{
//				Name: pulumi.StringRef("Frontend app template"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = Pipeline.NewPipeline(ctx, "apiv2Dev", &Pipeline.PipelineArgs{
//				Repository:         pulumi.String(repository),
//				PipelineTemplateId: *pulumi.String(devTemplate.Id),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = Pipeline.NewPipeline(ctx, "frontend", &Pipeline.PipelineArgs{
//				Repository:         pulumi.String(repository),
//				PipelineTemplateId: *pulumi.String(frontendTemplate.Id),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupTemplate(ctx *pulumi.Context, args *LookupTemplateArgs, opts ...pulumi.InvokeOption) (*LookupTemplateResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupTemplateResult
	err := ctx.Invoke("buildkite:Pipeline/getTemplate:getTemplate", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getTemplate.
type LookupTemplateArgs struct {
	// The GraphQL ID of the pipeline template.
	Id *string `pulumi:"id"`
	// The name of the pipeline template.
	Name *string `pulumi:"name"`
}

// A collection of values returned by getTemplate.
type LookupTemplateResult struct {
	// If the pipeline template is available for assignment by non admin users.
	Available bool `pulumi:"available"`
	// The YAML step configuration for the pipeline template.
	Configuration string `pulumi:"configuration"`
	// The description for the pipeline template.
	Description string `pulumi:"description"`
	// The GraphQL ID of the pipeline template.
	Id string `pulumi:"id"`
	// The name of the pipeline template.
	Name string `pulumi:"name"`
	// The UUID of the pipeline template.
	Uuid string `pulumi:"uuid"`
}

func LookupTemplateOutput(ctx *pulumi.Context, args LookupTemplateOutputArgs, opts ...pulumi.InvokeOption) LookupTemplateResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupTemplateResult, error) {
			args := v.(LookupTemplateArgs)
			r, err := LookupTemplate(ctx, &args, opts...)
			var s LookupTemplateResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupTemplateResultOutput)
}

// A collection of arguments for invoking getTemplate.
type LookupTemplateOutputArgs struct {
	// The GraphQL ID of the pipeline template.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The name of the pipeline template.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (LookupTemplateOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTemplateArgs)(nil)).Elem()
}

// A collection of values returned by getTemplate.
type LookupTemplateResultOutput struct{ *pulumi.OutputState }

func (LookupTemplateResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTemplateResult)(nil)).Elem()
}

func (o LookupTemplateResultOutput) ToLookupTemplateResultOutput() LookupTemplateResultOutput {
	return o
}

func (o LookupTemplateResultOutput) ToLookupTemplateResultOutputWithContext(ctx context.Context) LookupTemplateResultOutput {
	return o
}

// If the pipeline template is available for assignment by non admin users.
func (o LookupTemplateResultOutput) Available() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupTemplateResult) bool { return v.Available }).(pulumi.BoolOutput)
}

// The YAML step configuration for the pipeline template.
func (o LookupTemplateResultOutput) Configuration() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTemplateResult) string { return v.Configuration }).(pulumi.StringOutput)
}

// The description for the pipeline template.
func (o LookupTemplateResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTemplateResult) string { return v.Description }).(pulumi.StringOutput)
}

// The GraphQL ID of the pipeline template.
func (o LookupTemplateResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTemplateResult) string { return v.Id }).(pulumi.StringOutput)
}

// The name of the pipeline template.
func (o LookupTemplateResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTemplateResult) string { return v.Name }).(pulumi.StringOutput)
}

// The UUID of the pipeline template.
func (o LookupTemplateResultOutput) Uuid() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTemplateResult) string { return v.Uuid }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupTemplateResultOutput{})
}
