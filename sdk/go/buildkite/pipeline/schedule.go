// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package pipeline

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-buildkite/sdk/v2/go/buildkite/internal"
)

// ## # Resource: pipelineSchedule
//
// This resource allows you to create and manage pipeline schedules.
//
// Buildkite Documentation: https://buildkite.com/docs/pipelines/scheduled-builds
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-buildkite/sdk/v2/go/buildkite/Pipeline"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Pipeline.NewSchedule(ctx, "repo2Nightly", &Pipeline.ScheduleArgs{
//				PipelineId: pulumi.Any(buildkite_pipeline.Repo2.Id),
//				Label:      pulumi.String("Nightly build"),
//				Cronline:   pulumi.String("@midnight"),
//				Branch:     pulumi.Any(buildkite_pipeline.Repo2.Default_branch),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Pipeline schedules can be imported using their `GraphQL ID`, e.g.
//
// ```sh
//
//	$ pulumi import buildkite:Pipeline/schedule:Schedule test UGlwZWxpgm5Tf2hhZHVsZ35tLWRk4DdmN7c4LTA5M2ItNDM9YS0gMWE0LTAwZDUgYTAxYvRf49==
//
// ```
//
//	Your pipeline schedules' GraphQL ID can be found with the below GraphQL query below. Alternatively, you could use this [pre-saved query](https://buildkite.com/user/graphql/console/45687b7c-2565-4acb-8a74-750a3647875f), specifying the organisation slug (when known) and the pipeline search term (PIPELINE_SEARCH_TERM). graphql query getPipelineScheduleId {
//
//	organization(slug"ORGANIZATION_SLUG") { 		pipelines(first5, search"PIPELINE_SEARCH_TERM") {
//
//	edges{
//
//	node{
//
//	name
//
//	schedules{
//
//	edges{
//
// node{
//
//	id
//
//	}
//
//	}
//
//	}
//
//	}
//
//	}
//
//	}
//
//	} }
type Schedule struct {
	pulumi.CustomResourceState

	// The branch to use for the build.
	Branch pulumi.StringOutput `pulumi:"branch"`
	// The commit ref to use for the build.
	Commit pulumi.StringOutput `pulumi:"commit"`
	// Schedule interval (see [docs](https://buildkite.com/docs/pipelines/scheduled-builds#schedule-intervals)).
	Cronline pulumi.StringOutput `pulumi:"cronline"`
	// Whether the schedule should run.
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// A map of environment variables to use for the build.
	Env pulumi.StringMapOutput `pulumi:"env"`
	// Schedule label.
	Label pulumi.StringOutput `pulumi:"label"`
	// The message to use for the build.
	Message pulumi.StringPtrOutput `pulumi:"message"`
	// The ID of the pipeline that this schedule belongs to.
	PipelineId pulumi.StringOutput `pulumi:"pipelineId"`
	// The UUID of the pipeline schedule
	Uuid pulumi.StringOutput `pulumi:"uuid"`
}

// NewSchedule registers a new resource with the given unique name, arguments, and options.
func NewSchedule(ctx *pulumi.Context,
	name string, args *ScheduleArgs, opts ...pulumi.ResourceOption) (*Schedule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Branch == nil {
		return nil, errors.New("invalid value for required argument 'Branch'")
	}
	if args.Cronline == nil {
		return nil, errors.New("invalid value for required argument 'Cronline'")
	}
	if args.Label == nil {
		return nil, errors.New("invalid value for required argument 'Label'")
	}
	if args.PipelineId == nil {
		return nil, errors.New("invalid value for required argument 'PipelineId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Schedule
	err := ctx.RegisterResource("buildkite:Pipeline/schedule:Schedule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSchedule gets an existing Schedule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSchedule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ScheduleState, opts ...pulumi.ResourceOption) (*Schedule, error) {
	var resource Schedule
	err := ctx.ReadResource("buildkite:Pipeline/schedule:Schedule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Schedule resources.
type scheduleState struct {
	// The branch to use for the build.
	Branch *string `pulumi:"branch"`
	// The commit ref to use for the build.
	Commit *string `pulumi:"commit"`
	// Schedule interval (see [docs](https://buildkite.com/docs/pipelines/scheduled-builds#schedule-intervals)).
	Cronline *string `pulumi:"cronline"`
	// Whether the schedule should run.
	Enabled *bool `pulumi:"enabled"`
	// A map of environment variables to use for the build.
	Env map[string]string `pulumi:"env"`
	// Schedule label.
	Label *string `pulumi:"label"`
	// The message to use for the build.
	Message *string `pulumi:"message"`
	// The ID of the pipeline that this schedule belongs to.
	PipelineId *string `pulumi:"pipelineId"`
	// The UUID of the pipeline schedule
	Uuid *string `pulumi:"uuid"`
}

type ScheduleState struct {
	// The branch to use for the build.
	Branch pulumi.StringPtrInput
	// The commit ref to use for the build.
	Commit pulumi.StringPtrInput
	// Schedule interval (see [docs](https://buildkite.com/docs/pipelines/scheduled-builds#schedule-intervals)).
	Cronline pulumi.StringPtrInput
	// Whether the schedule should run.
	Enabled pulumi.BoolPtrInput
	// A map of environment variables to use for the build.
	Env pulumi.StringMapInput
	// Schedule label.
	Label pulumi.StringPtrInput
	// The message to use for the build.
	Message pulumi.StringPtrInput
	// The ID of the pipeline that this schedule belongs to.
	PipelineId pulumi.StringPtrInput
	// The UUID of the pipeline schedule
	Uuid pulumi.StringPtrInput
}

func (ScheduleState) ElementType() reflect.Type {
	return reflect.TypeOf((*scheduleState)(nil)).Elem()
}

type scheduleArgs struct {
	// The branch to use for the build.
	Branch string `pulumi:"branch"`
	// The commit ref to use for the build.
	Commit *string `pulumi:"commit"`
	// Schedule interval (see [docs](https://buildkite.com/docs/pipelines/scheduled-builds#schedule-intervals)).
	Cronline string `pulumi:"cronline"`
	// Whether the schedule should run.
	Enabled *bool `pulumi:"enabled"`
	// A map of environment variables to use for the build.
	Env map[string]string `pulumi:"env"`
	// Schedule label.
	Label string `pulumi:"label"`
	// The message to use for the build.
	Message *string `pulumi:"message"`
	// The ID of the pipeline that this schedule belongs to.
	PipelineId string `pulumi:"pipelineId"`
}

// The set of arguments for constructing a Schedule resource.
type ScheduleArgs struct {
	// The branch to use for the build.
	Branch pulumi.StringInput
	// The commit ref to use for the build.
	Commit pulumi.StringPtrInput
	// Schedule interval (see [docs](https://buildkite.com/docs/pipelines/scheduled-builds#schedule-intervals)).
	Cronline pulumi.StringInput
	// Whether the schedule should run.
	Enabled pulumi.BoolPtrInput
	// A map of environment variables to use for the build.
	Env pulumi.StringMapInput
	// Schedule label.
	Label pulumi.StringInput
	// The message to use for the build.
	Message pulumi.StringPtrInput
	// The ID of the pipeline that this schedule belongs to.
	PipelineId pulumi.StringInput
}

func (ScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*scheduleArgs)(nil)).Elem()
}

type ScheduleInput interface {
	pulumi.Input

	ToScheduleOutput() ScheduleOutput
	ToScheduleOutputWithContext(ctx context.Context) ScheduleOutput
}

func (*Schedule) ElementType() reflect.Type {
	return reflect.TypeOf((**Schedule)(nil)).Elem()
}

func (i *Schedule) ToScheduleOutput() ScheduleOutput {
	return i.ToScheduleOutputWithContext(context.Background())
}

func (i *Schedule) ToScheduleOutputWithContext(ctx context.Context) ScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleOutput)
}

// ScheduleArrayInput is an input type that accepts ScheduleArray and ScheduleArrayOutput values.
// You can construct a concrete instance of `ScheduleArrayInput` via:
//
//	ScheduleArray{ ScheduleArgs{...} }
type ScheduleArrayInput interface {
	pulumi.Input

	ToScheduleArrayOutput() ScheduleArrayOutput
	ToScheduleArrayOutputWithContext(context.Context) ScheduleArrayOutput
}

type ScheduleArray []ScheduleInput

func (ScheduleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Schedule)(nil)).Elem()
}

func (i ScheduleArray) ToScheduleArrayOutput() ScheduleArrayOutput {
	return i.ToScheduleArrayOutputWithContext(context.Background())
}

func (i ScheduleArray) ToScheduleArrayOutputWithContext(ctx context.Context) ScheduleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleArrayOutput)
}

// ScheduleMapInput is an input type that accepts ScheduleMap and ScheduleMapOutput values.
// You can construct a concrete instance of `ScheduleMapInput` via:
//
//	ScheduleMap{ "key": ScheduleArgs{...} }
type ScheduleMapInput interface {
	pulumi.Input

	ToScheduleMapOutput() ScheduleMapOutput
	ToScheduleMapOutputWithContext(context.Context) ScheduleMapOutput
}

type ScheduleMap map[string]ScheduleInput

func (ScheduleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Schedule)(nil)).Elem()
}

func (i ScheduleMap) ToScheduleMapOutput() ScheduleMapOutput {
	return i.ToScheduleMapOutputWithContext(context.Background())
}

func (i ScheduleMap) ToScheduleMapOutputWithContext(ctx context.Context) ScheduleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleMapOutput)
}

type ScheduleOutput struct{ *pulumi.OutputState }

func (ScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Schedule)(nil)).Elem()
}

func (o ScheduleOutput) ToScheduleOutput() ScheduleOutput {
	return o
}

func (o ScheduleOutput) ToScheduleOutputWithContext(ctx context.Context) ScheduleOutput {
	return o
}

// The branch to use for the build.
func (o ScheduleOutput) Branch() pulumi.StringOutput {
	return o.ApplyT(func(v *Schedule) pulumi.StringOutput { return v.Branch }).(pulumi.StringOutput)
}

// The commit ref to use for the build.
func (o ScheduleOutput) Commit() pulumi.StringOutput {
	return o.ApplyT(func(v *Schedule) pulumi.StringOutput { return v.Commit }).(pulumi.StringOutput)
}

// Schedule interval (see [docs](https://buildkite.com/docs/pipelines/scheduled-builds#schedule-intervals)).
func (o ScheduleOutput) Cronline() pulumi.StringOutput {
	return o.ApplyT(func(v *Schedule) pulumi.StringOutput { return v.Cronline }).(pulumi.StringOutput)
}

// Whether the schedule should run.
func (o ScheduleOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *Schedule) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// A map of environment variables to use for the build.
func (o ScheduleOutput) Env() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Schedule) pulumi.StringMapOutput { return v.Env }).(pulumi.StringMapOutput)
}

// Schedule label.
func (o ScheduleOutput) Label() pulumi.StringOutput {
	return o.ApplyT(func(v *Schedule) pulumi.StringOutput { return v.Label }).(pulumi.StringOutput)
}

// The message to use for the build.
func (o ScheduleOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Schedule) pulumi.StringPtrOutput { return v.Message }).(pulumi.StringPtrOutput)
}

// The ID of the pipeline that this schedule belongs to.
func (o ScheduleOutput) PipelineId() pulumi.StringOutput {
	return o.ApplyT(func(v *Schedule) pulumi.StringOutput { return v.PipelineId }).(pulumi.StringOutput)
}

// The UUID of the pipeline schedule
func (o ScheduleOutput) Uuid() pulumi.StringOutput {
	return o.ApplyT(func(v *Schedule) pulumi.StringOutput { return v.Uuid }).(pulumi.StringOutput)
}

type ScheduleArrayOutput struct{ *pulumi.OutputState }

func (ScheduleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Schedule)(nil)).Elem()
}

func (o ScheduleArrayOutput) ToScheduleArrayOutput() ScheduleArrayOutput {
	return o
}

func (o ScheduleArrayOutput) ToScheduleArrayOutputWithContext(ctx context.Context) ScheduleArrayOutput {
	return o
}

func (o ScheduleArrayOutput) Index(i pulumi.IntInput) ScheduleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Schedule {
		return vs[0].([]*Schedule)[vs[1].(int)]
	}).(ScheduleOutput)
}

type ScheduleMapOutput struct{ *pulumi.OutputState }

func (ScheduleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Schedule)(nil)).Elem()
}

func (o ScheduleMapOutput) ToScheduleMapOutput() ScheduleMapOutput {
	return o
}

func (o ScheduleMapOutput) ToScheduleMapOutputWithContext(ctx context.Context) ScheduleMapOutput {
	return o
}

func (o ScheduleMapOutput) MapIndex(k pulumi.StringInput) ScheduleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Schedule {
		return vs[0].(map[string]*Schedule)[vs[1].(string)]
	}).(ScheduleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ScheduleInput)(nil)).Elem(), &Schedule{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScheduleArrayInput)(nil)).Elem(), ScheduleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScheduleMapInput)(nil)).Elem(), ScheduleMap{})
	pulumi.RegisterOutputType(ScheduleOutput{})
	pulumi.RegisterOutputType(ScheduleArrayOutput{})
	pulumi.RegisterOutputType(ScheduleMapOutput{})
}
