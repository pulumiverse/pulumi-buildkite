// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package pipeline

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-buildkite/sdk/v2/go/buildkite/internal"
)

// Use this data source to sign pipeline steps with a JWKS key. You will need to have
// the corresponding verification key present on the agents that run this the steps in
// this pipeline. You can then use these steps in a `Pipeline.Pipeline` resource.
//
// See [RFC 7517](https://datatracker.ietf.org/doc/html/rfc7517) for more information
// about the JWKS format.
//
// See the Buildkite [documentation](https://buildkite.com/docs/agent/v3/signed_pipelines)
// for more info about signed pipelines.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-buildkite/sdk/v2/go/buildkite/Pipeline"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			repository := "git@github.com:my-org/my-repo.git"
//			my_steps, err := Pipeline.GetSignedSteps(ctx, &pipeline.GetSignedStepsArgs{
//				Repository:    repository,
//				JwksFile:      pulumi.StringRef("/path/to/my/jwks.json"),
//				JwksKeyId:     pulumi.StringRef("my-key"),
//				UnsignedSteps: "steps:\n- label: \":pipeline:\"\n  command: buildkite-agent pipeline upload\n",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = Pipeline.NewPipeline(ctx, "my-pipeline", &Pipeline.PipelineArgs{
//				Repository: pulumi.String(repository),
//				Steps:      *pulumi.String(my_steps.Steps),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetSignedSteps(ctx *pulumi.Context, args *GetSignedStepsArgs, opts ...pulumi.InvokeOption) (*GetSignedStepsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetSignedStepsResult
	err := ctx.Invoke("buildkite:Pipeline/getSignedSteps:getSignedSteps", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSignedSteps.
type GetSignedStepsArgs struct {
	// The JSON Web Key Set (JWKS) to use for signing.
	// If `jwksKeyId` is not specified, and the set contains exactly one key, that key will
	// be used.
	Jwks      *string `pulumi:"jwks"`
	JwksFile  *string `pulumi:"jwksFile"`
	JwksKeyId *string `pulumi:"jwksKeyId"`
	// The repository that will be checked out in a build of the pipeline.
	Repository string `pulumi:"repository"`
	// The steps to sign in YAML format.
	UnsignedSteps string `pulumi:"unsignedSteps"`
}

// A collection of values returned by getSignedSteps.
type GetSignedStepsResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The JSON Web Key Set (JWKS) to use for signing.
	// If `jwksKeyId` is not specified, and the set contains exactly one key, that key will
	// be used.
	Jwks      *string `pulumi:"jwks"`
	JwksFile  *string `pulumi:"jwksFile"`
	JwksKeyId *string `pulumi:"jwksKeyId"`
	// The repository that will be checked out in a build of the pipeline.
	Repository string `pulumi:"repository"`
	Steps      string `pulumi:"steps"`
	// The steps to sign in YAML format.
	UnsignedSteps string `pulumi:"unsignedSteps"`
}

func GetSignedStepsOutput(ctx *pulumi.Context, args GetSignedStepsOutputArgs, opts ...pulumi.InvokeOption) GetSignedStepsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetSignedStepsResult, error) {
			args := v.(GetSignedStepsArgs)
			r, err := GetSignedSteps(ctx, &args, opts...)
			var s GetSignedStepsResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetSignedStepsResultOutput)
}

// A collection of arguments for invoking getSignedSteps.
type GetSignedStepsOutputArgs struct {
	// The JSON Web Key Set (JWKS) to use for signing.
	// If `jwksKeyId` is not specified, and the set contains exactly one key, that key will
	// be used.
	Jwks      pulumi.StringPtrInput `pulumi:"jwks"`
	JwksFile  pulumi.StringPtrInput `pulumi:"jwksFile"`
	JwksKeyId pulumi.StringPtrInput `pulumi:"jwksKeyId"`
	// The repository that will be checked out in a build of the pipeline.
	Repository pulumi.StringInput `pulumi:"repository"`
	// The steps to sign in YAML format.
	UnsignedSteps pulumi.StringInput `pulumi:"unsignedSteps"`
}

func (GetSignedStepsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSignedStepsArgs)(nil)).Elem()
}

// A collection of values returned by getSignedSteps.
type GetSignedStepsResultOutput struct{ *pulumi.OutputState }

func (GetSignedStepsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSignedStepsResult)(nil)).Elem()
}

func (o GetSignedStepsResultOutput) ToGetSignedStepsResultOutput() GetSignedStepsResultOutput {
	return o
}

func (o GetSignedStepsResultOutput) ToGetSignedStepsResultOutputWithContext(ctx context.Context) GetSignedStepsResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o GetSignedStepsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetSignedStepsResult) string { return v.Id }).(pulumi.StringOutput)
}

// The JSON Web Key Set (JWKS) to use for signing.
// If `jwksKeyId` is not specified, and the set contains exactly one key, that key will
// be used.
func (o GetSignedStepsResultOutput) Jwks() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSignedStepsResult) *string { return v.Jwks }).(pulumi.StringPtrOutput)
}

func (o GetSignedStepsResultOutput) JwksFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSignedStepsResult) *string { return v.JwksFile }).(pulumi.StringPtrOutput)
}

func (o GetSignedStepsResultOutput) JwksKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSignedStepsResult) *string { return v.JwksKeyId }).(pulumi.StringPtrOutput)
}

// The repository that will be checked out in a build of the pipeline.
func (o GetSignedStepsResultOutput) Repository() pulumi.StringOutput {
	return o.ApplyT(func(v GetSignedStepsResult) string { return v.Repository }).(pulumi.StringOutput)
}

func (o GetSignedStepsResultOutput) Steps() pulumi.StringOutput {
	return o.ApplyT(func(v GetSignedStepsResult) string { return v.Steps }).(pulumi.StringOutput)
}

// The steps to sign in YAML format.
func (o GetSignedStepsResultOutput) UnsignedSteps() pulumi.StringOutput {
	return o.ApplyT(func(v GetSignedStepsResult) string { return v.UnsignedSteps }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetSignedStepsResultOutput{})
}
