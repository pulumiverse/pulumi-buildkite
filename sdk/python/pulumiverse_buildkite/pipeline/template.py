# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['TemplateArgs', 'Template']

@pulumi.input_type
class TemplateArgs:
    def __init__(__self__, *,
                 configuration: pulumi.Input[str],
                 available: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Template resource.
        :param pulumi.Input[str] configuration: The YAML step configuration for the pipeline template.
        :param pulumi.Input[bool] available: If the pipeline template is available for assignment by non admin users.
        :param pulumi.Input[str] description: A description for the pipeline template.
        :param pulumi.Input[str] name: The name of the pipeline template.
        """
        pulumi.set(__self__, "configuration", configuration)
        if available is not None:
            pulumi.set(__self__, "available", available)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def configuration(self) -> pulumi.Input[str]:
        """
        The YAML step configuration for the pipeline template.
        """
        return pulumi.get(self, "configuration")

    @configuration.setter
    def configuration(self, value: pulumi.Input[str]):
        pulumi.set(self, "configuration", value)

    @property
    @pulumi.getter
    def available(self) -> Optional[pulumi.Input[bool]]:
        """
        If the pipeline template is available for assignment by non admin users.
        """
        return pulumi.get(self, "available")

    @available.setter
    def available(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "available", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        A description for the pipeline template.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the pipeline template.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _TemplateState:
    def __init__(__self__, *,
                 available: Optional[pulumi.Input[bool]] = None,
                 configuration: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 uuid: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Template resources.
        :param pulumi.Input[bool] available: If the pipeline template is available for assignment by non admin users.
        :param pulumi.Input[str] configuration: The YAML step configuration for the pipeline template.
        :param pulumi.Input[str] description: A description for the pipeline template.
        :param pulumi.Input[str] name: The name of the pipeline template.
        :param pulumi.Input[str] uuid: The UUID of the pipeline template.
        """
        if available is not None:
            pulumi.set(__self__, "available", available)
        if configuration is not None:
            pulumi.set(__self__, "configuration", configuration)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def available(self) -> Optional[pulumi.Input[bool]]:
        """
        If the pipeline template is available for assignment by non admin users.
        """
        return pulumi.get(self, "available")

    @available.setter
    def available(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "available", value)

    @property
    @pulumi.getter
    def configuration(self) -> Optional[pulumi.Input[str]]:
        """
        The YAML step configuration for the pipeline template.
        """
        return pulumi.get(self, "configuration")

    @configuration.setter
    def configuration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "configuration", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        A description for the pipeline template.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the pipeline template.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[pulumi.Input[str]]:
        """
        The UUID of the pipeline template.
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uuid", value)


class Template(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 available: Optional[pulumi.Input[bool]] = None,
                 configuration: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        This resource allows for standardized step configurations that can be used within various pipelines of an organization.

        More information on pipeline templates can be found in the [documentation](https://buildkite.com/docs/pipelines/templates).

        ## Example Usage

        ```python
        import pulumi
        import pulumiverse_buildkite as buildkite

        template_required = buildkite.pipeline.Template("templateRequired", configuration=\"\"\"steps:
          - label: ":pipeline:"
            command: "buildkite-agent pipeline upload .buildkite/pipeline-qa.yml"

        \"\"\")
        template_full = buildkite.pipeline.Template("templateFull",
            available=True,
            configuration=\"\"\"steps:
          - label: ":pipeline:"
            command: "buildkite-agent pipeline upload .buildkite/pipeline-production.yml"

        \"\"\",
            description="Production upload template")
        ```

        ## Import

        import a pipeline template resource using the templates GraphQL ID

        # 

         You can use this query to find the first 50 templates (adjust for less or more):

         query getPipelineTemplateIds {

         organization(slug: "ORGANIZATION_SLUG") {

         pipelineTemplates(first: 50) {

         edges{

         node{

         id

         name

         }

         }

         }

         }

         }

        ```sh
        $ pulumi import buildkite:Pipeline/template:Template template UGlwZWxpbmVUZW1wbGF0ZS0tLWU0YWQ3YjdjLTljZDYtNGM0MS1hYWE0LTY2ZmI3ODY0MTMwNw==
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] available: If the pipeline template is available for assignment by non admin users.
        :param pulumi.Input[str] configuration: The YAML step configuration for the pipeline template.
        :param pulumi.Input[str] description: A description for the pipeline template.
        :param pulumi.Input[str] name: The name of the pipeline template.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: TemplateArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        This resource allows for standardized step configurations that can be used within various pipelines of an organization.

        More information on pipeline templates can be found in the [documentation](https://buildkite.com/docs/pipelines/templates).

        ## Example Usage

        ```python
        import pulumi
        import pulumiverse_buildkite as buildkite

        template_required = buildkite.pipeline.Template("templateRequired", configuration=\"\"\"steps:
          - label: ":pipeline:"
            command: "buildkite-agent pipeline upload .buildkite/pipeline-qa.yml"

        \"\"\")
        template_full = buildkite.pipeline.Template("templateFull",
            available=True,
            configuration=\"\"\"steps:
          - label: ":pipeline:"
            command: "buildkite-agent pipeline upload .buildkite/pipeline-production.yml"

        \"\"\",
            description="Production upload template")
        ```

        ## Import

        import a pipeline template resource using the templates GraphQL ID

        # 

         You can use this query to find the first 50 templates (adjust for less or more):

         query getPipelineTemplateIds {

         organization(slug: "ORGANIZATION_SLUG") {

         pipelineTemplates(first: 50) {

         edges{

         node{

         id

         name

         }

         }

         }

         }

         }

        ```sh
        $ pulumi import buildkite:Pipeline/template:Template template UGlwZWxpbmVUZW1wbGF0ZS0tLWU0YWQ3YjdjLTljZDYtNGM0MS1hYWE0LTY2ZmI3ODY0MTMwNw==
        ```

        :param str resource_name: The name of the resource.
        :param TemplateArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(TemplateArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 available: Optional[pulumi.Input[bool]] = None,
                 configuration: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = TemplateArgs.__new__(TemplateArgs)

            __props__.__dict__["available"] = available
            if configuration is None and not opts.urn:
                raise TypeError("Missing required property 'configuration'")
            __props__.__dict__["configuration"] = configuration
            __props__.__dict__["description"] = description
            __props__.__dict__["name"] = name
            __props__.__dict__["uuid"] = None
        super(Template, __self__).__init__(
            'buildkite:Pipeline/template:Template',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            available: Optional[pulumi.Input[bool]] = None,
            configuration: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            uuid: Optional[pulumi.Input[str]] = None) -> 'Template':
        """
        Get an existing Template resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] available: If the pipeline template is available for assignment by non admin users.
        :param pulumi.Input[str] configuration: The YAML step configuration for the pipeline template.
        :param pulumi.Input[str] description: A description for the pipeline template.
        :param pulumi.Input[str] name: The name of the pipeline template.
        :param pulumi.Input[str] uuid: The UUID of the pipeline template.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _TemplateState.__new__(_TemplateState)

        __props__.__dict__["available"] = available
        __props__.__dict__["configuration"] = configuration
        __props__.__dict__["description"] = description
        __props__.__dict__["name"] = name
        __props__.__dict__["uuid"] = uuid
        return Template(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def available(self) -> pulumi.Output[bool]:
        """
        If the pipeline template is available for assignment by non admin users.
        """
        return pulumi.get(self, "available")

    @property
    @pulumi.getter
    def configuration(self) -> pulumi.Output[str]:
        """
        The YAML step configuration for the pipeline template.
        """
        return pulumi.get(self, "configuration")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        A description for the pipeline template.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the pipeline template.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> pulumi.Output[str]:
        """
        The UUID of the pipeline template.
        """
        return pulumi.get(self, "uuid")

