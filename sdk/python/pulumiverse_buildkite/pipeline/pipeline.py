# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['PipelineArgs', 'Pipeline']

@pulumi.input_type
class PipelineArgs:
    def __init__(__self__, *,
                 repository: pulumi.Input[str],
                 allow_rebuilds: Optional[pulumi.Input[bool]] = None,
                 branch_configuration: Optional[pulumi.Input[str]] = None,
                 cancel_intermediate_builds: Optional[pulumi.Input[bool]] = None,
                 cancel_intermediate_builds_branch_filter: Optional[pulumi.Input[str]] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 color: Optional[pulumi.Input[str]] = None,
                 default_branch: Optional[pulumi.Input[str]] = None,
                 default_team_id: Optional[pulumi.Input[str]] = None,
                 default_timeout_in_minutes: Optional[pulumi.Input[int]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 emoji: Optional[pulumi.Input[str]] = None,
                 maximum_timeout_in_minutes: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 pipeline_template_id: Optional[pulumi.Input[str]] = None,
                 provider_settings: Optional[pulumi.Input['PipelineProviderSettingsArgs']] = None,
                 skip_intermediate_builds: Optional[pulumi.Input[bool]] = None,
                 skip_intermediate_builds_branch_filter: Optional[pulumi.Input[str]] = None,
                 steps: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        The set of arguments for constructing a Pipeline resource.
        :param pulumi.Input[str] repository: URL to the repository this pipeline is configured for.
        :param pulumi.Input[bool] allow_rebuilds: Whether rebuilds are allowed for this pipeline.
        :param pulumi.Input[str] branch_configuration: Configure the pipeline to only build on this branch conditional.
        :param pulumi.Input[bool] cancel_intermediate_builds: Whether to cancel builds when a new commit is pushed to a matching branch.
        :param pulumi.Input[str] cancel_intermediate_builds_branch_filter: Filter the `cancel_intermediate_builds` setting based on this branch condition.
        :param pulumi.Input[str] cluster_id: Attach this pipeline to the given cluster GraphQL ID.
        :param pulumi.Input[str] color: A color hex code to represent this pipeline.
        :param pulumi.Input[str] default_branch: Default branch of the pipeline.
        :param pulumi.Input[str] default_team_id: The GraphQL ID of the team to use as the default owner of the pipeline.
        :param pulumi.Input[int] default_timeout_in_minutes: Set pipeline wide timeout for command steps.
        :param pulumi.Input[str] description: Description for the pipeline. Can include emoji ðŸ™Œ.
        :param pulumi.Input[str] emoji: An emoji that represents this pipeline.
        :param pulumi.Input[int] maximum_timeout_in_minutes: Set pipeline wide maximum timeout for command steps.
        :param pulumi.Input[str] name: Name to give the pipeline.
        :param pulumi.Input[str] pipeline_template_id: The GraphQL ID of the pipeline template applied to this pipeline.
        :param pulumi.Input['PipelineProviderSettingsArgs'] provider_settings: Control settings depending on the VCS provider used in `repository`.
        :param pulumi.Input[bool] skip_intermediate_builds: Whether to skip queued builds if a new commit is pushed to a matching branch.
        :param pulumi.Input[str] skip_intermediate_builds_branch_filter: Filter the `skip_intermediate_builds` setting based on this branch condition.
        :param pulumi.Input[str] steps: The YAML steps to configure for the pipeline. Defaults to `buildkite-agent pipeline upload`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tags: Tags to attribute to the pipeline. Useful for searching by in the UI.
        """
        pulumi.set(__self__, "repository", repository)
        if allow_rebuilds is not None:
            pulumi.set(__self__, "allow_rebuilds", allow_rebuilds)
        if branch_configuration is not None:
            pulumi.set(__self__, "branch_configuration", branch_configuration)
        if cancel_intermediate_builds is not None:
            pulumi.set(__self__, "cancel_intermediate_builds", cancel_intermediate_builds)
        if cancel_intermediate_builds_branch_filter is not None:
            pulumi.set(__self__, "cancel_intermediate_builds_branch_filter", cancel_intermediate_builds_branch_filter)
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if color is not None:
            pulumi.set(__self__, "color", color)
        if default_branch is not None:
            pulumi.set(__self__, "default_branch", default_branch)
        if default_team_id is not None:
            pulumi.set(__self__, "default_team_id", default_team_id)
        if default_timeout_in_minutes is not None:
            pulumi.set(__self__, "default_timeout_in_minutes", default_timeout_in_minutes)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if emoji is not None:
            pulumi.set(__self__, "emoji", emoji)
        if maximum_timeout_in_minutes is not None:
            pulumi.set(__self__, "maximum_timeout_in_minutes", maximum_timeout_in_minutes)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if pipeline_template_id is not None:
            pulumi.set(__self__, "pipeline_template_id", pipeline_template_id)
        if provider_settings is not None:
            pulumi.set(__self__, "provider_settings", provider_settings)
        if skip_intermediate_builds is not None:
            pulumi.set(__self__, "skip_intermediate_builds", skip_intermediate_builds)
        if skip_intermediate_builds_branch_filter is not None:
            pulumi.set(__self__, "skip_intermediate_builds_branch_filter", skip_intermediate_builds_branch_filter)
        if steps is not None:
            pulumi.set(__self__, "steps", steps)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def repository(self) -> pulumi.Input[str]:
        """
        URL to the repository this pipeline is configured for.
        """
        return pulumi.get(self, "repository")

    @repository.setter
    def repository(self, value: pulumi.Input[str]):
        pulumi.set(self, "repository", value)

    @property
    @pulumi.getter(name="allowRebuilds")
    def allow_rebuilds(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether rebuilds are allowed for this pipeline.
        """
        return pulumi.get(self, "allow_rebuilds")

    @allow_rebuilds.setter
    def allow_rebuilds(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_rebuilds", value)

    @property
    @pulumi.getter(name="branchConfiguration")
    def branch_configuration(self) -> Optional[pulumi.Input[str]]:
        """
        Configure the pipeline to only build on this branch conditional.
        """
        return pulumi.get(self, "branch_configuration")

    @branch_configuration.setter
    def branch_configuration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "branch_configuration", value)

    @property
    @pulumi.getter(name="cancelIntermediateBuilds")
    def cancel_intermediate_builds(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to cancel builds when a new commit is pushed to a matching branch.
        """
        return pulumi.get(self, "cancel_intermediate_builds")

    @cancel_intermediate_builds.setter
    def cancel_intermediate_builds(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "cancel_intermediate_builds", value)

    @property
    @pulumi.getter(name="cancelIntermediateBuildsBranchFilter")
    def cancel_intermediate_builds_branch_filter(self) -> Optional[pulumi.Input[str]]:
        """
        Filter the `cancel_intermediate_builds` setting based on this branch condition.
        """
        return pulumi.get(self, "cancel_intermediate_builds_branch_filter")

    @cancel_intermediate_builds_branch_filter.setter
    def cancel_intermediate_builds_branch_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cancel_intermediate_builds_branch_filter", value)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[pulumi.Input[str]]:
        """
        Attach this pipeline to the given cluster GraphQL ID.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_id", value)

    @property
    @pulumi.getter
    def color(self) -> Optional[pulumi.Input[str]]:
        """
        A color hex code to represent this pipeline.
        """
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter(name="defaultBranch")
    def default_branch(self) -> Optional[pulumi.Input[str]]:
        """
        Default branch of the pipeline.
        """
        return pulumi.get(self, "default_branch")

    @default_branch.setter
    def default_branch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_branch", value)

    @property
    @pulumi.getter(name="defaultTeamId")
    def default_team_id(self) -> Optional[pulumi.Input[str]]:
        """
        The GraphQL ID of the team to use as the default owner of the pipeline.
        """
        return pulumi.get(self, "default_team_id")

    @default_team_id.setter
    def default_team_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_team_id", value)

    @property
    @pulumi.getter(name="defaultTimeoutInMinutes")
    def default_timeout_in_minutes(self) -> Optional[pulumi.Input[int]]:
        """
        Set pipeline wide timeout for command steps.
        """
        return pulumi.get(self, "default_timeout_in_minutes")

    @default_timeout_in_minutes.setter
    def default_timeout_in_minutes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "default_timeout_in_minutes", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description for the pipeline. Can include emoji ðŸ™Œ.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def emoji(self) -> Optional[pulumi.Input[str]]:
        """
        An emoji that represents this pipeline.
        """
        return pulumi.get(self, "emoji")

    @emoji.setter
    def emoji(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "emoji", value)

    @property
    @pulumi.getter(name="maximumTimeoutInMinutes")
    def maximum_timeout_in_minutes(self) -> Optional[pulumi.Input[int]]:
        """
        Set pipeline wide maximum timeout for command steps.
        """
        return pulumi.get(self, "maximum_timeout_in_minutes")

    @maximum_timeout_in_minutes.setter
    def maximum_timeout_in_minutes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "maximum_timeout_in_minutes", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name to give the pipeline.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="pipelineTemplateId")
    def pipeline_template_id(self) -> Optional[pulumi.Input[str]]:
        """
        The GraphQL ID of the pipeline template applied to this pipeline.
        """
        return pulumi.get(self, "pipeline_template_id")

    @pipeline_template_id.setter
    def pipeline_template_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pipeline_template_id", value)

    @property
    @pulumi.getter(name="providerSettings")
    def provider_settings(self) -> Optional[pulumi.Input['PipelineProviderSettingsArgs']]:
        """
        Control settings depending on the VCS provider used in `repository`.
        """
        return pulumi.get(self, "provider_settings")

    @provider_settings.setter
    def provider_settings(self, value: Optional[pulumi.Input['PipelineProviderSettingsArgs']]):
        pulumi.set(self, "provider_settings", value)

    @property
    @pulumi.getter(name="skipIntermediateBuilds")
    def skip_intermediate_builds(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to skip queued builds if a new commit is pushed to a matching branch.
        """
        return pulumi.get(self, "skip_intermediate_builds")

    @skip_intermediate_builds.setter
    def skip_intermediate_builds(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "skip_intermediate_builds", value)

    @property
    @pulumi.getter(name="skipIntermediateBuildsBranchFilter")
    def skip_intermediate_builds_branch_filter(self) -> Optional[pulumi.Input[str]]:
        """
        Filter the `skip_intermediate_builds` setting based on this branch condition.
        """
        return pulumi.get(self, "skip_intermediate_builds_branch_filter")

    @skip_intermediate_builds_branch_filter.setter
    def skip_intermediate_builds_branch_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "skip_intermediate_builds_branch_filter", value)

    @property
    @pulumi.getter
    def steps(self) -> Optional[pulumi.Input[str]]:
        """
        The YAML steps to configure for the pipeline. Defaults to `buildkite-agent pipeline upload`.
        """
        return pulumi.get(self, "steps")

    @steps.setter
    def steps(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "steps", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Tags to attribute to the pipeline. Useful for searching by in the UI.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class _PipelineState:
    def __init__(__self__, *,
                 allow_rebuilds: Optional[pulumi.Input[bool]] = None,
                 badge_url: Optional[pulumi.Input[str]] = None,
                 branch_configuration: Optional[pulumi.Input[str]] = None,
                 cancel_intermediate_builds: Optional[pulumi.Input[bool]] = None,
                 cancel_intermediate_builds_branch_filter: Optional[pulumi.Input[str]] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 color: Optional[pulumi.Input[str]] = None,
                 default_branch: Optional[pulumi.Input[str]] = None,
                 default_team_id: Optional[pulumi.Input[str]] = None,
                 default_timeout_in_minutes: Optional[pulumi.Input[int]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 emoji: Optional[pulumi.Input[str]] = None,
                 maximum_timeout_in_minutes: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 pipeline_template_id: Optional[pulumi.Input[str]] = None,
                 provider_settings: Optional[pulumi.Input['PipelineProviderSettingsArgs']] = None,
                 repository: Optional[pulumi.Input[str]] = None,
                 skip_intermediate_builds: Optional[pulumi.Input[bool]] = None,
                 skip_intermediate_builds_branch_filter: Optional[pulumi.Input[str]] = None,
                 slug: Optional[pulumi.Input[str]] = None,
                 steps: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 uuid: Optional[pulumi.Input[str]] = None,
                 webhook_url: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Pipeline resources.
        :param pulumi.Input[bool] allow_rebuilds: Whether rebuilds are allowed for this pipeline.
        :param pulumi.Input[str] badge_url: The badge URL showing build state.
        :param pulumi.Input[str] branch_configuration: Configure the pipeline to only build on this branch conditional.
        :param pulumi.Input[bool] cancel_intermediate_builds: Whether to cancel builds when a new commit is pushed to a matching branch.
        :param pulumi.Input[str] cancel_intermediate_builds_branch_filter: Filter the `cancel_intermediate_builds` setting based on this branch condition.
        :param pulumi.Input[str] cluster_id: Attach this pipeline to the given cluster GraphQL ID.
        :param pulumi.Input[str] color: A color hex code to represent this pipeline.
        :param pulumi.Input[str] default_branch: Default branch of the pipeline.
        :param pulumi.Input[str] default_team_id: The GraphQL ID of the team to use as the default owner of the pipeline.
        :param pulumi.Input[int] default_timeout_in_minutes: Set pipeline wide timeout for command steps.
        :param pulumi.Input[str] description: Description for the pipeline. Can include emoji ðŸ™Œ.
        :param pulumi.Input[str] emoji: An emoji that represents this pipeline.
        :param pulumi.Input[int] maximum_timeout_in_minutes: Set pipeline wide maximum timeout for command steps.
        :param pulumi.Input[str] name: Name to give the pipeline.
        :param pulumi.Input[str] pipeline_template_id: The GraphQL ID of the pipeline template applied to this pipeline.
        :param pulumi.Input['PipelineProviderSettingsArgs'] provider_settings: Control settings depending on the VCS provider used in `repository`.
        :param pulumi.Input[str] repository: URL to the repository this pipeline is configured for.
        :param pulumi.Input[bool] skip_intermediate_builds: Whether to skip queued builds if a new commit is pushed to a matching branch.
        :param pulumi.Input[str] skip_intermediate_builds_branch_filter: Filter the `skip_intermediate_builds` setting based on this branch condition.
        :param pulumi.Input[str] slug: The slug generated for the pipeline.
        :param pulumi.Input[str] steps: The YAML steps to configure for the pipeline. Defaults to `buildkite-agent pipeline upload`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tags: Tags to attribute to the pipeline. Useful for searching by in the UI.
        :param pulumi.Input[str] uuid: The UUID of the pipeline.
        :param pulumi.Input[str] webhook_url: The webhook URL used to trigger builds from VCS providers.
        """
        if allow_rebuilds is not None:
            pulumi.set(__self__, "allow_rebuilds", allow_rebuilds)
        if badge_url is not None:
            pulumi.set(__self__, "badge_url", badge_url)
        if branch_configuration is not None:
            pulumi.set(__self__, "branch_configuration", branch_configuration)
        if cancel_intermediate_builds is not None:
            pulumi.set(__self__, "cancel_intermediate_builds", cancel_intermediate_builds)
        if cancel_intermediate_builds_branch_filter is not None:
            pulumi.set(__self__, "cancel_intermediate_builds_branch_filter", cancel_intermediate_builds_branch_filter)
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if color is not None:
            pulumi.set(__self__, "color", color)
        if default_branch is not None:
            pulumi.set(__self__, "default_branch", default_branch)
        if default_team_id is not None:
            pulumi.set(__self__, "default_team_id", default_team_id)
        if default_timeout_in_minutes is not None:
            pulumi.set(__self__, "default_timeout_in_minutes", default_timeout_in_minutes)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if emoji is not None:
            pulumi.set(__self__, "emoji", emoji)
        if maximum_timeout_in_minutes is not None:
            pulumi.set(__self__, "maximum_timeout_in_minutes", maximum_timeout_in_minutes)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if pipeline_template_id is not None:
            pulumi.set(__self__, "pipeline_template_id", pipeline_template_id)
        if provider_settings is not None:
            pulumi.set(__self__, "provider_settings", provider_settings)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if skip_intermediate_builds is not None:
            pulumi.set(__self__, "skip_intermediate_builds", skip_intermediate_builds)
        if skip_intermediate_builds_branch_filter is not None:
            pulumi.set(__self__, "skip_intermediate_builds_branch_filter", skip_intermediate_builds_branch_filter)
        if slug is not None:
            pulumi.set(__self__, "slug", slug)
        if steps is not None:
            pulumi.set(__self__, "steps", steps)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if webhook_url is not None:
            pulumi.set(__self__, "webhook_url", webhook_url)

    @property
    @pulumi.getter(name="allowRebuilds")
    def allow_rebuilds(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether rebuilds are allowed for this pipeline.
        """
        return pulumi.get(self, "allow_rebuilds")

    @allow_rebuilds.setter
    def allow_rebuilds(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_rebuilds", value)

    @property
    @pulumi.getter(name="badgeUrl")
    def badge_url(self) -> Optional[pulumi.Input[str]]:
        """
        The badge URL showing build state.
        """
        return pulumi.get(self, "badge_url")

    @badge_url.setter
    def badge_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "badge_url", value)

    @property
    @pulumi.getter(name="branchConfiguration")
    def branch_configuration(self) -> Optional[pulumi.Input[str]]:
        """
        Configure the pipeline to only build on this branch conditional.
        """
        return pulumi.get(self, "branch_configuration")

    @branch_configuration.setter
    def branch_configuration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "branch_configuration", value)

    @property
    @pulumi.getter(name="cancelIntermediateBuilds")
    def cancel_intermediate_builds(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to cancel builds when a new commit is pushed to a matching branch.
        """
        return pulumi.get(self, "cancel_intermediate_builds")

    @cancel_intermediate_builds.setter
    def cancel_intermediate_builds(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "cancel_intermediate_builds", value)

    @property
    @pulumi.getter(name="cancelIntermediateBuildsBranchFilter")
    def cancel_intermediate_builds_branch_filter(self) -> Optional[pulumi.Input[str]]:
        """
        Filter the `cancel_intermediate_builds` setting based on this branch condition.
        """
        return pulumi.get(self, "cancel_intermediate_builds_branch_filter")

    @cancel_intermediate_builds_branch_filter.setter
    def cancel_intermediate_builds_branch_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cancel_intermediate_builds_branch_filter", value)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[pulumi.Input[str]]:
        """
        Attach this pipeline to the given cluster GraphQL ID.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_id", value)

    @property
    @pulumi.getter
    def color(self) -> Optional[pulumi.Input[str]]:
        """
        A color hex code to represent this pipeline.
        """
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter(name="defaultBranch")
    def default_branch(self) -> Optional[pulumi.Input[str]]:
        """
        Default branch of the pipeline.
        """
        return pulumi.get(self, "default_branch")

    @default_branch.setter
    def default_branch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_branch", value)

    @property
    @pulumi.getter(name="defaultTeamId")
    def default_team_id(self) -> Optional[pulumi.Input[str]]:
        """
        The GraphQL ID of the team to use as the default owner of the pipeline.
        """
        return pulumi.get(self, "default_team_id")

    @default_team_id.setter
    def default_team_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_team_id", value)

    @property
    @pulumi.getter(name="defaultTimeoutInMinutes")
    def default_timeout_in_minutes(self) -> Optional[pulumi.Input[int]]:
        """
        Set pipeline wide timeout for command steps.
        """
        return pulumi.get(self, "default_timeout_in_minutes")

    @default_timeout_in_minutes.setter
    def default_timeout_in_minutes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "default_timeout_in_minutes", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description for the pipeline. Can include emoji ðŸ™Œ.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def emoji(self) -> Optional[pulumi.Input[str]]:
        """
        An emoji that represents this pipeline.
        """
        return pulumi.get(self, "emoji")

    @emoji.setter
    def emoji(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "emoji", value)

    @property
    @pulumi.getter(name="maximumTimeoutInMinutes")
    def maximum_timeout_in_minutes(self) -> Optional[pulumi.Input[int]]:
        """
        Set pipeline wide maximum timeout for command steps.
        """
        return pulumi.get(self, "maximum_timeout_in_minutes")

    @maximum_timeout_in_minutes.setter
    def maximum_timeout_in_minutes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "maximum_timeout_in_minutes", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name to give the pipeline.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="pipelineTemplateId")
    def pipeline_template_id(self) -> Optional[pulumi.Input[str]]:
        """
        The GraphQL ID of the pipeline template applied to this pipeline.
        """
        return pulumi.get(self, "pipeline_template_id")

    @pipeline_template_id.setter
    def pipeline_template_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pipeline_template_id", value)

    @property
    @pulumi.getter(name="providerSettings")
    def provider_settings(self) -> Optional[pulumi.Input['PipelineProviderSettingsArgs']]:
        """
        Control settings depending on the VCS provider used in `repository`.
        """
        return pulumi.get(self, "provider_settings")

    @provider_settings.setter
    def provider_settings(self, value: Optional[pulumi.Input['PipelineProviderSettingsArgs']]):
        pulumi.set(self, "provider_settings", value)

    @property
    @pulumi.getter
    def repository(self) -> Optional[pulumi.Input[str]]:
        """
        URL to the repository this pipeline is configured for.
        """
        return pulumi.get(self, "repository")

    @repository.setter
    def repository(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repository", value)

    @property
    @pulumi.getter(name="skipIntermediateBuilds")
    def skip_intermediate_builds(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to skip queued builds if a new commit is pushed to a matching branch.
        """
        return pulumi.get(self, "skip_intermediate_builds")

    @skip_intermediate_builds.setter
    def skip_intermediate_builds(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "skip_intermediate_builds", value)

    @property
    @pulumi.getter(name="skipIntermediateBuildsBranchFilter")
    def skip_intermediate_builds_branch_filter(self) -> Optional[pulumi.Input[str]]:
        """
        Filter the `skip_intermediate_builds` setting based on this branch condition.
        """
        return pulumi.get(self, "skip_intermediate_builds_branch_filter")

    @skip_intermediate_builds_branch_filter.setter
    def skip_intermediate_builds_branch_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "skip_intermediate_builds_branch_filter", value)

    @property
    @pulumi.getter
    def slug(self) -> Optional[pulumi.Input[str]]:
        """
        The slug generated for the pipeline.
        """
        return pulumi.get(self, "slug")

    @slug.setter
    def slug(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slug", value)

    @property
    @pulumi.getter
    def steps(self) -> Optional[pulumi.Input[str]]:
        """
        The YAML steps to configure for the pipeline. Defaults to `buildkite-agent pipeline upload`.
        """
        return pulumi.get(self, "steps")

    @steps.setter
    def steps(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "steps", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Tags to attribute to the pipeline. Useful for searching by in the UI.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[pulumi.Input[str]]:
        """
        The UUID of the pipeline.
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter(name="webhookUrl")
    def webhook_url(self) -> Optional[pulumi.Input[str]]:
        """
        The webhook URL used to trigger builds from VCS providers.
        """
        return pulumi.get(self, "webhook_url")

    @webhook_url.setter
    def webhook_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "webhook_url", value)


class Pipeline(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allow_rebuilds: Optional[pulumi.Input[bool]] = None,
                 branch_configuration: Optional[pulumi.Input[str]] = None,
                 cancel_intermediate_builds: Optional[pulumi.Input[bool]] = None,
                 cancel_intermediate_builds_branch_filter: Optional[pulumi.Input[str]] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 color: Optional[pulumi.Input[str]] = None,
                 default_branch: Optional[pulumi.Input[str]] = None,
                 default_team_id: Optional[pulumi.Input[str]] = None,
                 default_timeout_in_minutes: Optional[pulumi.Input[int]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 emoji: Optional[pulumi.Input[str]] = None,
                 maximum_timeout_in_minutes: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 pipeline_template_id: Optional[pulumi.Input[str]] = None,
                 provider_settings: Optional[pulumi.Input[pulumi.InputType['PipelineProviderSettingsArgs']]] = None,
                 repository: Optional[pulumi.Input[str]] = None,
                 skip_intermediate_builds: Optional[pulumi.Input[bool]] = None,
                 skip_intermediate_builds_branch_filter: Optional[pulumi.Input[str]] = None,
                 steps: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        """
        This resource allows you to create and manage pipelines for repositories.

        More information on pipelines can be found in the [documentation](https://buildkite.com/docs/pipelines).

        ## Import

        import a pipeline resource using the pipelines GraphQL ID

        GraphQL ID for a pipeline can be found on its settings page

        ```sh
        $ pulumi import buildkite:Pipeline/pipeline:Pipeline pipeline UGlwZWxpbmUtLS00MzVjYWQ1OC1lODFkLTQ1YWYtODYzNy1iMWNmODA3MDIzOGQ=
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] allow_rebuilds: Whether rebuilds are allowed for this pipeline.
        :param pulumi.Input[str] branch_configuration: Configure the pipeline to only build on this branch conditional.
        :param pulumi.Input[bool] cancel_intermediate_builds: Whether to cancel builds when a new commit is pushed to a matching branch.
        :param pulumi.Input[str] cancel_intermediate_builds_branch_filter: Filter the `cancel_intermediate_builds` setting based on this branch condition.
        :param pulumi.Input[str] cluster_id: Attach this pipeline to the given cluster GraphQL ID.
        :param pulumi.Input[str] color: A color hex code to represent this pipeline.
        :param pulumi.Input[str] default_branch: Default branch of the pipeline.
        :param pulumi.Input[str] default_team_id: The GraphQL ID of the team to use as the default owner of the pipeline.
        :param pulumi.Input[int] default_timeout_in_minutes: Set pipeline wide timeout for command steps.
        :param pulumi.Input[str] description: Description for the pipeline. Can include emoji ðŸ™Œ.
        :param pulumi.Input[str] emoji: An emoji that represents this pipeline.
        :param pulumi.Input[int] maximum_timeout_in_minutes: Set pipeline wide maximum timeout for command steps.
        :param pulumi.Input[str] name: Name to give the pipeline.
        :param pulumi.Input[str] pipeline_template_id: The GraphQL ID of the pipeline template applied to this pipeline.
        :param pulumi.Input[pulumi.InputType['PipelineProviderSettingsArgs']] provider_settings: Control settings depending on the VCS provider used in `repository`.
        :param pulumi.Input[str] repository: URL to the repository this pipeline is configured for.
        :param pulumi.Input[bool] skip_intermediate_builds: Whether to skip queued builds if a new commit is pushed to a matching branch.
        :param pulumi.Input[str] skip_intermediate_builds_branch_filter: Filter the `skip_intermediate_builds` setting based on this branch condition.
        :param pulumi.Input[str] steps: The YAML steps to configure for the pipeline. Defaults to `buildkite-agent pipeline upload`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tags: Tags to attribute to the pipeline. Useful for searching by in the UI.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: PipelineArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        This resource allows you to create and manage pipelines for repositories.

        More information on pipelines can be found in the [documentation](https://buildkite.com/docs/pipelines).

        ## Import

        import a pipeline resource using the pipelines GraphQL ID

        GraphQL ID for a pipeline can be found on its settings page

        ```sh
        $ pulumi import buildkite:Pipeline/pipeline:Pipeline pipeline UGlwZWxpbmUtLS00MzVjYWQ1OC1lODFkLTQ1YWYtODYzNy1iMWNmODA3MDIzOGQ=
        ```

        :param str resource_name: The name of the resource.
        :param PipelineArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PipelineArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allow_rebuilds: Optional[pulumi.Input[bool]] = None,
                 branch_configuration: Optional[pulumi.Input[str]] = None,
                 cancel_intermediate_builds: Optional[pulumi.Input[bool]] = None,
                 cancel_intermediate_builds_branch_filter: Optional[pulumi.Input[str]] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 color: Optional[pulumi.Input[str]] = None,
                 default_branch: Optional[pulumi.Input[str]] = None,
                 default_team_id: Optional[pulumi.Input[str]] = None,
                 default_timeout_in_minutes: Optional[pulumi.Input[int]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 emoji: Optional[pulumi.Input[str]] = None,
                 maximum_timeout_in_minutes: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 pipeline_template_id: Optional[pulumi.Input[str]] = None,
                 provider_settings: Optional[pulumi.Input[pulumi.InputType['PipelineProviderSettingsArgs']]] = None,
                 repository: Optional[pulumi.Input[str]] = None,
                 skip_intermediate_builds: Optional[pulumi.Input[bool]] = None,
                 skip_intermediate_builds_branch_filter: Optional[pulumi.Input[str]] = None,
                 steps: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PipelineArgs.__new__(PipelineArgs)

            __props__.__dict__["allow_rebuilds"] = allow_rebuilds
            __props__.__dict__["branch_configuration"] = branch_configuration
            __props__.__dict__["cancel_intermediate_builds"] = cancel_intermediate_builds
            __props__.__dict__["cancel_intermediate_builds_branch_filter"] = cancel_intermediate_builds_branch_filter
            __props__.__dict__["cluster_id"] = cluster_id
            __props__.__dict__["color"] = color
            __props__.__dict__["default_branch"] = default_branch
            __props__.__dict__["default_team_id"] = default_team_id
            __props__.__dict__["default_timeout_in_minutes"] = default_timeout_in_minutes
            __props__.__dict__["description"] = description
            __props__.__dict__["emoji"] = emoji
            __props__.__dict__["maximum_timeout_in_minutes"] = maximum_timeout_in_minutes
            __props__.__dict__["name"] = name
            __props__.__dict__["pipeline_template_id"] = pipeline_template_id
            __props__.__dict__["provider_settings"] = provider_settings
            if repository is None and not opts.urn:
                raise TypeError("Missing required property 'repository'")
            __props__.__dict__["repository"] = repository
            __props__.__dict__["skip_intermediate_builds"] = skip_intermediate_builds
            __props__.__dict__["skip_intermediate_builds_branch_filter"] = skip_intermediate_builds_branch_filter
            __props__.__dict__["steps"] = steps
            __props__.__dict__["tags"] = tags
            __props__.__dict__["badge_url"] = None
            __props__.__dict__["slug"] = None
            __props__.__dict__["uuid"] = None
            __props__.__dict__["webhook_url"] = None
        super(Pipeline, __self__).__init__(
            'buildkite:Pipeline/pipeline:Pipeline',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            allow_rebuilds: Optional[pulumi.Input[bool]] = None,
            badge_url: Optional[pulumi.Input[str]] = None,
            branch_configuration: Optional[pulumi.Input[str]] = None,
            cancel_intermediate_builds: Optional[pulumi.Input[bool]] = None,
            cancel_intermediate_builds_branch_filter: Optional[pulumi.Input[str]] = None,
            cluster_id: Optional[pulumi.Input[str]] = None,
            color: Optional[pulumi.Input[str]] = None,
            default_branch: Optional[pulumi.Input[str]] = None,
            default_team_id: Optional[pulumi.Input[str]] = None,
            default_timeout_in_minutes: Optional[pulumi.Input[int]] = None,
            description: Optional[pulumi.Input[str]] = None,
            emoji: Optional[pulumi.Input[str]] = None,
            maximum_timeout_in_minutes: Optional[pulumi.Input[int]] = None,
            name: Optional[pulumi.Input[str]] = None,
            pipeline_template_id: Optional[pulumi.Input[str]] = None,
            provider_settings: Optional[pulumi.Input[pulumi.InputType['PipelineProviderSettingsArgs']]] = None,
            repository: Optional[pulumi.Input[str]] = None,
            skip_intermediate_builds: Optional[pulumi.Input[bool]] = None,
            skip_intermediate_builds_branch_filter: Optional[pulumi.Input[str]] = None,
            slug: Optional[pulumi.Input[str]] = None,
            steps: Optional[pulumi.Input[str]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            uuid: Optional[pulumi.Input[str]] = None,
            webhook_url: Optional[pulumi.Input[str]] = None) -> 'Pipeline':
        """
        Get an existing Pipeline resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] allow_rebuilds: Whether rebuilds are allowed for this pipeline.
        :param pulumi.Input[str] badge_url: The badge URL showing build state.
        :param pulumi.Input[str] branch_configuration: Configure the pipeline to only build on this branch conditional.
        :param pulumi.Input[bool] cancel_intermediate_builds: Whether to cancel builds when a new commit is pushed to a matching branch.
        :param pulumi.Input[str] cancel_intermediate_builds_branch_filter: Filter the `cancel_intermediate_builds` setting based on this branch condition.
        :param pulumi.Input[str] cluster_id: Attach this pipeline to the given cluster GraphQL ID.
        :param pulumi.Input[str] color: A color hex code to represent this pipeline.
        :param pulumi.Input[str] default_branch: Default branch of the pipeline.
        :param pulumi.Input[str] default_team_id: The GraphQL ID of the team to use as the default owner of the pipeline.
        :param pulumi.Input[int] default_timeout_in_minutes: Set pipeline wide timeout for command steps.
        :param pulumi.Input[str] description: Description for the pipeline. Can include emoji ðŸ™Œ.
        :param pulumi.Input[str] emoji: An emoji that represents this pipeline.
        :param pulumi.Input[int] maximum_timeout_in_minutes: Set pipeline wide maximum timeout for command steps.
        :param pulumi.Input[str] name: Name to give the pipeline.
        :param pulumi.Input[str] pipeline_template_id: The GraphQL ID of the pipeline template applied to this pipeline.
        :param pulumi.Input[pulumi.InputType['PipelineProviderSettingsArgs']] provider_settings: Control settings depending on the VCS provider used in `repository`.
        :param pulumi.Input[str] repository: URL to the repository this pipeline is configured for.
        :param pulumi.Input[bool] skip_intermediate_builds: Whether to skip queued builds if a new commit is pushed to a matching branch.
        :param pulumi.Input[str] skip_intermediate_builds_branch_filter: Filter the `skip_intermediate_builds` setting based on this branch condition.
        :param pulumi.Input[str] slug: The slug generated for the pipeline.
        :param pulumi.Input[str] steps: The YAML steps to configure for the pipeline. Defaults to `buildkite-agent pipeline upload`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tags: Tags to attribute to the pipeline. Useful for searching by in the UI.
        :param pulumi.Input[str] uuid: The UUID of the pipeline.
        :param pulumi.Input[str] webhook_url: The webhook URL used to trigger builds from VCS providers.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _PipelineState.__new__(_PipelineState)

        __props__.__dict__["allow_rebuilds"] = allow_rebuilds
        __props__.__dict__["badge_url"] = badge_url
        __props__.__dict__["branch_configuration"] = branch_configuration
        __props__.__dict__["cancel_intermediate_builds"] = cancel_intermediate_builds
        __props__.__dict__["cancel_intermediate_builds_branch_filter"] = cancel_intermediate_builds_branch_filter
        __props__.__dict__["cluster_id"] = cluster_id
        __props__.__dict__["color"] = color
        __props__.__dict__["default_branch"] = default_branch
        __props__.__dict__["default_team_id"] = default_team_id
        __props__.__dict__["default_timeout_in_minutes"] = default_timeout_in_minutes
        __props__.__dict__["description"] = description
        __props__.__dict__["emoji"] = emoji
        __props__.__dict__["maximum_timeout_in_minutes"] = maximum_timeout_in_minutes
        __props__.__dict__["name"] = name
        __props__.__dict__["pipeline_template_id"] = pipeline_template_id
        __props__.__dict__["provider_settings"] = provider_settings
        __props__.__dict__["repository"] = repository
        __props__.__dict__["skip_intermediate_builds"] = skip_intermediate_builds
        __props__.__dict__["skip_intermediate_builds_branch_filter"] = skip_intermediate_builds_branch_filter
        __props__.__dict__["slug"] = slug
        __props__.__dict__["steps"] = steps
        __props__.__dict__["tags"] = tags
        __props__.__dict__["uuid"] = uuid
        __props__.__dict__["webhook_url"] = webhook_url
        return Pipeline(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="allowRebuilds")
    def allow_rebuilds(self) -> pulumi.Output[bool]:
        """
        Whether rebuilds are allowed for this pipeline.
        """
        return pulumi.get(self, "allow_rebuilds")

    @property
    @pulumi.getter(name="badgeUrl")
    def badge_url(self) -> pulumi.Output[str]:
        """
        The badge URL showing build state.
        """
        return pulumi.get(self, "badge_url")

    @property
    @pulumi.getter(name="branchConfiguration")
    def branch_configuration(self) -> pulumi.Output[Optional[str]]:
        """
        Configure the pipeline to only build on this branch conditional.
        """
        return pulumi.get(self, "branch_configuration")

    @property
    @pulumi.getter(name="cancelIntermediateBuilds")
    def cancel_intermediate_builds(self) -> pulumi.Output[bool]:
        """
        Whether to cancel builds when a new commit is pushed to a matching branch.
        """
        return pulumi.get(self, "cancel_intermediate_builds")

    @property
    @pulumi.getter(name="cancelIntermediateBuildsBranchFilter")
    def cancel_intermediate_builds_branch_filter(self) -> pulumi.Output[str]:
        """
        Filter the `cancel_intermediate_builds` setting based on this branch condition.
        """
        return pulumi.get(self, "cancel_intermediate_builds_branch_filter")

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Output[Optional[str]]:
        """
        Attach this pipeline to the given cluster GraphQL ID.
        """
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter
    def color(self) -> pulumi.Output[Optional[str]]:
        """
        A color hex code to represent this pipeline.
        """
        return pulumi.get(self, "color")

    @property
    @pulumi.getter(name="defaultBranch")
    def default_branch(self) -> pulumi.Output[str]:
        """
        Default branch of the pipeline.
        """
        return pulumi.get(self, "default_branch")

    @property
    @pulumi.getter(name="defaultTeamId")
    def default_team_id(self) -> pulumi.Output[Optional[str]]:
        """
        The GraphQL ID of the team to use as the default owner of the pipeline.
        """
        return pulumi.get(self, "default_team_id")

    @property
    @pulumi.getter(name="defaultTimeoutInMinutes")
    def default_timeout_in_minutes(self) -> pulumi.Output[int]:
        """
        Set pipeline wide timeout for command steps.
        """
        return pulumi.get(self, "default_timeout_in_minutes")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[str]:
        """
        Description for the pipeline. Can include emoji ðŸ™Œ.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def emoji(self) -> pulumi.Output[Optional[str]]:
        """
        An emoji that represents this pipeline.
        """
        return pulumi.get(self, "emoji")

    @property
    @pulumi.getter(name="maximumTimeoutInMinutes")
    def maximum_timeout_in_minutes(self) -> pulumi.Output[int]:
        """
        Set pipeline wide maximum timeout for command steps.
        """
        return pulumi.get(self, "maximum_timeout_in_minutes")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Name to give the pipeline.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="pipelineTemplateId")
    def pipeline_template_id(self) -> pulumi.Output[Optional[str]]:
        """
        The GraphQL ID of the pipeline template applied to this pipeline.
        """
        return pulumi.get(self, "pipeline_template_id")

    @property
    @pulumi.getter(name="providerSettings")
    def provider_settings(self) -> pulumi.Output[Optional['outputs.PipelineProviderSettings']]:
        """
        Control settings depending on the VCS provider used in `repository`.
        """
        return pulumi.get(self, "provider_settings")

    @property
    @pulumi.getter
    def repository(self) -> pulumi.Output[str]:
        """
        URL to the repository this pipeline is configured for.
        """
        return pulumi.get(self, "repository")

    @property
    @pulumi.getter(name="skipIntermediateBuilds")
    def skip_intermediate_builds(self) -> pulumi.Output[bool]:
        """
        Whether to skip queued builds if a new commit is pushed to a matching branch.
        """
        return pulumi.get(self, "skip_intermediate_builds")

    @property
    @pulumi.getter(name="skipIntermediateBuildsBranchFilter")
    def skip_intermediate_builds_branch_filter(self) -> pulumi.Output[str]:
        """
        Filter the `skip_intermediate_builds` setting based on this branch condition.
        """
        return pulumi.get(self, "skip_intermediate_builds_branch_filter")

    @property
    @pulumi.getter
    def slug(self) -> pulumi.Output[str]:
        """
        The slug generated for the pipeline.
        """
        return pulumi.get(self, "slug")

    @property
    @pulumi.getter
    def steps(self) -> pulumi.Output[str]:
        """
        The YAML steps to configure for the pipeline. Defaults to `buildkite-agent pipeline upload`.
        """
        return pulumi.get(self, "steps")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Sequence[str]]:
        """
        Tags to attribute to the pipeline. Useful for searching by in the UI.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def uuid(self) -> pulumi.Output[str]:
        """
        The UUID of the pipeline.
        """
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter(name="webhookUrl")
    def webhook_url(self) -> pulumi.Output[str]:
        """
        The webhook URL used to trigger builds from VCS providers.
        """
        return pulumi.get(self, "webhook_url")

