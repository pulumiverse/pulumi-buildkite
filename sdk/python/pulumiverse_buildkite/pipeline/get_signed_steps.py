# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetSignedStepsResult',
    'AwaitableGetSignedStepsResult',
    'get_signed_steps',
    'get_signed_steps_output',
]

@pulumi.output_type
class GetSignedStepsResult:
    """
    A collection of values returned by getSignedSteps.
    """
    def __init__(__self__, id=None, jwks=None, jwks_file=None, jwks_key_id=None, repository=None, steps=None, unsigned_steps=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if jwks and not isinstance(jwks, str):
            raise TypeError("Expected argument 'jwks' to be a str")
        pulumi.set(__self__, "jwks", jwks)
        if jwks_file and not isinstance(jwks_file, str):
            raise TypeError("Expected argument 'jwks_file' to be a str")
        pulumi.set(__self__, "jwks_file", jwks_file)
        if jwks_key_id and not isinstance(jwks_key_id, str):
            raise TypeError("Expected argument 'jwks_key_id' to be a str")
        pulumi.set(__self__, "jwks_key_id", jwks_key_id)
        if repository and not isinstance(repository, str):
            raise TypeError("Expected argument 'repository' to be a str")
        pulumi.set(__self__, "repository", repository)
        if steps and not isinstance(steps, str):
            raise TypeError("Expected argument 'steps' to be a str")
        pulumi.set(__self__, "steps", steps)
        if unsigned_steps and not isinstance(unsigned_steps, str):
            raise TypeError("Expected argument 'unsigned_steps' to be a str")
        pulumi.set(__self__, "unsigned_steps", unsigned_steps)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def jwks(self) -> Optional[str]:
        """
        The JSON Web Key Set (JWKS) to use for signing.
        If `jwks_key_id` is not specified, and the set contains exactly one key, that key will
        be used.
        """
        return pulumi.get(self, "jwks")

    @property
    @pulumi.getter(name="jwksFile")
    def jwks_file(self) -> Optional[str]:
        return pulumi.get(self, "jwks_file")

    @property
    @pulumi.getter(name="jwksKeyId")
    def jwks_key_id(self) -> Optional[str]:
        return pulumi.get(self, "jwks_key_id")

    @property
    @pulumi.getter
    def repository(self) -> str:
        """
        The repository that will be checked out in a build of the pipeline.
        """
        return pulumi.get(self, "repository")

    @property
    @pulumi.getter
    def steps(self) -> str:
        return pulumi.get(self, "steps")

    @property
    @pulumi.getter(name="unsignedSteps")
    def unsigned_steps(self) -> str:
        """
        The steps to sign in YAML format.
        """
        return pulumi.get(self, "unsigned_steps")


class AwaitableGetSignedStepsResult(GetSignedStepsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSignedStepsResult(
            id=self.id,
            jwks=self.jwks,
            jwks_file=self.jwks_file,
            jwks_key_id=self.jwks_key_id,
            repository=self.repository,
            steps=self.steps,
            unsigned_steps=self.unsigned_steps)


def get_signed_steps(jwks: Optional[str] = None,
                     jwks_file: Optional[str] = None,
                     jwks_key_id: Optional[str] = None,
                     repository: Optional[str] = None,
                     unsigned_steps: Optional[str] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSignedStepsResult:
    """
    Use this data source to sign pipeline steps with a JWKS key. You will need to have
    the corresponding verification key present on the agents that run this the steps in
    this pipeline. You can then use these steps in a `Pipeline.Pipeline` resource.

    See [RFC 7517](https://datatracker.ietf.org/doc/html/rfc7517) for more information
    about the JWKS format.

    See the Buildkite [documentation](https://buildkite.com/docs/agent/v3/signed_pipelines)
    for more info about signed pipelines.

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_buildkite as buildkite
    import pulumiverse_buildkite as buildkite

    repository = "git@github.com:my-org/my-repo.git"
    my_steps = buildkite.Pipeline.get_signed_steps(repository=repository,
        jwks_file="/path/to/my/jwks.json",
        jwks_key_id="my-key",
        unsigned_steps=\"\"\"steps:
    - label: ":pipeline:"
      command: buildkite-agent pipeline upload
    \"\"\")
    my_pipeline = buildkite.pipeline.Pipeline("my-pipeline",
        repository=repository,
        steps=my_steps.steps)
    ```
    <!--End PulumiCodeChooser -->


    :param str jwks: The JSON Web Key Set (JWKS) to use for signing.
           If `jwks_key_id` is not specified, and the set contains exactly one key, that key will
           be used.
    :param str repository: The repository that will be checked out in a build of the pipeline.
    :param str unsigned_steps: The steps to sign in YAML format.
    """
    __args__ = dict()
    __args__['jwks'] = jwks
    __args__['jwksFile'] = jwks_file
    __args__['jwksKeyId'] = jwks_key_id
    __args__['repository'] = repository
    __args__['unsignedSteps'] = unsigned_steps
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('buildkite:Pipeline/getSignedSteps:getSignedSteps', __args__, opts=opts, typ=GetSignedStepsResult).value

    return AwaitableGetSignedStepsResult(
        id=pulumi.get(__ret__, 'id'),
        jwks=pulumi.get(__ret__, 'jwks'),
        jwks_file=pulumi.get(__ret__, 'jwks_file'),
        jwks_key_id=pulumi.get(__ret__, 'jwks_key_id'),
        repository=pulumi.get(__ret__, 'repository'),
        steps=pulumi.get(__ret__, 'steps'),
        unsigned_steps=pulumi.get(__ret__, 'unsigned_steps'))


@_utilities.lift_output_func(get_signed_steps)
def get_signed_steps_output(jwks: Optional[pulumi.Input[Optional[str]]] = None,
                            jwks_file: Optional[pulumi.Input[Optional[str]]] = None,
                            jwks_key_id: Optional[pulumi.Input[Optional[str]]] = None,
                            repository: Optional[pulumi.Input[str]] = None,
                            unsigned_steps: Optional[pulumi.Input[str]] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetSignedStepsResult]:
    """
    Use this data source to sign pipeline steps with a JWKS key. You will need to have
    the corresponding verification key present on the agents that run this the steps in
    this pipeline. You can then use these steps in a `Pipeline.Pipeline` resource.

    See [RFC 7517](https://datatracker.ietf.org/doc/html/rfc7517) for more information
    about the JWKS format.

    See the Buildkite [documentation](https://buildkite.com/docs/agent/v3/signed_pipelines)
    for more info about signed pipelines.

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_buildkite as buildkite
    import pulumiverse_buildkite as buildkite

    repository = "git@github.com:my-org/my-repo.git"
    my_steps = buildkite.Pipeline.get_signed_steps(repository=repository,
        jwks_file="/path/to/my/jwks.json",
        jwks_key_id="my-key",
        unsigned_steps=\"\"\"steps:
    - label: ":pipeline:"
      command: buildkite-agent pipeline upload
    \"\"\")
    my_pipeline = buildkite.pipeline.Pipeline("my-pipeline",
        repository=repository,
        steps=my_steps.steps)
    ```
    <!--End PulumiCodeChooser -->


    :param str jwks: The JSON Web Key Set (JWKS) to use for signing.
           If `jwks_key_id` is not specified, and the set contains exactly one key, that key will
           be used.
    :param str repository: The repository that will be checked out in a build of the pipeline.
    :param str unsigned_steps: The steps to sign in YAML format.
    """
    ...
