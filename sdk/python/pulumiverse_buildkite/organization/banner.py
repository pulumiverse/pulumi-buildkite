# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['BannerArgs', 'Banner']

@pulumi.input_type
class BannerArgs:
    def __init__(__self__, *,
                 message: pulumi.Input[str]):
        """
        The set of arguments for constructing a Banner resource.
        :param pulumi.Input[str] message: The organization banner's message.
        """
        pulumi.set(__self__, "message", message)

    @property
    @pulumi.getter
    def message(self) -> pulumi.Input[str]:
        """
        The organization banner's message.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: pulumi.Input[str]):
        pulumi.set(self, "message", value)


@pulumi.input_type
class _BannerState:
    def __init__(__self__, *,
                 message: Optional[pulumi.Input[str]] = None,
                 uuid: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Banner resources.
        :param pulumi.Input[str] message: The organization banner's message.
        :param pulumi.Input[str] uuid: The UUID of the organization banner.
        """
        if message is not None:
            pulumi.set(__self__, "message", message)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        """
        The organization banner's message.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[pulumi.Input[str]]:
        """
        The UUID of the organization banner.
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uuid", value)


class Banner(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        This resource allows you to create and manage banners for specific organizations, displayed to all members at the top of each page in Buildkite's UI.

        More information on organization/system banners can be found in the [documentation](https://buildkite.com/docs/team-management/system-banners).

        ## Example Usage

        ```python
        import pulumi
        import pulumiverse_buildkite as buildkite

        banner = buildkite.organization.Banner("banner", message=":warning: Please be aware of the maintenance window this weekend!")
        ```

        ## Import

        import an organization banner resource using the banner's GraphQL ID

        # 

         you can use this query to find the banner's ID:

         query getOrganizationBannerId {

         organization(slug: "ORGANIZATION_SLUG") {

         banners(first: 1) {

         edges {

         node {

         id

         }

         }

         }

         }

         }

        ```sh
        $ pulumi import buildkite:Organization/banner:Banner banner T3JnYW5pemF0aW9uQmFubmVyLS0tNjZlMmE5YzktM2IzMy00OGE5LTk1NjItMzY2YzMwNzYzN2Uz
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] message: The organization banner's message.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: BannerArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        This resource allows you to create and manage banners for specific organizations, displayed to all members at the top of each page in Buildkite's UI.

        More information on organization/system banners can be found in the [documentation](https://buildkite.com/docs/team-management/system-banners).

        ## Example Usage

        ```python
        import pulumi
        import pulumiverse_buildkite as buildkite

        banner = buildkite.organization.Banner("banner", message=":warning: Please be aware of the maintenance window this weekend!")
        ```

        ## Import

        import an organization banner resource using the banner's GraphQL ID

        # 

         you can use this query to find the banner's ID:

         query getOrganizationBannerId {

         organization(slug: "ORGANIZATION_SLUG") {

         banners(first: 1) {

         edges {

         node {

         id

         }

         }

         }

         }

         }

        ```sh
        $ pulumi import buildkite:Organization/banner:Banner banner T3JnYW5pemF0aW9uQmFubmVyLS0tNjZlMmE5YzktM2IzMy00OGE5LTk1NjItMzY2YzMwNzYzN2Uz
        ```

        :param str resource_name: The name of the resource.
        :param BannerArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(BannerArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = BannerArgs.__new__(BannerArgs)

            if message is None and not opts.urn:
                raise TypeError("Missing required property 'message'")
            __props__.__dict__["message"] = message
            __props__.__dict__["uuid"] = None
        super(Banner, __self__).__init__(
            'buildkite:Organization/banner:Banner',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            message: Optional[pulumi.Input[str]] = None,
            uuid: Optional[pulumi.Input[str]] = None) -> 'Banner':
        """
        Get an existing Banner resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] message: The organization banner's message.
        :param pulumi.Input[str] uuid: The UUID of the organization banner.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _BannerState.__new__(_BannerState)

        __props__.__dict__["message"] = message
        __props__.__dict__["uuid"] = uuid
        return Banner(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def message(self) -> pulumi.Output[str]:
        """
        The organization banner's message.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def uuid(self) -> pulumi.Output[str]:
        """
        The UUID of the organization banner.
        """
        return pulumi.get(self, "uuid")

