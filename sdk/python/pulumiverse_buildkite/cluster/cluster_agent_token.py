# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['ClusterAgentTokenArgs', 'ClusterAgentToken']

@pulumi.input_type
class ClusterAgentTokenArgs:
    def __init__(__self__, *,
                 cluster_id: pulumi.Input[str],
                 description: pulumi.Input[str]):
        """
        The set of arguments for constructing a ClusterAgentToken resource.
        :param pulumi.Input[str] cluster_id: The ID of the cluster that this cluster queue belongs to.
        :param pulumi.Input[str] description: A description about what this cluster agent token is used for.
        """
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "description", description)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Input[str]:
        """
        The ID of the cluster that this cluster queue belongs to.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "cluster_id", value)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Input[str]:
        """
        A description about what this cluster agent token is used for.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: pulumi.Input[str]):
        pulumi.set(self, "description", value)


@pulumi.input_type
class _ClusterAgentTokenState:
    def __init__(__self__, *,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 cluster_uuid: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 token: Optional[pulumi.Input[str]] = None,
                 uuid: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering ClusterAgentToken resources.
        :param pulumi.Input[str] cluster_id: The ID of the cluster that this cluster queue belongs to.
        :param pulumi.Input[str] cluster_uuid: The UUID of the cluster that this cluster queue belongs to.
        :param pulumi.Input[str] description: A description about what this cluster agent token is used for.
        :param pulumi.Input[str] uuid: The UUID of the created cluster queue.
        """
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if cluster_uuid is not None:
            pulumi.set(__self__, "cluster_uuid", cluster_uuid)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if token is not None:
            pulumi.set(__self__, "token", token)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the cluster that this cluster queue belongs to.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_id", value)

    @property
    @pulumi.getter(name="clusterUuid")
    def cluster_uuid(self) -> Optional[pulumi.Input[str]]:
        """
        The UUID of the cluster that this cluster queue belongs to.
        """
        return pulumi.get(self, "cluster_uuid")

    @cluster_uuid.setter
    def cluster_uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_uuid", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        A description about what this cluster agent token is used for.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def token(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "token")

    @token.setter
    def token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "token", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[pulumi.Input[str]]:
        """
        The UUID of the created cluster queue.
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uuid", value)


class ClusterAgentToken(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        ## # Resource: cluster_agent_token

        This resource allows you to create and manage cluster agent tokens.

        Buildkite Documentation: https://buildkite.com/docs/clusters/manage-clusters#set-up-clusters-connect-agents-to-a-cluster

        ## Example Usage

        ```python
        import pulumi
        import pulumiverse_buildkite as buildkite

        cluster_token_1 = buildkite.cluster.ClusterAgentToken("cluster-token-1",
            cluster_id="Q2x1c3Rlci0tLTkyMmVjOTA4LWRmNWItNDhhYS1hMThjLTczMzE0YjQ1ZGYyMA==",
            description="agent token for cluster-1")
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] cluster_id: The ID of the cluster that this cluster queue belongs to.
        :param pulumi.Input[str] description: A description about what this cluster agent token is used for.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ClusterAgentTokenArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## # Resource: cluster_agent_token

        This resource allows you to create and manage cluster agent tokens.

        Buildkite Documentation: https://buildkite.com/docs/clusters/manage-clusters#set-up-clusters-connect-agents-to-a-cluster

        ## Example Usage

        ```python
        import pulumi
        import pulumiverse_buildkite as buildkite

        cluster_token_1 = buildkite.cluster.ClusterAgentToken("cluster-token-1",
            cluster_id="Q2x1c3Rlci0tLTkyMmVjOTA4LWRmNWItNDhhYS1hMThjLTczMzE0YjQ1ZGYyMA==",
            description="agent token for cluster-1")
        ```

        :param str resource_name: The name of the resource.
        :param ClusterAgentTokenArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ClusterAgentTokenArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ClusterAgentTokenArgs.__new__(ClusterAgentTokenArgs)

            if cluster_id is None and not opts.urn:
                raise TypeError("Missing required property 'cluster_id'")
            __props__.__dict__["cluster_id"] = cluster_id
            if description is None and not opts.urn:
                raise TypeError("Missing required property 'description'")
            __props__.__dict__["description"] = description
            __props__.__dict__["cluster_uuid"] = None
            __props__.__dict__["token"] = None
            __props__.__dict__["uuid"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["token"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(ClusterAgentToken, __self__).__init__(
            'buildkite:Cluster/clusterAgentToken:ClusterAgentToken',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cluster_id: Optional[pulumi.Input[str]] = None,
            cluster_uuid: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            token: Optional[pulumi.Input[str]] = None,
            uuid: Optional[pulumi.Input[str]] = None) -> 'ClusterAgentToken':
        """
        Get an existing ClusterAgentToken resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] cluster_id: The ID of the cluster that this cluster queue belongs to.
        :param pulumi.Input[str] cluster_uuid: The UUID of the cluster that this cluster queue belongs to.
        :param pulumi.Input[str] description: A description about what this cluster agent token is used for.
        :param pulumi.Input[str] uuid: The UUID of the created cluster queue.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ClusterAgentTokenState.__new__(_ClusterAgentTokenState)

        __props__.__dict__["cluster_id"] = cluster_id
        __props__.__dict__["cluster_uuid"] = cluster_uuid
        __props__.__dict__["description"] = description
        __props__.__dict__["token"] = token
        __props__.__dict__["uuid"] = uuid
        return ClusterAgentToken(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Output[str]:
        """
        The ID of the cluster that this cluster queue belongs to.
        """
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="clusterUuid")
    def cluster_uuid(self) -> pulumi.Output[str]:
        """
        The UUID of the cluster that this cluster queue belongs to.
        """
        return pulumi.get(self, "cluster_uuid")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[str]:
        """
        A description about what this cluster agent token is used for.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def token(self) -> pulumi.Output[str]:
        return pulumi.get(self, "token")

    @property
    @pulumi.getter
    def uuid(self) -> pulumi.Output[str]:
        """
        The UUID of the created cluster queue.
        """
        return pulumi.get(self, "uuid")

