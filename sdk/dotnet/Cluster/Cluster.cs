// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Buildkite.Cluster
{
    /// <summary>
    /// This resource allows you to create and manage a Buildkite Cluster to run your builds in.
    /// Clusters are useful for grouping agents by there capabilities or permissions.
    /// Find out more information in our [documentation](https://buildkite.com/docs/clusters/overview).
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Buildkite = Pulumiverse.Buildkite;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // create a cluster
    ///     var primary = new Buildkite.Cluster.Cluster("primary", new()
    ///     {
    ///         Description = "Runs the monolith build and deploy",
    ///         Emoji = "ðŸš€",
    ///         Color = "#bada55",
    ///     });
    /// 
    ///     // add a pipeline to the cluster
    ///     var monolith = new Buildkite.Pipeline.Pipeline("monolith", new()
    ///     {
    ///         Repository = "https://github.com/...",
    ///         ClusterId = primary.Id,
    ///     });
    /// 
    ///     var @default = new Buildkite.Cluster.ClusterQueue("default", new()
    ///     {
    ///         ClusterId = primary.Id,
    ///         Key = "default",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// import a cluster resource using the GraphQL ID
    /// 
    /// # 
    /// 
    ///  you can use this query to find the ID:
    /// 
    ///  query getClusters {
    /// 
    ///  organization(slug: "ORGANIZATION"){
    /// 
    ///  clusters(first: 5, order:NAME) {
    /// 
    ///  edges{
    /// 
    ///  node {
    /// 
    ///  id
    /// 
    ///  name
    /// 
    ///  }
    /// 
    ///  }
    /// 
    ///  }
    /// 
    ///  }
    /// 
    ///  }
    /// 
    /// ```sh
    /// $ pulumi import buildkite:Cluster/cluster:Cluster primary Q2x1c3Rlci0tLTI3ZmFmZjA4LTA3OWEtNDk5ZC1hMmIwLTIzNmY3NWFkMWZjYg==
    /// ```
    /// </summary>
    [BuildkiteResourceType("buildkite:Cluster/cluster:Cluster")]
    public partial class Cluster : global::Pulumi.CustomResource
    {
        /// <summary>
        /// A color representation of the Cluster. Accepts hex codes, eg #BADA55.
        /// </summary>
        [Output("color")]
        public Output<string?> Color { get; private set; } = null!;

        /// <summary>
        /// This is a description for the cluster, this may describe the usage for it, the region, or something else
        /// which would help identify the Cluster's purpose.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// An emoji to use with the Cluster, this can either be set using :buildkite: notation, or with the
        /// emoji itself, such as ðŸš€.
        /// </summary>
        [Output("emoji")]
        public Output<string?> Emoji { get; private set; } = null!;

        /// <summary>
        /// The name of the Cluster. Can only contain numbers and letters, no spaces or special characters.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The UUID of the cluster.
        /// </summary>
        [Output("uuid")]
        public Output<string> Uuid { get; private set; } = null!;


        /// <summary>
        /// Create a Cluster resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Cluster(string name, ClusterArgs? args = null, CustomResourceOptions? options = null)
            : base("buildkite:Cluster/cluster:Cluster", name, args ?? new ClusterArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Cluster(string name, Input<string> id, ClusterState? state = null, CustomResourceOptions? options = null)
            : base("buildkite:Cluster/cluster:Cluster", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse/pulumi-buildkite",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Cluster resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Cluster Get(string name, Input<string> id, ClusterState? state = null, CustomResourceOptions? options = null)
        {
            return new Cluster(name, id, state, options);
        }
    }

    public sealed class ClusterArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A color representation of the Cluster. Accepts hex codes, eg #BADA55.
        /// </summary>
        [Input("color")]
        public Input<string>? Color { get; set; }

        /// <summary>
        /// This is a description for the cluster, this may describe the usage for it, the region, or something else
        /// which would help identify the Cluster's purpose.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// An emoji to use with the Cluster, this can either be set using :buildkite: notation, or with the
        /// emoji itself, such as ðŸš€.
        /// </summary>
        [Input("emoji")]
        public Input<string>? Emoji { get; set; }

        /// <summary>
        /// The name of the Cluster. Can only contain numbers and letters, no spaces or special characters.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public ClusterArgs()
        {
        }
        public static new ClusterArgs Empty => new ClusterArgs();
    }

    public sealed class ClusterState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A color representation of the Cluster. Accepts hex codes, eg #BADA55.
        /// </summary>
        [Input("color")]
        public Input<string>? Color { get; set; }

        /// <summary>
        /// This is a description for the cluster, this may describe the usage for it, the region, or something else
        /// which would help identify the Cluster's purpose.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// An emoji to use with the Cluster, this can either be set using :buildkite: notation, or with the
        /// emoji itself, such as ðŸš€.
        /// </summary>
        [Input("emoji")]
        public Input<string>? Emoji { get; set; }

        /// <summary>
        /// The name of the Cluster. Can only contain numbers and letters, no spaces or special characters.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The UUID of the cluster.
        /// </summary>
        [Input("uuid")]
        public Input<string>? Uuid { get; set; }

        public ClusterState()
        {
        }
        public static new ClusterState Empty => new ClusterState();
    }
}
