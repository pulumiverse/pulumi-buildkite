// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Buildkite.Pipeline
{
    /// <summary>
    /// This resource allows you to create and manage pipelines for repositories.
    /// 
    /// More information on pipelines can be found in the [documentation](https://buildkite.com/docs/pipelines).
    /// 
    /// ## Import
    /// 
    /// import a pipeline resource using the pipelines GraphQL ID
    /// 
    ///  GraphQL ID for a pipeline can be found on its settings page
    /// 
    /// ```sh
    /// $ pulumi import buildkite:Pipeline/pipeline:Pipeline pipeline UGlwZWxpbmUtLS00MzVjYWQ1OC1lODFkLTQ1YWYtODYzNy1iMWNmODA3MDIzOGQ=
    /// ```
    /// </summary>
    [BuildkiteResourceType("buildkite:Pipeline/pipeline:Pipeline")]
    public partial class Pipeline : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Whether rebuilds are allowed for this pipeline.
        /// </summary>
        [Output("allowRebuilds")]
        public Output<bool> AllowRebuilds { get; private set; } = null!;

        /// <summary>
        /// The badge URL showing build state.
        /// </summary>
        [Output("badgeUrl")]
        public Output<string> BadgeUrl { get; private set; } = null!;

        /// <summary>
        /// Configure the pipeline to only build on this branch conditional.
        /// </summary>
        [Output("branchConfiguration")]
        public Output<string?> BranchConfiguration { get; private set; } = null!;

        /// <summary>
        /// Whether to cancel builds when a new commit is pushed to a matching branch.
        /// </summary>
        [Output("cancelIntermediateBuilds")]
        public Output<bool> CancelIntermediateBuilds { get; private set; } = null!;

        /// <summary>
        /// Filter the `cancel_intermediate_builds` setting based on this branch condition.
        /// </summary>
        [Output("cancelIntermediateBuildsBranchFilter")]
        public Output<string> CancelIntermediateBuildsBranchFilter { get; private set; } = null!;

        /// <summary>
        /// Attach this pipeline to the given cluster GraphQL ID.
        /// </summary>
        [Output("clusterId")]
        public Output<string?> ClusterId { get; private set; } = null!;

        /// <summary>
        /// A color hex code to represent this pipeline.
        /// </summary>
        [Output("color")]
        public Output<string?> Color { get; private set; } = null!;

        /// <summary>
        /// Default branch of the pipeline.
        /// </summary>
        [Output("defaultBranch")]
        public Output<string> DefaultBranch { get; private set; } = null!;

        /// <summary>
        /// The GraphQL ID of the team to use as the default owner of the pipeline.
        /// </summary>
        [Output("defaultTeamId")]
        public Output<string?> DefaultTeamId { get; private set; } = null!;

        /// <summary>
        /// Set pipeline wide timeout for command steps.
        /// </summary>
        [Output("defaultTimeoutInMinutes")]
        public Output<int> DefaultTimeoutInMinutes { get; private set; } = null!;

        /// <summary>
        /// Description for the pipeline. Can include emoji ðŸ™Œ.
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// An emoji that represents this pipeline.
        /// </summary>
        [Output("emoji")]
        public Output<string?> Emoji { get; private set; } = null!;

        /// <summary>
        /// Set pipeline wide maximum timeout for command steps.
        /// </summary>
        [Output("maximumTimeoutInMinutes")]
        public Output<int> MaximumTimeoutInMinutes { get; private set; } = null!;

        /// <summary>
        /// Name to give the pipeline.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The GraphQL ID of the pipeline template applied to this pipeline.
        /// </summary>
        [Output("pipelineTemplateId")]
        public Output<string?> PipelineTemplateId { get; private set; } = null!;

        /// <summary>
        /// Control settings depending on the VCS provider used in `repository`.
        /// </summary>
        [Output("providerSettings")]
        public Output<Outputs.PipelineProviderSettings?> ProviderSettings { get; private set; } = null!;

        /// <summary>
        /// URL to the repository this pipeline is configured for.
        /// </summary>
        [Output("repository")]
        public Output<string> Repository { get; private set; } = null!;

        /// <summary>
        /// Whether to skip queued builds if a new commit is pushed to a matching branch.
        /// </summary>
        [Output("skipIntermediateBuilds")]
        public Output<bool> SkipIntermediateBuilds { get; private set; } = null!;

        /// <summary>
        /// Filter the `skip_intermediate_builds` setting based on this branch condition.
        /// </summary>
        [Output("skipIntermediateBuildsBranchFilter")]
        public Output<string> SkipIntermediateBuildsBranchFilter { get; private set; } = null!;

        /// <summary>
        /// The slug generated for the pipeline.
        /// </summary>
        [Output("slug")]
        public Output<string> Slug { get; private set; } = null!;

        /// <summary>
        /// The YAML steps to configure for the pipeline. Defaults to `buildkite-agent pipeline upload`.
        /// </summary>
        [Output("steps")]
        public Output<string> Steps { get; private set; } = null!;

        /// <summary>
        /// Tags to attribute to the pipeline. Useful for searching by in the UI.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<string>> Tags { get; private set; } = null!;

        /// <summary>
        /// The UUID of the pipeline.
        /// </summary>
        [Output("uuid")]
        public Output<string> Uuid { get; private set; } = null!;

        /// <summary>
        /// The webhook URL used to trigger builds from VCS providers.
        /// </summary>
        [Output("webhookUrl")]
        public Output<string> WebhookUrl { get; private set; } = null!;


        /// <summary>
        /// Create a Pipeline resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Pipeline(string name, PipelineArgs args, CustomResourceOptions? options = null)
            : base("buildkite:Pipeline/pipeline:Pipeline", name, args ?? new PipelineArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Pipeline(string name, Input<string> id, PipelineState? state = null, CustomResourceOptions? options = null)
            : base("buildkite:Pipeline/pipeline:Pipeline", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse/pulumi-buildkite",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Pipeline resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Pipeline Get(string name, Input<string> id, PipelineState? state = null, CustomResourceOptions? options = null)
        {
            return new Pipeline(name, id, state, options);
        }
    }

    public sealed class PipelineArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether rebuilds are allowed for this pipeline.
        /// </summary>
        [Input("allowRebuilds")]
        public Input<bool>? AllowRebuilds { get; set; }

        /// <summary>
        /// Configure the pipeline to only build on this branch conditional.
        /// </summary>
        [Input("branchConfiguration")]
        public Input<string>? BranchConfiguration { get; set; }

        /// <summary>
        /// Whether to cancel builds when a new commit is pushed to a matching branch.
        /// </summary>
        [Input("cancelIntermediateBuilds")]
        public Input<bool>? CancelIntermediateBuilds { get; set; }

        /// <summary>
        /// Filter the `cancel_intermediate_builds` setting based on this branch condition.
        /// </summary>
        [Input("cancelIntermediateBuildsBranchFilter")]
        public Input<string>? CancelIntermediateBuildsBranchFilter { get; set; }

        /// <summary>
        /// Attach this pipeline to the given cluster GraphQL ID.
        /// </summary>
        [Input("clusterId")]
        public Input<string>? ClusterId { get; set; }

        /// <summary>
        /// A color hex code to represent this pipeline.
        /// </summary>
        [Input("color")]
        public Input<string>? Color { get; set; }

        /// <summary>
        /// Default branch of the pipeline.
        /// </summary>
        [Input("defaultBranch")]
        public Input<string>? DefaultBranch { get; set; }

        /// <summary>
        /// The GraphQL ID of the team to use as the default owner of the pipeline.
        /// </summary>
        [Input("defaultTeamId")]
        public Input<string>? DefaultTeamId { get; set; }

        /// <summary>
        /// Set pipeline wide timeout for command steps.
        /// </summary>
        [Input("defaultTimeoutInMinutes")]
        public Input<int>? DefaultTimeoutInMinutes { get; set; }

        /// <summary>
        /// Description for the pipeline. Can include emoji ðŸ™Œ.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// An emoji that represents this pipeline.
        /// </summary>
        [Input("emoji")]
        public Input<string>? Emoji { get; set; }

        /// <summary>
        /// Set pipeline wide maximum timeout for command steps.
        /// </summary>
        [Input("maximumTimeoutInMinutes")]
        public Input<int>? MaximumTimeoutInMinutes { get; set; }

        /// <summary>
        /// Name to give the pipeline.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The GraphQL ID of the pipeline template applied to this pipeline.
        /// </summary>
        [Input("pipelineTemplateId")]
        public Input<string>? PipelineTemplateId { get; set; }

        /// <summary>
        /// Control settings depending on the VCS provider used in `repository`.
        /// </summary>
        [Input("providerSettings")]
        public Input<Inputs.PipelineProviderSettingsArgs>? ProviderSettings { get; set; }

        /// <summary>
        /// URL to the repository this pipeline is configured for.
        /// </summary>
        [Input("repository", required: true)]
        public Input<string> Repository { get; set; } = null!;

        /// <summary>
        /// Whether to skip queued builds if a new commit is pushed to a matching branch.
        /// </summary>
        [Input("skipIntermediateBuilds")]
        public Input<bool>? SkipIntermediateBuilds { get; set; }

        /// <summary>
        /// Filter the `skip_intermediate_builds` setting based on this branch condition.
        /// </summary>
        [Input("skipIntermediateBuildsBranchFilter")]
        public Input<string>? SkipIntermediateBuildsBranchFilter { get; set; }

        /// <summary>
        /// The YAML steps to configure for the pipeline. Defaults to `buildkite-agent pipeline upload`.
        /// </summary>
        [Input("steps")]
        public Input<string>? Steps { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// Tags to attribute to the pipeline. Useful for searching by in the UI.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        public PipelineArgs()
        {
        }
        public static new PipelineArgs Empty => new PipelineArgs();
    }

    public sealed class PipelineState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether rebuilds are allowed for this pipeline.
        /// </summary>
        [Input("allowRebuilds")]
        public Input<bool>? AllowRebuilds { get; set; }

        /// <summary>
        /// The badge URL showing build state.
        /// </summary>
        [Input("badgeUrl")]
        public Input<string>? BadgeUrl { get; set; }

        /// <summary>
        /// Configure the pipeline to only build on this branch conditional.
        /// </summary>
        [Input("branchConfiguration")]
        public Input<string>? BranchConfiguration { get; set; }

        /// <summary>
        /// Whether to cancel builds when a new commit is pushed to a matching branch.
        /// </summary>
        [Input("cancelIntermediateBuilds")]
        public Input<bool>? CancelIntermediateBuilds { get; set; }

        /// <summary>
        /// Filter the `cancel_intermediate_builds` setting based on this branch condition.
        /// </summary>
        [Input("cancelIntermediateBuildsBranchFilter")]
        public Input<string>? CancelIntermediateBuildsBranchFilter { get; set; }

        /// <summary>
        /// Attach this pipeline to the given cluster GraphQL ID.
        /// </summary>
        [Input("clusterId")]
        public Input<string>? ClusterId { get; set; }

        /// <summary>
        /// A color hex code to represent this pipeline.
        /// </summary>
        [Input("color")]
        public Input<string>? Color { get; set; }

        /// <summary>
        /// Default branch of the pipeline.
        /// </summary>
        [Input("defaultBranch")]
        public Input<string>? DefaultBranch { get; set; }

        /// <summary>
        /// The GraphQL ID of the team to use as the default owner of the pipeline.
        /// </summary>
        [Input("defaultTeamId")]
        public Input<string>? DefaultTeamId { get; set; }

        /// <summary>
        /// Set pipeline wide timeout for command steps.
        /// </summary>
        [Input("defaultTimeoutInMinutes")]
        public Input<int>? DefaultTimeoutInMinutes { get; set; }

        /// <summary>
        /// Description for the pipeline. Can include emoji ðŸ™Œ.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// An emoji that represents this pipeline.
        /// </summary>
        [Input("emoji")]
        public Input<string>? Emoji { get; set; }

        /// <summary>
        /// Set pipeline wide maximum timeout for command steps.
        /// </summary>
        [Input("maximumTimeoutInMinutes")]
        public Input<int>? MaximumTimeoutInMinutes { get; set; }

        /// <summary>
        /// Name to give the pipeline.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The GraphQL ID of the pipeline template applied to this pipeline.
        /// </summary>
        [Input("pipelineTemplateId")]
        public Input<string>? PipelineTemplateId { get; set; }

        /// <summary>
        /// Control settings depending on the VCS provider used in `repository`.
        /// </summary>
        [Input("providerSettings")]
        public Input<Inputs.PipelineProviderSettingsGetArgs>? ProviderSettings { get; set; }

        /// <summary>
        /// URL to the repository this pipeline is configured for.
        /// </summary>
        [Input("repository")]
        public Input<string>? Repository { get; set; }

        /// <summary>
        /// Whether to skip queued builds if a new commit is pushed to a matching branch.
        /// </summary>
        [Input("skipIntermediateBuilds")]
        public Input<bool>? SkipIntermediateBuilds { get; set; }

        /// <summary>
        /// Filter the `skip_intermediate_builds` setting based on this branch condition.
        /// </summary>
        [Input("skipIntermediateBuildsBranchFilter")]
        public Input<string>? SkipIntermediateBuildsBranchFilter { get; set; }

        /// <summary>
        /// The slug generated for the pipeline.
        /// </summary>
        [Input("slug")]
        public Input<string>? Slug { get; set; }

        /// <summary>
        /// The YAML steps to configure for the pipeline. Defaults to `buildkite-agent pipeline upload`.
        /// </summary>
        [Input("steps")]
        public Input<string>? Steps { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// Tags to attribute to the pipeline. Useful for searching by in the UI.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The UUID of the pipeline.
        /// </summary>
        [Input("uuid")]
        public Input<string>? Uuid { get; set; }

        /// <summary>
        /// The webhook URL used to trigger builds from VCS providers.
        /// </summary>
        [Input("webhookUrl")]
        public Input<string>? WebhookUrl { get; set; }

        public PipelineState()
        {
        }
        public static new PipelineState Empty => new PipelineState();
    }
}
