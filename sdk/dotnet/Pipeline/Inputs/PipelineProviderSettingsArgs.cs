// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Buildkite.Pipeline.Inputs
{

    public sealed class PipelineProviderSettingsArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether to create builds when branches are pushed.
        /// </summary>
        [Input("buildBranches")]
        public Input<bool>? BuildBranches { get; set; }

        /// <summary>
        /// Whether to create builds for pull requests from third-party forks.
        /// </summary>
        [Input("buildPullRequestForks")]
        public Input<bool>? BuildPullRequestForks { get; set; }

        /// <summary>
        /// Whether to create builds for pull requests when labels are added or removed.
        /// </summary>
        [Input("buildPullRequestLabelsChanged")]
        public Input<bool>? BuildPullRequestLabelsChanged { get; set; }

        /// <summary>
        /// Whether to create a build when a pull request changes to "Ready for review".
        /// </summary>
        [Input("buildPullRequestReadyForReview")]
        public Input<bool>? BuildPullRequestReadyForReview { get; set; }

        /// <summary>
        /// Whether to create builds for commits that are part of a pull request.
        /// </summary>
        [Input("buildPullRequests")]
        public Input<bool>? BuildPullRequests { get; set; }

        /// <summary>
        /// Whether to create builds when tags are pushed.
        /// </summary>
        [Input("buildTags")]
        public Input<bool>? BuildTags { get; set; }

        /// <summary>
        /// Automatically cancel running builds for a branch if the branch is deleted.
        /// </summary>
        [Input("cancelDeletedBranchBuilds")]
        public Input<bool>? CancelDeletedBranchBuilds { get; set; }

        /// <summary>
        /// The condition to evaluate when deciding if a build should run. More details available in [the documentation](https://buildkite.com/docs/pipelines/conditionals#conditionals-in-pipelines).
        /// </summary>
        [Input("filterCondition")]
        public Input<string>? FilterCondition { get; set; }

        /// <summary>
        /// Whether to filter builds to only run when the condition in `filter_condition` is true.
        /// </summary>
        [Input("filterEnabled")]
        public Input<bool>? FilterEnabled { get; set; }

        /// <summary>
        /// Prefix branch names for third-party fork builds to ensure they don't trigger branch conditions. For example, the main branch from some-user will become some-user:main.
        /// </summary>
        [Input("prefixPullRequestForkBranchNames")]
        public Input<bool>? PrefixPullRequestForkBranchNames { get; set; }

        /// <summary>
        /// The status to use for blocked builds. Pending can be used with [required status checks](https://help.github.com/en/articles/enabling-required-status-checks) to prevent merging pull requests with blocked builds.
        /// </summary>
        [Input("publishBlockedAsPending")]
        public Input<bool>? PublishBlockedAsPending { get; set; }

        /// <summary>
        /// Whether to update the status of commits in Bitbucket or GitHub.
        /// </summary>
        [Input("publishCommitStatus")]
        public Input<bool>? PublishCommitStatus { get; set; }

        /// <summary>
        /// Whether to create a separate status for each job in a build, allowing you to see the status of each job directly in Bitbucket or GitHub.
        /// </summary>
        [Input("publishCommitStatusPerStep")]
        public Input<bool>? PublishCommitStatusPerStep { get; set; }

        /// <summary>
        /// Filter pull requests builds by the branch filter.
        /// </summary>
        [Input("pullRequestBranchFilterConfiguration")]
        public Input<string>? PullRequestBranchFilterConfiguration { get; set; }

        /// <summary>
        /// Filter pull request builds.
        /// </summary>
        [Input("pullRequestBranchFilterEnabled")]
        public Input<bool>? PullRequestBranchFilterEnabled { get; set; }

        /// <summary>
        /// Whether to create a separate status for pull request builds, allowing you to require a passing pull request build in your [required status checks](https://help.github.com/en/articles/enabling-required-status-checks) in GitHub.
        /// </summary>
        [Input("separatePullRequestStatuses")]
        public Input<bool>? SeparatePullRequestStatuses { get; set; }

        /// <summary>
        /// Whether to skip creating a new build if an existing build for the commit and branch already exists. This option is only valid if the pipeline uses a GitHub repository.
        /// </summary>
        [Input("skipBuildsForExistingCommits")]
        public Input<bool>? SkipBuildsForExistingCommits { get; set; }

        /// <summary>
        /// Whether to skip creating a new build for a pull request if an existing build for the commit and branch already exists.
        /// </summary>
        [Input("skipPullRequestBuildsForExistingCommits")]
        public Input<bool>? SkipPullRequestBuildsForExistingCommits { get; set; }

        /// <summary>
        /// What type of event to trigger builds on. Must be one of:
        /// 	- `code` will create builds when code is pushed to GitHub.
        /// 	- `deployment` will create builds when a deployment is created in GitHub.
        /// 	- `fork` will create builds when the GitHub repository is forked.
        /// 	- `none` will not create any builds based on GitHub activity.
        /// 
        /// 	&gt; `trigger_mode` is only valid if the pipeline uses a GitHub repository.
        /// </summary>
        [Input("triggerMode")]
        public Input<string>? TriggerMode { get; set; }

        public PipelineProviderSettingsArgs()
        {
        }
        public static new PipelineProviderSettingsArgs Empty => new PipelineProviderSettingsArgs();
    }
}
