// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Buildkite.Pipeline
{
    public static class GetSignedSteps
    {
        /// <summary>
        /// Use this data source to sign pipeline steps with a JWKS key. You will need to have
        /// the corresponding verification key present on the agents that run this the steps in
        /// this pipeline. You can then use these steps in a `buildkite.Pipeline.Pipeline` resource.
        /// 
        /// See [RFC 7517](https://datatracker.ietf.org/doc/html/rfc7517) for more information
        /// about the JWKS format.
        /// 
        /// See the Buildkite [documentation](https://buildkite.com/docs/agent/v3/signed_pipelines)
        /// for more info about signed pipelines.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Buildkite = Pulumi.Buildkite;
        /// using Buildkite = Pulumiverse.Buildkite;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var repository = "git@github.com:my-org/my-repo.git";
        /// 
        ///     var my_steps = Buildkite.Pipeline.GetSignedSteps.Invoke(new()
        ///     {
        ///         Repository = repository,
        ///         JwksFile = "/path/to/my/jwks.json",
        ///         JwksKeyId = "my-key",
        ///         UnsignedSteps = @"steps:
        /// - label: "":pipeline:""
        ///   command: buildkite-agent pipeline upload
        /// ",
        ///     });
        /// 
        ///     var my_pipeline = new Buildkite.Pipeline.Pipeline("my-pipeline", new()
        ///     {
        ///         Repository = repository,
        ///         Steps = my_steps.Apply(my_steps =&gt; my_steps.Apply(getSignedStepsResult =&gt; getSignedStepsResult.Steps)),
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetSignedStepsResult> InvokeAsync(GetSignedStepsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetSignedStepsResult>("buildkite:Pipeline/getSignedSteps:getSignedSteps", args ?? new GetSignedStepsArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to sign pipeline steps with a JWKS key. You will need to have
        /// the corresponding verification key present on the agents that run this the steps in
        /// this pipeline. You can then use these steps in a `buildkite.Pipeline.Pipeline` resource.
        /// 
        /// See [RFC 7517](https://datatracker.ietf.org/doc/html/rfc7517) for more information
        /// about the JWKS format.
        /// 
        /// See the Buildkite [documentation](https://buildkite.com/docs/agent/v3/signed_pipelines)
        /// for more info about signed pipelines.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Buildkite = Pulumi.Buildkite;
        /// using Buildkite = Pulumiverse.Buildkite;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var repository = "git@github.com:my-org/my-repo.git";
        /// 
        ///     var my_steps = Buildkite.Pipeline.GetSignedSteps.Invoke(new()
        ///     {
        ///         Repository = repository,
        ///         JwksFile = "/path/to/my/jwks.json",
        ///         JwksKeyId = "my-key",
        ///         UnsignedSteps = @"steps:
        /// - label: "":pipeline:""
        ///   command: buildkite-agent pipeline upload
        /// ",
        ///     });
        /// 
        ///     var my_pipeline = new Buildkite.Pipeline.Pipeline("my-pipeline", new()
        ///     {
        ///         Repository = repository,
        ///         Steps = my_steps.Apply(my_steps =&gt; my_steps.Apply(getSignedStepsResult =&gt; getSignedStepsResult.Steps)),
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetSignedStepsResult> Invoke(GetSignedStepsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetSignedStepsResult>("buildkite:Pipeline/getSignedSteps:getSignedSteps", args ?? new GetSignedStepsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSignedStepsArgs : global::Pulumi.InvokeArgs
    {
        [Input("jwks")]
        private string? _jwks;

        /// <summary>
        /// The JSON Web Key Set (JWKS) to use for signing.
        /// If `jwks_key_id` is not specified, and the set contains exactly one key, that key will
        /// be used.
        /// </summary>
        public string? Jwks
        {
            get => _jwks;
            set => _jwks = value;
        }

        [Input("jwksFile")]
        public string? JwksFile { get; set; }

        [Input("jwksKeyId")]
        public string? JwksKeyId { get; set; }

        /// <summary>
        /// The repository that will be checked out in a build of the pipeline.
        /// </summary>
        [Input("repository", required: true)]
        public string Repository { get; set; } = null!;

        /// <summary>
        /// The steps to sign in YAML format.
        /// </summary>
        [Input("unsignedSteps", required: true)]
        public string UnsignedSteps { get; set; } = null!;

        public GetSignedStepsArgs()
        {
        }
        public static new GetSignedStepsArgs Empty => new GetSignedStepsArgs();
    }

    public sealed class GetSignedStepsInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("jwks")]
        private Input<string>? _jwks;

        /// <summary>
        /// The JSON Web Key Set (JWKS) to use for signing.
        /// If `jwks_key_id` is not specified, and the set contains exactly one key, that key will
        /// be used.
        /// </summary>
        public Input<string>? Jwks
        {
            get => _jwks;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _jwks = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("jwksFile")]
        public Input<string>? JwksFile { get; set; }

        [Input("jwksKeyId")]
        public Input<string>? JwksKeyId { get; set; }

        /// <summary>
        /// The repository that will be checked out in a build of the pipeline.
        /// </summary>
        [Input("repository", required: true)]
        public Input<string> Repository { get; set; } = null!;

        /// <summary>
        /// The steps to sign in YAML format.
        /// </summary>
        [Input("unsignedSteps", required: true)]
        public Input<string> UnsignedSteps { get; set; } = null!;

        public GetSignedStepsInvokeArgs()
        {
        }
        public static new GetSignedStepsInvokeArgs Empty => new GetSignedStepsInvokeArgs();
    }


    [OutputType]
    public sealed class GetSignedStepsResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The JSON Web Key Set (JWKS) to use for signing.
        /// If `jwks_key_id` is not specified, and the set contains exactly one key, that key will
        /// be used.
        /// </summary>
        public readonly string? Jwks;
        public readonly string? JwksFile;
        public readonly string? JwksKeyId;
        /// <summary>
        /// The repository that will be checked out in a build of the pipeline.
        /// </summary>
        public readonly string Repository;
        public readonly string Steps;
        /// <summary>
        /// The steps to sign in YAML format.
        /// </summary>
        public readonly string UnsignedSteps;

        [OutputConstructor]
        private GetSignedStepsResult(
            string id,

            string? jwks,

            string? jwksFile,

            string? jwksKeyId,

            string repository,

            string steps,

            string unsignedSteps)
        {
            Id = id;
            Jwks = jwks;
            JwksFile = jwksFile;
            JwksKeyId = jwksKeyId;
            Repository = repository;
            Steps = steps;
            UnsignedSteps = unsignedSteps;
        }
    }
}
