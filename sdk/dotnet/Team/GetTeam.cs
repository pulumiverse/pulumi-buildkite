// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Buildkite.Team
{
    public static class GetTeam
    {
        /// <summary>
        /// ## # Data Source: team
        /// 
        /// Use this data source to look up properties of a team. This can be used to
        /// validate that a team exists before setting the team slug on a pipeline.
        /// 
        /// Buildkite documentation: https://buildkite.com/docs/pipelines/permissions
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Buildkite = Pulumi.Buildkite;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var myTeam = Buildkite.Team.GetTeam.Invoke(new()
        ///     {
        ///         Slug = "my_team",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetTeamResult> InvokeAsync(GetTeamArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetTeamResult>("buildkite:Team/getTeam:getTeam", args ?? new GetTeamArgs(), options.WithDefaults());

        /// <summary>
        /// ## # Data Source: team
        /// 
        /// Use this data source to look up properties of a team. This can be used to
        /// validate that a team exists before setting the team slug on a pipeline.
        /// 
        /// Buildkite documentation: https://buildkite.com/docs/pipelines/permissions
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Buildkite = Pulumi.Buildkite;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var myTeam = Buildkite.Team.GetTeam.Invoke(new()
        ///     {
        ///         Slug = "my_team",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetTeamResult> Invoke(GetTeamInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetTeamResult>("buildkite:Team/getTeam:getTeam", args ?? new GetTeamInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetTeamArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The slug of the team, available in the URL of the team on buildkite.com
        /// </summary>
        [Input("slug", required: true)]
        public string Slug { get; set; } = null!;

        public GetTeamArgs()
        {
        }
        public static new GetTeamArgs Empty => new GetTeamArgs();
    }

    public sealed class GetTeamInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The slug of the team, available in the URL of the team on buildkite.com
        /// </summary>
        [Input("slug", required: true)]
        public Input<string> Slug { get; set; } = null!;

        public GetTeamInvokeArgs()
        {
        }
        public static new GetTeamInvokeArgs Empty => new GetTeamInvokeArgs();
    }


    [OutputType]
    public sealed class GetTeamResult
    {
        /// <summary>
        /// Default role to assign to a team member
        /// </summary>
        public readonly string DefaultMemberRole;
        /// <summary>
        /// Whether new org members will be automatically added to this team
        /// </summary>
        public readonly bool DefaultTeam;
        /// <summary>
        /// A description of the team
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// The GraphQL ID of the team
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Whether team members can create new pipelines and add them to the team
        /// </summary>
        public readonly bool MembersCanCreatePipelines;
        /// <summary>
        /// The name of the team
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Whether the team is visible to org members outside this team
        /// </summary>
        public readonly string Privacy;
        public readonly string Slug;
        /// <summary>
        /// The UUID of the team
        /// </summary>
        public readonly string Uuid;

        [OutputConstructor]
        private GetTeamResult(
            string defaultMemberRole,

            bool defaultTeam,

            string description,

            string id,

            bool membersCanCreatePipelines,

            string name,

            string privacy,

            string slug,

            string uuid)
        {
            DefaultMemberRole = defaultMemberRole;
            DefaultTeam = defaultTeam;
            Description = description;
            Id = id;
            MembersCanCreatePipelines = membersCanCreatePipelines;
            Name = name;
            Privacy = privacy;
            Slug = slug;
            Uuid = uuid;
        }
    }
}
