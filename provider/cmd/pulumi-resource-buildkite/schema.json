{
    "name": "buildkite",
    "displayName": "Buildkite",
    "description": "A Pulumi package for creating and managing Buildkite resources.",
    "keywords": [
        "pulumi",
        "buildkite"
    ],
    "homepage": "https://github.com/pulumiverse/pulumi-buildkite",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`buildkite` Terraform Provider](https://github.com/buildkite/terraform-provider-buildkite).",
    "repository": "https://github.com/pulumiverse/pulumi-buildkite",
    "logoUrl": "https://raw.githubusercontent.com/pulumiverse/pulumi-buildkite/main/assets/buildkite-logo.png",
    "pluginDownloadURL": "github://api.github.com/pulumiverse/pulumi-buildkite",
    "publisher": "Pulumiverse",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "language": {
        "csharp": {
            "compatibility": "tfbridge20",
            "namespaces": {
                "buildkite": "Buildkite"
            },
            "packageReferences": {
                "Pulumi": "3.*"
            },
            "rootNamespace": "Pulumiverse"
        },
        "go": {
            "generateExtraInputTypes": true,
            "generateResourceContainerTypes": true,
            "importBasePath": "github.com/pulumiverse/pulumi-buildkite/sdk/go/buildkite"
        },
        "nodejs": {
            "compatibility": "tfbridge20",
            "dependencies": {
                "@pulumi/pulumi": "^3.0.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^10.0.0"
            },
            "disableUnionOutputTypes": true,
            "packageDescription": "A Pulumi package for creating and managing Buildkite resources.",
            "packageName": "@pulumiverse/buildkite",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/buildkite/terraform-provider-buildkite)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-buildkite` repo](https://github.com/pulumiverse/pulumi-buildkite/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-buildkite` repo](https://github.com/buildkite/terraform-provider-buildkite/issues).",
            "typescriptVersion": ""
        },
        "python": {
            "compatibility": "tfbridge20",
            "packageName": "pulumiverse_buildkite",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/buildkite/terraform-provider-buildkite)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-buildkite` repo](https://github.com/pulumiverse/pulumi-buildkite/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-buildkite` repo](https://github.com/buildkite/terraform-provider-buildkite/issues).",
            "requires": {
                "pulumi": "\u003e=3.0.0,\u003c4.0.0"
            }
        }
    },
    "config": {
        "variables": {
            "apiToken": {
                "type": "string",
                "description": "API token with GraphQL access and `write_pipelines, read_pipelines` scopes\n"
            },
            "graphqlUrl": {
                "type": "string",
                "description": "Base URL for the GraphQL API to use\n"
            },
            "organization": {
                "type": "string",
                "description": "The Buildkite organization slug\n"
            },
            "restUrl": {
                "type": "string",
                "description": "Base URL for the REST API to use\n"
            }
        },
        "defaults": [
            "apiToken",
            "organization"
        ]
    },
    "types": {
        "buildkite:Pipeline/PipelineProviderSettings:PipelineProviderSettings": {
            "properties": {
                "buildBranches": {
                    "type": "boolean",
                    "description": "Whether to create builds when branches are pushed.\n"
                },
                "buildPullRequestForks": {
                    "type": "boolean",
                    "description": "Whether to create builds for pull requests from third-party forks.\n"
                },
                "buildPullRequestLabelsChanged": {
                    "type": "boolean",
                    "description": "Whether to create builds for pull requests when labels are added or removed.\n"
                },
                "buildPullRequestReadyForReview": {
                    "type": "boolean"
                },
                "buildPullRequests": {
                    "type": "boolean",
                    "description": "Whether to create builds for commits that are part of a Pull Request.\n"
                },
                "buildTags": {
                    "type": "boolean",
                    "description": "Whether to create builds when tags are pushed.\n\nProperties available for Bitbucket Cloud, GitHub, and GitHub Enterprise:\n"
                },
                "cancelDeletedBranchBuilds": {
                    "type": "boolean",
                    "description": "A boolean to enable automatically cancelling any running builds for a branch if the branch is deleted.\n\nAdditional properties available for GitHub:\n"
                },
                "filterCondition": {
                    "type": "string",
                    "description": "The condition to evaluate when deciding if a build should run. More details available in [the documentation](https://buildkite.com/docs/pipelines/conditionals#conditionals-in-pipelines)\n"
                },
                "filterEnabled": {
                    "type": "boolean",
                    "description": "[true/false] Whether to filter builds to only run when the condition in `filter_condition` is true\n"
                },
                "prefixPullRequestForkBranchNames": {
                    "type": "boolean",
                    "description": "Prefix branch names for third-party fork builds to ensure they don't trigger branch conditions. For example, the `master` branch from `some-user` will become `some-user:master`.\n"
                },
                "publishBlockedAsPending": {
                    "type": "boolean",
                    "description": "The status to use for blocked builds. Pending can be used with [required status checks](https://help.github.com/en/articles/enabling-required-status-checks) to prevent merging pull requests with blocked builds.\n"
                },
                "publishCommitStatus": {
                    "type": "boolean",
                    "description": "Whether to update the status of commits in Bitbucket or GitHub.\n"
                },
                "publishCommitStatusPerStep": {
                    "type": "boolean",
                    "description": "Whether to create a separate status for each job in a build, allowing you to see the status of each job directly in Bitbucket or GitHub.\n"
                },
                "pullRequestBranchFilterConfiguration": {
                    "type": "string",
                    "description": "The branch filtering pattern. Only pull requests on branches matching this pattern will cause builds to be created.\n"
                },
                "pullRequestBranchFilterEnabled": {
                    "type": "boolean",
                    "description": "Whether to limit the creation of builds to specific branches or patterns.\n"
                },
                "separatePullRequestStatuses": {
                    "type": "boolean",
                    "description": "Whether to create a separate status for pull request builds, allowing you to require a passing pull request build in your [required status checks](https://help.github.com/en/articles/enabling-required-status-checks) in GitHub.\n"
                },
                "skipPullRequestBuildsForExistingCommits": {
                    "type": "boolean",
                    "description": "Whether to skip creating a new build for a pull request if an existing build for the commit and branch already exists.\n"
                },
                "triggerMode": {
                    "type": "string",
                    "description": "What type of event to trigger builds on. Must be one of:\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "buildBranches",
                        "buildPullRequestForks",
                        "buildPullRequestLabelsChanged",
                        "buildPullRequestReadyForReview",
                        "buildPullRequests",
                        "buildTags",
                        "cancelDeletedBranchBuilds",
                        "filterCondition",
                        "filterEnabled",
                        "prefixPullRequestForkBranchNames",
                        "publishBlockedAsPending",
                        "publishCommitStatus",
                        "publishCommitStatusPerStep",
                        "pullRequestBranchFilterConfiguration",
                        "pullRequestBranchFilterEnabled",
                        "separatePullRequestStatuses",
                        "skipPullRequestBuildsForExistingCommits",
                        "triggerMode"
                    ]
                }
            }
        },
        "buildkite:Pipeline/PipelineTeam:PipelineTeam": {
            "properties": {
                "accessLevel": {
                    "type": "string",
                    "description": "The level of access to grant. Must be one of `READ_ONLY`, `BUILD_AND_READ` or `MANAGE_BUILD_AND_READ`.\n"
                },
                "slug": {
                    "type": "string",
                    "description": "The buildkite slug of the team.\n"
                }
            },
            "type": "object",
            "required": [
                "accessLevel",
                "slug"
            ]
        }
    },
    "provider": {
        "description": "The provider type for the buildkite package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "properties": {
            "apiToken": {
                "type": "string",
                "description": "API token with GraphQL access and `write_pipelines, read_pipelines` scopes\n"
            },
            "graphqlUrl": {
                "type": "string",
                "description": "Base URL for the GraphQL API to use\n"
            },
            "organization": {
                "type": "string",
                "description": "The Buildkite organization slug\n"
            },
            "restUrl": {
                "type": "string",
                "description": "Base URL for the REST API to use\n"
            }
        },
        "required": [
            "apiToken",
            "organization"
        ],
        "inputProperties": {
            "apiToken": {
                "type": "string",
                "description": "API token with GraphQL access and `write_pipelines, read_pipelines` scopes\n"
            },
            "graphqlUrl": {
                "type": "string",
                "description": "Base URL for the GraphQL API to use\n"
            },
            "organization": {
                "type": "string",
                "description": "The Buildkite organization slug\n"
            },
            "restUrl": {
                "type": "string",
                "description": "Base URL for the REST API to use\n"
            }
        },
        "requiredInputs": [
            "apiToken",
            "organization"
        ]
    },
    "resources": {
        "buildkite:Agent/agentToken:AgentToken": {
            "description": "## # Resource: agent_token\n\nThis resource allows you to create and manage agent tokens.\n\nBuildkite Documentation: https://buildkite.com/docs/agent/v3/tokens\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as buildkite from \"@pulumiverse/buildkite\";\n\nconst fleet = new buildkite.agent.AgentToken(\"fleet\", {description: \"token used by build fleet\"});\n```\n```python\nimport pulumi\nimport pulumiverse_buildkite as buildkite\n\nfleet = buildkite.agent.AgentToken(\"fleet\", description=\"token used by build fleet\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Buildkite = Pulumiverse.Buildkite;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var fleet = new Buildkite.Agent.AgentToken(\"fleet\", new()\n    {\n        Description = \"token used by build fleet\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-buildkite/sdk/go/buildkite/Agent\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Agent.NewAgentToken(ctx, \"fleet\", \u0026Agent.AgentTokenArgs{\n\t\t\tDescription: pulumi.String(\"token used by build fleet\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.buildkite.Agent.AgentToken;\nimport com.pulumi.buildkite.Agent.AgentTokenArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var fleet = new AgentToken(\"fleet\", AgentTokenArgs.builder()        \n            .description(\"token used by build fleet\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  fleet:\n    type: buildkite:Agent:AgentToken\n    properties:\n      description: token used by build fleet\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nTokens can be imported using the `GraphQL ID` (not UUID), e.g.\n\n```sh\n $ pulumi import buildkite:Agent/agentToken:AgentToken fleet QWdlbnRUb2tlbi0tLTQzNWNhZDU4LWU4MWQtNDVhZi04NjM3LWIxY2Y4MDcwMjM4ZA==\n```\n\n ",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "This is the description of the agent token.\n\n\u003e Changing `description` will cause the resource to be destroyed and re-created.\n"
                },
                "token": {
                    "type": "string",
                    "description": "The value of the created agent token.\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "The UUID of the token.\n"
                }
            },
            "required": [
                "token",
                "uuid"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "This is the description of the agent token.\n\n\u003e Changing `description` will cause the resource to be destroyed and re-created.\n",
                    "willReplaceOnChanges": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AgentToken resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "This is the description of the agent token.\n\n\u003e Changing `description` will cause the resource to be destroyed and re-created.\n",
                        "willReplaceOnChanges": true
                    },
                    "token": {
                        "type": "string",
                        "description": "The value of the created agent token.\n"
                    },
                    "uuid": {
                        "type": "string",
                        "description": "The UUID of the token.\n"
                    }
                },
                "type": "object"
            }
        },
        "buildkite:Organization/settings:Settings": {
            "description": "## # Resource: organization_settings\n\nThis resource allows you to manage the settings for an organization.\n\nYou must be an organization administrator to manage organization settings.\n\nNote: The \"Allowed API IP Addresses\" feature must be enabled on your organization in order to manage the `allowed_api_ip_addresses` attribute.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as buildkite from \"@pulumiverse/buildkite\";\n\nconst testSettings = new buildkite.organization.Settings(\"testSettings\", {allowedApiIpAddresses: [\"1.1.1.1/32\"]});\n```\n```python\nimport pulumi\nimport pulumiverse_buildkite as buildkite\n\ntest_settings = buildkite.organization.Settings(\"testSettings\", allowed_api_ip_addresses=[\"1.1.1.1/32\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Buildkite = Pulumiverse.Buildkite;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var testSettings = new Buildkite.Organization.Settings(\"testSettings\", new()\n    {\n        AllowedApiIpAddresses = new[]\n        {\n            \"1.1.1.1/32\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-buildkite/sdk/go/buildkite/Organization\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Organization.NewSettings(ctx, \"testSettings\", \u0026Organization.SettingsArgs{\n\t\t\tAllowedApiIpAddresses: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"1.1.1.1/32\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.buildkite.Organization.Settings;\nimport com.pulumi.buildkite.Organization.SettingsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var testSettings = new Settings(\"testSettings\", SettingsArgs.builder()        \n            .allowedApiIpAddresses(\"1.1.1.1/32\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  testSettings:\n    type: buildkite:Organization:Settings\n    properties:\n      allowedApiIpAddresses:\n        - 1.1.1.1/32\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nOrganization settings can be imported by passing the organization slug to the import command, along with the identifier of the resource.\n\n```sh\n $ pulumi import buildkite:Organization/settings:Settings test_settings test_org\n```\n\n ",
            "properties": {
                "allowedApiIpAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of IP addresses in CIDR format that are allowed to access the Buildkite API. If not set, all IP addresses are allowed (the same as setting 0.0.0.0/0).\n"
                },
                "uuid": {
                    "type": "string"
                }
            },
            "required": [
                "uuid"
            ],
            "inputProperties": {
                "allowedApiIpAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of IP addresses in CIDR format that are allowed to access the Buildkite API. If not set, all IP addresses are allowed (the same as setting 0.0.0.0/0).\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Settings resources.\n",
                "properties": {
                    "allowedApiIpAddresses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of IP addresses in CIDR format that are allowed to access the Buildkite API. If not set, all IP addresses are allowed (the same as setting 0.0.0.0/0).\n"
                    },
                    "uuid": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "buildkite:Pipeline/pipeline:Pipeline": {
            "description": "## # Resource: pipeline\n\nThis resource allows you to create and manage pipelines for repositories.\n\nBuildkite Documentation: https://buildkite.com/docs/pipelines\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as buildkite from \"@pulumiverse/buildkite\";\nimport * as fs from \"fs\";\n\n// in ./steps.yml:\n// steps:\n//   - label: ':pipeline:'\n//     command: buildkite-agent pipeline upload\nconst repo2 = new buildkite.pipeline.Pipeline(\"repo2\", {\n    repository: \"git@github.com:org/repo2\",\n    steps: fs.readFileSync(\"./steps.yml\"),\n    teams: [{\n        slug: \"everyone\",\n        accessLevel: \"READ_ONLY\",\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumiverse_buildkite as buildkite\n\n# in ./steps.yml:\n# steps:\n#   - label: ':pipeline:'\n#     command: buildkite-agent pipeline upload\nrepo2 = buildkite.pipeline.Pipeline(\"repo2\",\n    repository=\"git@github.com:org/repo2\",\n    steps=(lambda path: open(path).read())(\"./steps.yml\"),\n    teams=[buildkite.pipeline.PipelineTeamArgs(\n        slug=\"everyone\",\n        access_level=\"READ_ONLY\",\n    )])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing Pulumi;\nusing Buildkite = Pulumiverse.Buildkite;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // in ./steps.yml:\n    // steps:\n    //   - label: ':pipeline:'\n    //     command: buildkite-agent pipeline upload\n    var repo2 = new Buildkite.Pipeline.Pipeline(\"repo2\", new()\n    {\n        Repository = \"git@github.com:org/repo2\",\n        Steps = File.ReadAllText(\"./steps.yml\"),\n        Teams = new[]\n        {\n            new Buildkite.Pipeline.Inputs.PipelineTeamArgs\n            {\n                Slug = \"everyone\",\n                AccessLevel = \"READ_ONLY\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"os\"\n\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-buildkite/sdk/go/buildkite/Pipeline\"\n)\n\nfunc readFileOrPanic(path string) pulumi.StringPtrInput {\n\tdata, err := os.ReadFile(path)\n\tif err != nil {\n\t\tpanic(err.Error())\n\t}\n\treturn pulumi.String(string(data))\n}\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Pipeline.NewPipeline(ctx, \"repo2\", \u0026Pipeline.PipelineArgs{\n\t\t\tRepository: pulumi.String(\"git@github.com:org/repo2\"),\n\t\t\tSteps:      readFileOrPanic(\"./steps.yml\"),\n\t\t\tTeams: pipeline.PipelineTeamArray{\n\t\t\t\t\u0026pipeline.PipelineTeamArgs{\n\t\t\t\t\tSlug:        pulumi.String(\"everyone\"),\n\t\t\t\t\tAccessLevel: pulumi.String(\"READ_ONLY\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.buildkite.Pipeline.Pipeline;\nimport com.pulumi.buildkite.Pipeline.PipelineArgs;\nimport com.pulumi.buildkite.Pipeline.inputs.PipelineTeamArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var repo2 = new Pipeline(\"repo2\", PipelineArgs.builder()        \n            .repository(\"git@github.com:org/repo2\")\n            .steps(Files.readString(Paths.get(\"./steps.yml\")))\n            .teams(PipelineTeamArgs.builder()\n                .slug(\"everyone\")\n                .accessLevel(\"READ_ONLY\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # in ./steps.yml:\n  # steps:\n  #   - label: ':pipeline:'\n  #     command: buildkite-agent pipeline upload\n  repo2:\n    type: buildkite:Pipeline:Pipeline\n    properties:\n      repository: git@github.com:org/repo2\n      steps:\n        fn::readFile: ./steps.yml\n      teams:\n        - slug: everyone\n          accessLevel: READ_ONLY\n```\n\n{{% /example %}}\n{{% example %}}\n### With Command Timeouts\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as buildkite from \"@pulumiverse/buildkite\";\nimport * as fs from \"fs\";\n\nconst testNew = new buildkite.pipeline.Pipeline(\"testNew\", {\n    repository: \"https://github.com/buildkite/terraform-provider-buildkite.git\",\n    steps: fs.readFileSync(\"./deploy-steps.yml\"),\n    defaultTimeoutInMinutes: 60,\n    maximumTimeoutInMinutes: 120,\n});\n```\n```python\nimport pulumi\nimport pulumiverse_buildkite as buildkite\n\ntest_new = buildkite.pipeline.Pipeline(\"testNew\",\n    repository=\"https://github.com/buildkite/terraform-provider-buildkite.git\",\n    steps=(lambda path: open(path).read())(\"./deploy-steps.yml\"),\n    default_timeout_in_minutes=60,\n    maximum_timeout_in_minutes=120)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing Pulumi;\nusing Buildkite = Pulumiverse.Buildkite;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var testNew = new Buildkite.Pipeline.Pipeline(\"testNew\", new()\n    {\n        Repository = \"https://github.com/buildkite/terraform-provider-buildkite.git\",\n        Steps = File.ReadAllText(\"./deploy-steps.yml\"),\n        DefaultTimeoutInMinutes = 60,\n        MaximumTimeoutInMinutes = 120,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"os\"\n\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-buildkite/sdk/go/buildkite/Pipeline\"\n)\n\nfunc readFileOrPanic(path string) pulumi.StringPtrInput {\n\tdata, err := os.ReadFile(path)\n\tif err != nil {\n\t\tpanic(err.Error())\n\t}\n\treturn pulumi.String(string(data))\n}\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Pipeline.NewPipeline(ctx, \"testNew\", \u0026Pipeline.PipelineArgs{\n\t\t\tRepository:              pulumi.String(\"https://github.com/buildkite/terraform-provider-buildkite.git\"),\n\t\t\tSteps:                   readFileOrPanic(\"./deploy-steps.yml\"),\n\t\t\tDefaultTimeoutInMinutes: pulumi.Int(60),\n\t\t\tMaximumTimeoutInMinutes: pulumi.Int(120),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.buildkite.Pipeline.Pipeline;\nimport com.pulumi.buildkite.Pipeline.PipelineArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var testNew = new Pipeline(\"testNew\", PipelineArgs.builder()        \n            .repository(\"https://github.com/buildkite/terraform-provider-buildkite.git\")\n            .steps(Files.readString(Paths.get(\"./deploy-steps.yml\")))\n            .defaultTimeoutInMinutes(60)\n            .maximumTimeoutInMinutes(120)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  testNew:\n    type: buildkite:Pipeline:Pipeline\n    properties:\n      repository: https://github.com/buildkite/terraform-provider-buildkite.git\n      steps:\n        fn::readFile: ./deploy-steps.yml\n      defaultTimeoutInMinutes: 60\n      maximumTimeoutInMinutes: 120\n```\n\nCurrently, the `default_timeout_in_minutes` and `maximum_timeout_in_minutes` will be retained in state even if removed from the configuration. In order to remove them, you must set them to `0` in either the configuration or the web UI.\n\n{{% /example %}}\n{{% example %}}\n### With Deletion Protection\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as buildkite from \"@pulumiverse/buildkite\";\nimport * as fs from \"fs\";\n\nconst testNew = new buildkite.pipeline.Pipeline(\"testNew\", {\n    repository: \"https://github.com/buildkite/terraform-provider-buildkite.git\",\n    steps: fs.readFileSync(\"./deploy-steps.yml\"),\n    deletionProtection: true,\n});\n```\n```python\nimport pulumi\nimport pulumiverse_buildkite as buildkite\n\ntest_new = buildkite.pipeline.Pipeline(\"testNew\",\n    repository=\"https://github.com/buildkite/terraform-provider-buildkite.git\",\n    steps=(lambda path: open(path).read())(\"./deploy-steps.yml\"),\n    deletion_protection=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing Pulumi;\nusing Buildkite = Pulumiverse.Buildkite;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var testNew = new Buildkite.Pipeline.Pipeline(\"testNew\", new()\n    {\n        Repository = \"https://github.com/buildkite/terraform-provider-buildkite.git\",\n        Steps = File.ReadAllText(\"./deploy-steps.yml\"),\n        DeletionProtection = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"os\"\n\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-buildkite/sdk/go/buildkite/Pipeline\"\n)\n\nfunc readFileOrPanic(path string) pulumi.StringPtrInput {\n\tdata, err := os.ReadFile(path)\n\tif err != nil {\n\t\tpanic(err.Error())\n\t}\n\treturn pulumi.String(string(data))\n}\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Pipeline.NewPipeline(ctx, \"testNew\", \u0026Pipeline.PipelineArgs{\n\t\t\tRepository:         pulumi.String(\"https://github.com/buildkite/terraform-provider-buildkite.git\"),\n\t\t\tSteps:              readFileOrPanic(\"./deploy-steps.yml\"),\n\t\t\tDeletionProtection: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.buildkite.Pipeline.Pipeline;\nimport com.pulumi.buildkite.Pipeline.PipelineArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var testNew = new Pipeline(\"testNew\", PipelineArgs.builder()        \n            .repository(\"https://github.com/buildkite/terraform-provider-buildkite.git\")\n            .steps(Files.readString(Paths.get(\"./deploy-steps.yml\")))\n            .deletionProtection(true)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  testNew:\n    type: buildkite:Pipeline:Pipeline\n    properties:\n      repository: https://github.com/buildkite/terraform-provider-buildkite.git\n      steps:\n        fn::readFile: ./deploy-steps.yml\n      deletionProtection: true\n```\n\n`deletion_protection` will block `destroy` actions on the **pipeline**. Attached resources, such as `schedules` will still be destroyed.\n\n{{% /example %}}\n{{% example %}}\n### With GitHub Provider Settings\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as buildkite from \"@pulumiverse/buildkite\";\nimport * as fs from \"fs\";\n\n// Pipeline that should not be triggered from a GitHub webhook\nconst repo2_deploy = new buildkite.pipeline.Pipeline(\"repo2-deploy\", {\n    repository: \"git@github.com:org/repo2\",\n    steps: fs.readFileSync(\"./deploy-steps.yml\"),\n    providerSettings: {\n        triggerMode: \"none\",\n    },\n});\n// Release pipeline (triggered only when tags are pushed)\nconst repo2_release = new buildkite.pipeline.Pipeline(\"repo2-release\", {\n    repository: \"git@github.com:org/repo2\",\n    steps: fs.readFileSync(\"./release-steps.yml\"),\n    providerSettings: {\n        buildBranches: false,\n        buildTags: true,\n        buildPullRequests: false,\n        triggerMode: \"code\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumiverse_buildkite as buildkite\n\n# Pipeline that should not be triggered from a GitHub webhook\nrepo2_deploy = buildkite.pipeline.Pipeline(\"repo2-deploy\",\n    repository=\"git@github.com:org/repo2\",\n    steps=(lambda path: open(path).read())(\"./deploy-steps.yml\"),\n    provider_settings=buildkite.pipeline.PipelineProviderSettingsArgs(\n        trigger_mode=\"none\",\n    ))\n# Release pipeline (triggered only when tags are pushed)\nrepo2_release = buildkite.pipeline.Pipeline(\"repo2-release\",\n    repository=\"git@github.com:org/repo2\",\n    steps=(lambda path: open(path).read())(\"./release-steps.yml\"),\n    provider_settings=buildkite.pipeline.PipelineProviderSettingsArgs(\n        build_branches=False,\n        build_tags=True,\n        build_pull_requests=False,\n        trigger_mode=\"code\",\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing Pulumi;\nusing Buildkite = Pulumiverse.Buildkite;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Pipeline that should not be triggered from a GitHub webhook\n    var repo2_deploy = new Buildkite.Pipeline.Pipeline(\"repo2-deploy\", new()\n    {\n        Repository = \"git@github.com:org/repo2\",\n        Steps = File.ReadAllText(\"./deploy-steps.yml\"),\n        ProviderSettings = new Buildkite.Pipeline.Inputs.PipelineProviderSettingsArgs\n        {\n            TriggerMode = \"none\",\n        },\n    });\n\n    // Release pipeline (triggered only when tags are pushed)\n    var repo2_release = new Buildkite.Pipeline.Pipeline(\"repo2-release\", new()\n    {\n        Repository = \"git@github.com:org/repo2\",\n        Steps = File.ReadAllText(\"./release-steps.yml\"),\n        ProviderSettings = new Buildkite.Pipeline.Inputs.PipelineProviderSettingsArgs\n        {\n            BuildBranches = false,\n            BuildTags = true,\n            BuildPullRequests = false,\n            TriggerMode = \"code\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"os\"\n\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-buildkite/sdk/go/buildkite/Pipeline\"\n)\n\nfunc readFileOrPanic(path string) pulumi.StringPtrInput {\n\tdata, err := os.ReadFile(path)\n\tif err != nil {\n\t\tpanic(err.Error())\n\t}\n\treturn pulumi.String(string(data))\n}\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Pipeline.NewPipeline(ctx, \"repo2-deploy\", \u0026Pipeline.PipelineArgs{\n\t\t\tRepository: pulumi.String(\"git@github.com:org/repo2\"),\n\t\t\tSteps:      readFileOrPanic(\"./deploy-steps.yml\"),\n\t\t\tProviderSettings: \u0026pipeline.PipelineProviderSettingsArgs{\n\t\t\t\tTriggerMode: pulumi.String(\"none\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = Pipeline.NewPipeline(ctx, \"repo2-release\", \u0026Pipeline.PipelineArgs{\n\t\t\tRepository: pulumi.String(\"git@github.com:org/repo2\"),\n\t\t\tSteps:      readFileOrPanic(\"./release-steps.yml\"),\n\t\t\tProviderSettings: \u0026pipeline.PipelineProviderSettingsArgs{\n\t\t\t\tBuildBranches:     pulumi.Bool(false),\n\t\t\t\tBuildTags:         pulumi.Bool(true),\n\t\t\t\tBuildPullRequests: pulumi.Bool(false),\n\t\t\t\tTriggerMode:       pulumi.String(\"code\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.buildkite.Pipeline.Pipeline;\nimport com.pulumi.buildkite.Pipeline.PipelineArgs;\nimport com.pulumi.buildkite.Pipeline.inputs.PipelineProviderSettingsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var repo2_deploy = new Pipeline(\"repo2-deploy\", PipelineArgs.builder()        \n            .repository(\"git@github.com:org/repo2\")\n            .steps(Files.readString(Paths.get(\"./deploy-steps.yml\")))\n            .providerSettings(PipelineProviderSettingsArgs.builder()\n                .triggerMode(\"none\")\n                .build())\n            .build());\n\n        var repo2_release = new Pipeline(\"repo2-release\", PipelineArgs.builder()        \n            .repository(\"git@github.com:org/repo2\")\n            .steps(Files.readString(Paths.get(\"./release-steps.yml\")))\n            .providerSettings(PipelineProviderSettingsArgs.builder()\n                .buildBranches(false)\n                .buildTags(true)\n                .buildPullRequests(false)\n                .triggerMode(\"code\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Pipeline that should not be triggered from a GitHub webhook\n  repo2-deploy:\n    type: buildkite:Pipeline:Pipeline\n    properties:\n      repository: git@github.com:org/repo2\n      steps:\n        fn::readFile: ./deploy-steps.yml\n      providerSettings:\n        triggerMode: none\n  # Release pipeline (triggered only when tags are pushed)\n  repo2-release:\n    type: buildkite:Pipeline:Pipeline\n    properties:\n      repository: git@github.com:org/repo2\n      steps:\n        fn::readFile: ./release-steps.yml\n      providerSettings:\n        buildBranches: false\n        buildTags: true\n        buildPullRequests: false\n        triggerMode: code\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nPipelines can be imported using the `GraphQL ID` (not UUID), e.g.\n\n```sh\n $ pulumi import buildkite:Pipeline/pipeline:Pipeline fleet UGlwZWxpbmUtLS00MzVjYWQ1OC1lODFkLTQ1YWYtODYzNy1iMWNmODA3MDIzOGQ=\n```\n\n ",
            "properties": {
                "allowRebuilds": {
                    "type": "boolean",
                    "description": "A boolean on whether or not to allow rebuilds for the pipeline.\n"
                },
                "badgeUrl": {
                    "type": "string",
                    "description": "The pipeline's last build status so you can display build status badge.\n"
                },
                "branchConfiguration": {
                    "type": "string",
                    "description": "Limit which branches and tags cause new builds to be created, either via a code push or via the Builds REST API.\n"
                },
                "cancelIntermediateBuilds": {
                    "type": "boolean",
                    "description": "A boolean to enable automatically cancelling any running builds on the same branch when a new build is created.\n"
                },
                "cancelIntermediateBuildsBranchFilter": {
                    "type": "string",
                    "description": "Limit which branches build cancelling applies to, for example !master will ensure that the master branch won't have its builds automatically cancelled.\n"
                },
                "clusterId": {
                    "type": "string",
                    "description": "The GraphQL ID of the cluster you want to use for the pipeline.\n"
                },
                "defaultBranch": {
                    "type": "string",
                    "description": "The default branch to prefill when new builds are created or triggered, usually main or master but can be anything.\n"
                },
                "defaultTimeoutInMinutes": {
                    "type": "integer",
                    "description": "The default timeout for commands in this pipeline, in minutes.\n"
                },
                "deletionProtection": {
                    "type": "boolean",
                    "description": "Set to either `true` or `false`. When set to `true`, `destroy` actions on a pipeline will be blocked and fail with a message \"Deletion protection is enabled for pipeline: \u003cpipeline name\u003e\"\n"
                },
                "description": {
                    "type": "string",
                    "description": "A description of the pipeline.\n"
                },
                "maximumTimeoutInMinutes": {
                    "type": "integer",
                    "description": "The maximum timeout for commands in this pipeline, in minutes.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the pipeline.\n"
                },
                "providerSettings": {
                    "$ref": "#/types/buildkite:Pipeline/PipelineProviderSettings:PipelineProviderSettings",
                    "description": "Source control provider settings for the pipeline. See Provider Settings Configuration below for details.\n"
                },
                "repository": {
                    "type": "string",
                    "description": "The git URL of the repository.\n"
                },
                "skipIntermediateBuilds": {
                    "type": "boolean",
                    "description": "A boolean to enable automatically skipping any unstarted builds on the same branch when a new build is created.\n"
                },
                "skipIntermediateBuildsBranchFilter": {
                    "type": "string",
                    "description": "Limit which branches build skipping applies to, for example `!master` will ensure that the master branch won't have its builds automatically skipped.\n"
                },
                "slug": {
                    "type": "string",
                    "description": "The buildkite slug of the team.\n"
                },
                "steps": {
                    "type": "string",
                    "description": "The string YAML steps to run the pipeline. Defaults to `buildkite-agent pipeline upload` if not specified.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "teams": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/buildkite:Pipeline/PipelineTeam:PipelineTeam"
                    },
                    "description": "Set team access for the pipeline. Can be specified multiple times for each team. See Teams Configuration below for details.\n"
                },
                "webhookUrl": {
                    "type": "string",
                    "description": "The Buildkite webhook URL to configure on the repository to trigger builds on this pipeline.\n"
                }
            },
            "required": [
                "badgeUrl",
                "name",
                "providerSettings",
                "repository",
                "slug",
                "webhookUrl"
            ],
            "inputProperties": {
                "allowRebuilds": {
                    "type": "boolean",
                    "description": "A boolean on whether or not to allow rebuilds for the pipeline.\n"
                },
                "branchConfiguration": {
                    "type": "string",
                    "description": "Limit which branches and tags cause new builds to be created, either via a code push or via the Builds REST API.\n"
                },
                "cancelIntermediateBuilds": {
                    "type": "boolean",
                    "description": "A boolean to enable automatically cancelling any running builds on the same branch when a new build is created.\n"
                },
                "cancelIntermediateBuildsBranchFilter": {
                    "type": "string",
                    "description": "Limit which branches build cancelling applies to, for example !master will ensure that the master branch won't have its builds automatically cancelled.\n"
                },
                "clusterId": {
                    "type": "string",
                    "description": "The GraphQL ID of the cluster you want to use for the pipeline.\n"
                },
                "defaultBranch": {
                    "type": "string",
                    "description": "The default branch to prefill when new builds are created or triggered, usually main or master but can be anything.\n"
                },
                "defaultTimeoutInMinutes": {
                    "type": "integer",
                    "description": "The default timeout for commands in this pipeline, in minutes.\n"
                },
                "deletionProtection": {
                    "type": "boolean",
                    "description": "Set to either `true` or `false`. When set to `true`, `destroy` actions on a pipeline will be blocked and fail with a message \"Deletion protection is enabled for pipeline: \u003cpipeline name\u003e\"\n"
                },
                "description": {
                    "type": "string",
                    "description": "A description of the pipeline.\n"
                },
                "maximumTimeoutInMinutes": {
                    "type": "integer",
                    "description": "The maximum timeout for commands in this pipeline, in minutes.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the pipeline.\n"
                },
                "providerSettings": {
                    "$ref": "#/types/buildkite:Pipeline/PipelineProviderSettings:PipelineProviderSettings",
                    "description": "Source control provider settings for the pipeline. See Provider Settings Configuration below for details.\n"
                },
                "repository": {
                    "type": "string",
                    "description": "The git URL of the repository.\n"
                },
                "skipIntermediateBuilds": {
                    "type": "boolean",
                    "description": "A boolean to enable automatically skipping any unstarted builds on the same branch when a new build is created.\n"
                },
                "skipIntermediateBuildsBranchFilter": {
                    "type": "string",
                    "description": "Limit which branches build skipping applies to, for example `!master` will ensure that the master branch won't have its builds automatically skipped.\n"
                },
                "steps": {
                    "type": "string",
                    "description": "The string YAML steps to run the pipeline. Defaults to `buildkite-agent pipeline upload` if not specified.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "teams": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/buildkite:Pipeline/PipelineTeam:PipelineTeam"
                    },
                    "description": "Set team access for the pipeline. Can be specified multiple times for each team. See Teams Configuration below for details.\n"
                }
            },
            "requiredInputs": [
                "repository"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Pipeline resources.\n",
                "properties": {
                    "allowRebuilds": {
                        "type": "boolean",
                        "description": "A boolean on whether or not to allow rebuilds for the pipeline.\n"
                    },
                    "badgeUrl": {
                        "type": "string",
                        "description": "The pipeline's last build status so you can display build status badge.\n"
                    },
                    "branchConfiguration": {
                        "type": "string",
                        "description": "Limit which branches and tags cause new builds to be created, either via a code push or via the Builds REST API.\n"
                    },
                    "cancelIntermediateBuilds": {
                        "type": "boolean",
                        "description": "A boolean to enable automatically cancelling any running builds on the same branch when a new build is created.\n"
                    },
                    "cancelIntermediateBuildsBranchFilter": {
                        "type": "string",
                        "description": "Limit which branches build cancelling applies to, for example !master will ensure that the master branch won't have its builds automatically cancelled.\n"
                    },
                    "clusterId": {
                        "type": "string",
                        "description": "The GraphQL ID of the cluster you want to use for the pipeline.\n"
                    },
                    "defaultBranch": {
                        "type": "string",
                        "description": "The default branch to prefill when new builds are created or triggered, usually main or master but can be anything.\n"
                    },
                    "defaultTimeoutInMinutes": {
                        "type": "integer",
                        "description": "The default timeout for commands in this pipeline, in minutes.\n"
                    },
                    "deletionProtection": {
                        "type": "boolean",
                        "description": "Set to either `true` or `false`. When set to `true`, `destroy` actions on a pipeline will be blocked and fail with a message \"Deletion protection is enabled for pipeline: \u003cpipeline name\u003e\"\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "A description of the pipeline.\n"
                    },
                    "maximumTimeoutInMinutes": {
                        "type": "integer",
                        "description": "The maximum timeout for commands in this pipeline, in minutes.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the pipeline.\n"
                    },
                    "providerSettings": {
                        "$ref": "#/types/buildkite:Pipeline/PipelineProviderSettings:PipelineProviderSettings",
                        "description": "Source control provider settings for the pipeline. See Provider Settings Configuration below for details.\n"
                    },
                    "repository": {
                        "type": "string",
                        "description": "The git URL of the repository.\n"
                    },
                    "skipIntermediateBuilds": {
                        "type": "boolean",
                        "description": "A boolean to enable automatically skipping any unstarted builds on the same branch when a new build is created.\n"
                    },
                    "skipIntermediateBuildsBranchFilter": {
                        "type": "string",
                        "description": "Limit which branches build skipping applies to, for example `!master` will ensure that the master branch won't have its builds automatically skipped.\n"
                    },
                    "slug": {
                        "type": "string",
                        "description": "The buildkite slug of the team.\n"
                    },
                    "steps": {
                        "type": "string",
                        "description": "The string YAML steps to run the pipeline. Defaults to `buildkite-agent pipeline upload` if not specified.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "teams": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/buildkite:Pipeline/PipelineTeam:PipelineTeam"
                        },
                        "description": "Set team access for the pipeline. Can be specified multiple times for each team. See Teams Configuration below for details.\n"
                    },
                    "webhookUrl": {
                        "type": "string",
                        "description": "The Buildkite webhook URL to configure on the repository to trigger builds on this pipeline.\n"
                    }
                },
                "type": "object"
            }
        },
        "buildkite:Pipeline/schedule:Schedule": {
            "description": "## # Resource: pipeline_schedule\n\nThis resource allows you to create and manage pipeline schedules.\n\nBuildkite Documentation: https://buildkite.com/docs/pipelines/scheduled-builds\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as buildkite from \"@pulumiverse/buildkite\";\n\nconst repo2Nightly = new buildkite.pipeline.Schedule(\"repo2Nightly\", {\n    pipelineId: buildkite_pipeline.repo2.id,\n    label: \"Nightly build\",\n    cronline: \"@midnight\",\n    branch: buildkite_pipeline.repo2.default_branch,\n});\n```\n```python\nimport pulumi\nimport pulumiverse_buildkite as buildkite\n\nrepo2_nightly = buildkite.pipeline.Schedule(\"repo2Nightly\",\n    pipeline_id=buildkite_pipeline[\"repo2\"][\"id\"],\n    label=\"Nightly build\",\n    cronline=\"@midnight\",\n    branch=buildkite_pipeline[\"repo2\"][\"default_branch\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Buildkite = Pulumiverse.Buildkite;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var repo2Nightly = new Buildkite.Pipeline.Schedule(\"repo2Nightly\", new()\n    {\n        PipelineId = buildkite_pipeline.Repo2.Id,\n        Label = \"Nightly build\",\n        Cronline = \"@midnight\",\n        Branch = buildkite_pipeline.Repo2.Default_branch,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-buildkite/sdk/go/buildkite/Pipeline\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Pipeline.NewSchedule(ctx, \"repo2Nightly\", \u0026Pipeline.ScheduleArgs{\n\t\t\tPipelineId: pulumi.Any(buildkite_pipeline.Repo2.Id),\n\t\t\tLabel:      pulumi.String(\"Nightly build\"),\n\t\t\tCronline:   pulumi.String(\"@midnight\"),\n\t\t\tBranch:     pulumi.Any(buildkite_pipeline.Repo2.Default_branch),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.buildkite.Pipeline.Schedule;\nimport com.pulumi.buildkite.Pipeline.ScheduleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var repo2Nightly = new Schedule(\"repo2Nightly\", ScheduleArgs.builder()        \n            .pipelineId(buildkite_pipeline.repo2().id())\n            .label(\"Nightly build\")\n            .cronline(\"@midnight\")\n            .branch(buildkite_pipeline.repo2().default_branch())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  repo2Nightly:\n    type: buildkite:Pipeline:Schedule\n    properties:\n      pipelineId: ${buildkite_pipeline.repo2.id}\n      label: Nightly build\n      cronline: '@midnight'\n      branch: ${buildkite_pipeline.repo2.default_branch}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nPipeline schedules can be imported using a slug (which consists of `$BUILDKITE_ORGANIZATION_SLUG/$BUILDKITE_PIPELINE_SLUG/$PIPELINE_SCHEDULE_UUID`), e.g.\n\n```sh\n $ pulumi import buildkite:Pipeline/schedule:Schedule test myorg/test/1be3e7c7-1e03-4011-accf-b2d8eec90222\n```\n\n ",
            "properties": {
                "branch": {
                    "type": "string",
                    "description": "The branch to use for the build.\n"
                },
                "commit": {
                    "type": "string",
                    "description": "The commit ref to use for the build.\n"
                },
                "cronline": {
                    "type": "string",
                    "description": "Schedule interval (see [docs](https://buildkite.com/docs/pipelines/scheduled-builds#schedule-intervals)).\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the schedule should run.\n"
                },
                "env": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A map of environment variables to use for the build.\n"
                },
                "label": {
                    "type": "string",
                    "description": "Schedule label.\n"
                },
                "message": {
                    "type": "string",
                    "description": "The message to use for the build.\n"
                },
                "pipelineId": {
                    "type": "string"
                },
                "uuid": {
                    "type": "string",
                    "description": "The UUID of the pipeline schedule\n"
                }
            },
            "required": [
                "branch",
                "cronline",
                "label",
                "message",
                "pipelineId",
                "uuid"
            ],
            "inputProperties": {
                "branch": {
                    "type": "string",
                    "description": "The branch to use for the build.\n"
                },
                "commit": {
                    "type": "string",
                    "description": "The commit ref to use for the build.\n"
                },
                "cronline": {
                    "type": "string",
                    "description": "Schedule interval (see [docs](https://buildkite.com/docs/pipelines/scheduled-builds#schedule-intervals)).\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the schedule should run.\n"
                },
                "env": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A map of environment variables to use for the build.\n"
                },
                "label": {
                    "type": "string",
                    "description": "Schedule label.\n"
                },
                "message": {
                    "type": "string",
                    "description": "The message to use for the build.\n"
                },
                "pipelineId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "branch",
                "cronline",
                "label",
                "pipelineId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Schedule resources.\n",
                "properties": {
                    "branch": {
                        "type": "string",
                        "description": "The branch to use for the build.\n"
                    },
                    "commit": {
                        "type": "string",
                        "description": "The commit ref to use for the build.\n"
                    },
                    "cronline": {
                        "type": "string",
                        "description": "Schedule interval (see [docs](https://buildkite.com/docs/pipelines/scheduled-builds#schedule-intervals)).\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Whether the schedule should run.\n"
                    },
                    "env": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A map of environment variables to use for the build.\n"
                    },
                    "label": {
                        "type": "string",
                        "description": "Schedule label.\n"
                    },
                    "message": {
                        "type": "string",
                        "description": "The message to use for the build.\n"
                    },
                    "pipelineId": {
                        "type": "string"
                    },
                    "uuid": {
                        "type": "string",
                        "description": "The UUID of the pipeline schedule\n"
                    }
                },
                "type": "object"
            }
        },
        "buildkite:Team/member:Member": {
            "description": "## # Resource: team_member\n\nThis resource allows manage team membership for existing organization users.\n\nThe user must already be part of the organization to which you are managing team membership. This will not invite a new user to the organization.\n\nBuildkite Documentation: https://buildkite.com/docs/pipelines/permissions\n\nNote: You must first enable Teams on your organization.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as buildkite from \"@pulumiverse/buildkite\";\n\nconst team = new buildkite.team.Team(\"team\", {\n    privacy: \"VISIBLE\",\n    defaultTeam: true,\n    defaultMemberRole: \"MEMBER\",\n});\nconst aSmith = new buildkite.team.Member(\"aSmith\", {\n    role: \"MEMBER\",\n    teamId: team.id,\n    userId: \"VXNlci0tLWRlOTdmMjBiLWJkZmMtNGNjOC1hOTcwLTY1ODNiZTk2ZGEyYQ==\",\n});\n```\n```python\nimport pulumi\nimport pulumiverse_buildkite as buildkite\n\nteam = buildkite.team.Team(\"team\",\n    privacy=\"VISIBLE\",\n    default_team=True,\n    default_member_role=\"MEMBER\")\na_smith = buildkite.team.Member(\"aSmith\",\n    role=\"MEMBER\",\n    team_id=team.id,\n    user_id=\"VXNlci0tLWRlOTdmMjBiLWJkZmMtNGNjOC1hOTcwLTY1ODNiZTk2ZGEyYQ==\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Buildkite = Pulumiverse.Buildkite;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var team = new Buildkite.Team.Team(\"team\", new()\n    {\n        Privacy = \"VISIBLE\",\n        DefaultTeam = true,\n        DefaultMemberRole = \"MEMBER\",\n    });\n\n    var aSmith = new Buildkite.Team.Member(\"aSmith\", new()\n    {\n        Role = \"MEMBER\",\n        TeamId = team.Id,\n        UserId = \"VXNlci0tLWRlOTdmMjBiLWJkZmMtNGNjOC1hOTcwLTY1ODNiZTk2ZGEyYQ==\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-buildkite/sdk/go/buildkite/Team\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tteam, err := Team.NewTeam(ctx, \"team\", \u0026Team.TeamArgs{\n\t\t\tPrivacy:           pulumi.String(\"VISIBLE\"),\n\t\t\tDefaultTeam:       pulumi.Bool(true),\n\t\t\tDefaultMemberRole: pulumi.String(\"MEMBER\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = Team.NewMember(ctx, \"aSmith\", \u0026Team.MemberArgs{\n\t\t\tRole:   pulumi.String(\"MEMBER\"),\n\t\t\tTeamId: team.ID(),\n\t\t\tUserId: pulumi.String(\"VXNlci0tLWRlOTdmMjBiLWJkZmMtNGNjOC1hOTcwLTY1ODNiZTk2ZGEyYQ==\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.buildkite.Team.Team;\nimport com.pulumi.buildkite.Team.TeamArgs;\nimport com.pulumi.buildkite.Team.Member;\nimport com.pulumi.buildkite.Team.MemberArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var team = new Team(\"team\", TeamArgs.builder()        \n            .privacy(\"VISIBLE\")\n            .defaultTeam(true)\n            .defaultMemberRole(\"MEMBER\")\n            .build());\n\n        var aSmith = new Member(\"aSmith\", MemberArgs.builder()        \n            .role(\"MEMBER\")\n            .teamId(team.id())\n            .userId(\"VXNlci0tLWRlOTdmMjBiLWJkZmMtNGNjOC1hOTcwLTY1ODNiZTk2ZGEyYQ==\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  team:\n    type: buildkite:Team:Team\n    properties:\n      privacy: VISIBLE\n      defaultTeam: true\n      defaultMemberRole: MEMBER\n  aSmith:\n    type: buildkite:Team:Member\n    properties:\n      role: MEMBER\n      teamId: ${team.id}\n      userId: VXNlci0tLWRlOTdmMjBiLWJkZmMtNGNjOC1hOTcwLTY1ODNiZTk2ZGEyYQ==\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nTeam members can be imported using the GraphQL ID of the membership. Note this is different to the ID of the user.\n\n```sh\n $ pulumi import buildkite:Team/member:Member a_smith VGVhbU1lbWJlci0tLTVlZDEyMmY2LTM2NjQtNDI1MS04YzMwLTc4NjRiMDdiZDQ4Zg==\n```\n\n To find the ID of a team member you are trying to import you can use the GraphQL snippet below. A link to this snippet can also be found at https://buildkite.com/user/graphql/console/c6a2cc65-dc59-49df-95c6-7167b68dbd5d. You will need fo fill in the organization slug and search terms for teams and members. Both search terms work on the name of the associated object. graphql query {\n\n organization(slug\"\") {\n\n\n\n teams(first2, search\"\") {\n\n\n\n\n\n edges {\n\n\n\n\n\n\n\n node {\n\n\n\n\n\n\n\n\n\n members(first2, search\"\") {\n\n\n\n\n\n\n\n\n\n\n\n edges {\n\n\n\n\n\n\n\n\n\n\n\n\n\n node {\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n id\n\n\n\n\n\n\n\n\n\n\n\n\n\n }\n\n\n\n\n\n\n\n\n\n\n\n }\n\n\n\n\n\n\n\n\n\n }\n\n\n\n\n\n\n\n }\n\n\n\n\n\n }\n\n\n\n }\n\n } } ",
            "properties": {
                "role": {
                    "type": "string",
                    "description": "Either MEMBER or MAINTAINER.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "The GraphQL ID of the team to add to/remove from.\n"
                },
                "userId": {
                    "type": "string",
                    "description": "The GraphQL ID of the user to add/remove.\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "The UUID for the team membership.\n"
                }
            },
            "required": [
                "role",
                "teamId",
                "userId",
                "uuid"
            ],
            "inputProperties": {
                "role": {
                    "type": "string",
                    "description": "Either MEMBER or MAINTAINER.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "The GraphQL ID of the team to add to/remove from.\n"
                },
                "userId": {
                    "type": "string",
                    "description": "The GraphQL ID of the user to add/remove.\n"
                }
            },
            "requiredInputs": [
                "role",
                "teamId",
                "userId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Member resources.\n",
                "properties": {
                    "role": {
                        "type": "string",
                        "description": "Either MEMBER or MAINTAINER.\n"
                    },
                    "teamId": {
                        "type": "string",
                        "description": "The GraphQL ID of the team to add to/remove from.\n"
                    },
                    "userId": {
                        "type": "string",
                        "description": "The GraphQL ID of the user to add/remove.\n"
                    },
                    "uuid": {
                        "type": "string",
                        "description": "The UUID for the team membership.\n"
                    }
                },
                "type": "object"
            }
        },
        "buildkite:Team/team:Team": {
            "description": "## # Resource: team\n\nThis resource allows you to create and manage teams.\n\nBuildkite Documentation: https://buildkite.com/docs/pipelines/permissions\n\nNote: You must first enable Teams on your organization.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as buildkite from \"@pulumiverse/buildkite\";\n\nconst team = new buildkite.team.Team(\"team\", {\n    defaultMemberRole: \"MEMBER\",\n    defaultTeam: true,\n    privacy: \"VISIBLE\",\n});\n```\n```python\nimport pulumi\nimport pulumiverse_buildkite as buildkite\n\nteam = buildkite.team.Team(\"team\",\n    default_member_role=\"MEMBER\",\n    default_team=True,\n    privacy=\"VISIBLE\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Buildkite = Pulumiverse.Buildkite;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var team = new Buildkite.Team.Team(\"team\", new()\n    {\n        DefaultMemberRole = \"MEMBER\",\n        DefaultTeam = true,\n        Privacy = \"VISIBLE\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-buildkite/sdk/go/buildkite/Team\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Team.NewTeam(ctx, \"team\", \u0026Team.TeamArgs{\n\t\t\tDefaultMemberRole: pulumi.String(\"MEMBER\"),\n\t\t\tDefaultTeam:       pulumi.Bool(true),\n\t\t\tPrivacy:           pulumi.String(\"VISIBLE\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.buildkite.Team.Team;\nimport com.pulumi.buildkite.Team.TeamArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var team = new Team(\"team\", TeamArgs.builder()        \n            .defaultMemberRole(\"MEMBER\")\n            .defaultTeam(true)\n            .privacy(\"VISIBLE\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  team:\n    type: buildkite:Team:Team\n    properties:\n      defaultMemberRole: MEMBER\n      defaultTeam: true\n      privacy: VISIBLE\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "defaultMemberRole": {
                    "type": "string",
                    "description": "Default role to assign to a team member.\n"
                },
                "defaultTeam": {
                    "type": "boolean",
                    "description": "Whether to assign this team to a user by default.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description to assign to the team.\n"
                },
                "membersCanCreatePipelines": {
                    "type": "boolean",
                    "description": "Whether team members can create.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the team.\n"
                },
                "privacy": {
                    "type": "string",
                    "description": "The privacy level to set the team too.\n"
                },
                "slug": {
                    "type": "string",
                    "description": "The name of the team.\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "The UUID for the team.\n"
                }
            },
            "required": [
                "defaultMemberRole",
                "defaultTeam",
                "name",
                "privacy",
                "slug",
                "uuid"
            ],
            "inputProperties": {
                "defaultMemberRole": {
                    "type": "string",
                    "description": "Default role to assign to a team member.\n"
                },
                "defaultTeam": {
                    "type": "boolean",
                    "description": "Whether to assign this team to a user by default.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description to assign to the team.\n"
                },
                "membersCanCreatePipelines": {
                    "type": "boolean",
                    "description": "Whether team members can create.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the team.\n"
                },
                "privacy": {
                    "type": "string",
                    "description": "The privacy level to set the team too.\n"
                }
            },
            "requiredInputs": [
                "defaultMemberRole",
                "defaultTeam",
                "privacy"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Team resources.\n",
                "properties": {
                    "defaultMemberRole": {
                        "type": "string",
                        "description": "Default role to assign to a team member.\n"
                    },
                    "defaultTeam": {
                        "type": "boolean",
                        "description": "Whether to assign this team to a user by default.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description to assign to the team.\n"
                    },
                    "membersCanCreatePipelines": {
                        "type": "boolean",
                        "description": "Whether team members can create.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the team.\n"
                    },
                    "privacy": {
                        "type": "string",
                        "description": "The privacy level to set the team too.\n"
                    },
                    "slug": {
                        "type": "string",
                        "description": "The name of the team.\n"
                    },
                    "uuid": {
                        "type": "string",
                        "description": "The UUID for the team.\n"
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "buildkite:Organization/getOrganization:getOrganization": {
            "description": "## # Data Source: organization\n\nUse this data source to look up the organization settings. It currently supports\nallowed_api_ip_addresses.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aws from \"@pulumi/aws\";\nimport * as buildkite from \"@pulumi/buildkite\";\n\nconst testkite = buildkite.Organization.getOrganization({});\nconst fromBuildkite = new aws.ec2.SecurityGroup(\"fromBuildkite\", {ingress: [{\n    fromPort: \"*\",\n    toPort: 443,\n    protocol: \"tcp\",\n    cidrBlocks: data.buildkite_organization.allowed_api_ip_addresses,\n}]});\n```\n```python\nimport pulumi\nimport pulumi_aws as aws\nimport pulumi_buildkite as buildkite\n\ntestkite = buildkite.Organization.get_organization()\nfrom_buildkite = aws.ec2.SecurityGroup(\"fromBuildkite\", ingress=[aws.ec2.SecurityGroupIngressArgs(\n    from_port=\"*\",\n    to_port=443,\n    protocol=\"tcp\",\n    cidr_blocks=%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference),\n)])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Aws = Pulumi.Aws;\nusing Buildkite = Pulumi.Buildkite;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var testkite = Buildkite.Organization.GetOrganization.Invoke();\n\n    var fromBuildkite = new Aws.Ec2.SecurityGroup(\"fromBuildkite\", new()\n    {\n        Ingress = new[]\n        {\n            new Aws.Ec2.Inputs.SecurityGroupIngressArgs\n            {\n                FromPort = \"*\",\n                ToPort = 443,\n                Protocol = \"tcp\",\n                CidrBlocks = data.Buildkite_organization.Allowed_api_ip_addresses,\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/ec2\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-buildkite/sdk/go/buildkite/Organization\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Organization.GetOrganization(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = ec2.NewSecurityGroup(ctx, \"fromBuildkite\", \u0026ec2.SecurityGroupArgs{\n\t\t\tIngress: ec2.SecurityGroupIngressArray{\n\t\t\t\t\u0026ec2.SecurityGroupIngressArgs{\n\t\t\t\t\tFromPort:   pulumi.Int(\"*\"),\n\t\t\t\t\tToPort:     pulumi.Int(443),\n\t\t\t\t\tProtocol:   pulumi.String(\"tcp\"),\n\t\t\t\t\tCidrBlocks: pulumi.Any(data.Buildkite_organization.Allowed_api_ip_addresses),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.buildkite.Organization.OrganizationFunctions;\nimport com.pulumi.buildkite.Organization.inputs.GetOrganizationArgs;\nimport com.pulumi.aws.ec2.SecurityGroup;\nimport com.pulumi.aws.ec2.SecurityGroupArgs;\nimport com.pulumi.aws.ec2.inputs.SecurityGroupIngressArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var testkite = OrganizationFunctions.getOrganization();\n\n        var fromBuildkite = new SecurityGroup(\"fromBuildkite\", SecurityGroupArgs.builder()        \n            .ingress(SecurityGroupIngressArgs.builder()\n                .fromPort(\"*\")\n                .toPort(\"443\")\n                .protocol(\"tcp\")\n                .cidrBlocks(data.buildkite_organization().allowed_api_ip_addresses())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  fromBuildkite:\n    type: aws:ec2:SecurityGroup\n    properties:\n      ingress:\n        - fromPort: '*'\n          toPort: '443'\n          protocol: tcp\n          cidrBlocks: ${data.buildkite_organization.allowed_api_ip_addresses}\nvariables:\n  testkite:\n    fn::invoke:\n      Function: buildkite:Organization:getOrganization\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getOrganization.\n",
                "properties": {
                    "allowedApiIpAddresses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "list of IP addresses in CIDR format that are allowed to access the Buildkite API.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getOrganization.\n",
                "properties": {
                    "allowedApiIpAddresses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "list of IP addresses in CIDR format that are allowed to access the Buildkite API.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "uuid": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "uuid",
                    "id"
                ]
            }
        },
        "buildkite:Pipeline/getPipeline:getPipeline": {
            "description": "## # Data Source: pipeline\n\nUse this data source to look up properties on a specific pipeline. This is\nparticularly useful for looking up the webhook URL for each pipeline.\n\nBuildkite Documentation: https://buildkite.com/docs/pipelines\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as buildkite from \"@pulumi/buildkite\";\n\nconst repo2 = buildkite.Pipeline.getPipeline({\n    slug: \"repo2\",\n});\n```\n```python\nimport pulumi\nimport pulumi_buildkite as buildkite\n\nrepo2 = buildkite.Pipeline.get_pipeline(slug=\"repo2\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Buildkite = Pulumi.Buildkite;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var repo2 = Buildkite.Pipeline.GetPipeline.Invoke(new()\n    {\n        Slug = \"repo2\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-buildkite/sdk/go/buildkite/Pipeline\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Pipeline.GetPipeline(ctx, \u0026pipeline.GetPipelineArgs{\n\t\t\tSlug: \"repo2\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.buildkite.Pipeline.PipelineFunctions;\nimport com.pulumi.buildkite.Pipeline.inputs.GetPipelineArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var repo2 = PipelineFunctions.getPipeline(GetPipelineArgs.builder()\n            .slug(\"repo2\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  repo2:\n    fn::invoke:\n      Function: buildkite:Pipeline:getPipeline\n      Arguments:\n        slug: repo2\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getPipeline.\n",
                "properties": {
                    "slug": {
                        "type": "string",
                        "description": "The slug of the pipeline, available in the URL of the pipeline on buildkite.com\n"
                    }
                },
                "type": "object",
                "required": [
                    "slug"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getPipeline.\n",
                "properties": {
                    "defaultBranch": {
                        "type": "string",
                        "description": "The default branch to prefill when new builds are created or triggered, usually main or master but can be anything.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "A description of the pipeline.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the pipeline.\n"
                    },
                    "repository": {
                        "type": "string",
                        "description": "The git URL of the repository.\n"
                    },
                    "slug": {
                        "type": "string"
                    },
                    "webhookUrl": {
                        "type": "string",
                        "description": "The default branch to prefill when new builds are created or triggered.\n"
                    }
                },
                "type": "object",
                "required": [
                    "defaultBranch",
                    "description",
                    "name",
                    "repository",
                    "slug",
                    "webhookUrl",
                    "id"
                ]
            }
        },
        "buildkite:Team/getTeam:getTeam": {
            "description": "## # Data Source: team\n\nUse this data source to look up properties of a team. This can be used to\nvalidate that a team exists before setting the team slug on a pipeline.\n\nBuildkite documentation: https://buildkite.com/docs/pipelines/permissions\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as buildkite from \"@pulumi/buildkite\";\n\nconst myTeam = buildkite.Team.getTeam({\n    slug: \"my_team\",\n});\n```\n```python\nimport pulumi\nimport pulumi_buildkite as buildkite\n\nmy_team = buildkite.Team.get_team(slug=\"my_team\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Buildkite = Pulumi.Buildkite;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myTeam = Buildkite.Team.GetTeam.Invoke(new()\n    {\n        Slug = \"my_team\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-buildkite/sdk/go/buildkite/Team\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Team.GetTeam(ctx, \u0026team.GetTeamArgs{\n\t\t\tSlug: \"my_team\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.buildkite.Team.TeamFunctions;\nimport com.pulumi.buildkite.Team.inputs.GetTeamArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myTeam = TeamFunctions.getTeam(GetTeamArgs.builder()\n            .slug(\"my_team\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  myTeam:\n    fn::invoke:\n      Function: buildkite:Team:getTeam\n      Arguments:\n        slug: my_team\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getTeam.\n",
                "properties": {
                    "slug": {
                        "type": "string",
                        "description": "The slug of the team, available in the URL of the team on buildkite.com\n"
                    }
                },
                "type": "object",
                "required": [
                    "slug"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getTeam.\n",
                "properties": {
                    "defaultMemberRole": {
                        "type": "string",
                        "description": "Default role to assign to a team member\n"
                    },
                    "defaultTeam": {
                        "type": "boolean",
                        "description": "Whether new org members will be automatically added to this team\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "A description of the team\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The GraphQL ID of the team\n"
                    },
                    "membersCanCreatePipelines": {
                        "type": "boolean",
                        "description": "Whether team members can create new pipelines and add them to the team\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the team\n"
                    },
                    "privacy": {
                        "type": "string",
                        "description": "Whether the team is visible to org members outside this team\n"
                    },
                    "slug": {
                        "type": "string"
                    },
                    "uuid": {
                        "type": "string",
                        "description": "The UUID of the team\n"
                    }
                },
                "type": "object",
                "required": [
                    "defaultMemberRole",
                    "defaultTeam",
                    "description",
                    "id",
                    "membersCanCreatePipelines",
                    "name",
                    "privacy",
                    "slug",
                    "uuid"
                ]
            }
        },
        "buildkite:index/getMeta:getMeta": {
            "outputs": {
                "description": "A collection of values returned by getMeta.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "webhookIps": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of strings, each one an IP address (x.x.x.x) or CIDR address (x.x.x.x/32) that Buildkite may use to send webhooks and other external requests.\n"
                    }
                },
                "type": "object",
                "required": [
                    "webhookIps",
                    "id"
                ]
            }
        }
    }
}