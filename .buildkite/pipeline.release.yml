---
env:
  BUILD_ENVIRONMENT_IMAGE: "docker.cloudsmith.io/grapl/releases/pulumi-provider-build-environment:3.40.1"
  BUILDKITE_PLUGIN_VAULT_ENV_SECRET_PREFIX: "secret/data/buildkite/env"

steps:

  # TODO: Add testing-only logic to this pipeline
  # - only build the provider binaries; don't actually release
  # - push SDKs to Cloudsmith, rather than PyPI / NPM
  #
  # We would still be creating a tag, which is unfortunate, but
  # currently unavoidable.

  - block: ":writing_hand: Release Information"
    prompt: |
      Please specify the following release parameters:
    fields:
      - text: Release Tag (start with a "v", please)
        key: release-tag
      # TODO: add options for pre-release, etc.?

      # TODO: Add intelligence for automatically creating an
      # appropriate release tag, based on what's already in the
      # repository. If we just say "it's a new major/minor/patch
      # release" here, then we can use that to compute the final tag
      # elsewhere in code. That may be less for people to juggle in
      # their heads.

  - label: ":github: Create Release Tag"
    command:
      .buildkite/scripts/git-tag
    env:
      BUILDKITE_CLEAN_CHECKOUT: true
    plugins:
      - grapl-security/vault-login#v0.1.3
      - grapl-security/vault-env#v0.2.0:
          secrets:
            - GITHUB_TOKEN
    agents:
      queue: github-release

  - wait

  - group: "Build SDKs"
    steps:
      - label: ":python: Build Python SDK"
        key: build-python-sdk
        command:
          - make python-sdk
        plugins:
          - improbable-eng/metahook#v0.4.1:
              # We need to ensure we have the tag we just created
              pre-command: git fetch --unshallow --tags
          - docker#v3.14.0:
              image: "${BUILD_ENVIRONMENT_IMAGE}"
        artifact_paths:
          - sdk/python/bin/dist/*

      - label: ":nodejs: Build NodeJS SDK"
        key: build-nodejs-sdk
        command:
          - make nodejs-sdk
        plugins:
          - improbable-eng/metahook#v0.4.1:
              # We need to ensure we have the tag we just created
              pre-command: git fetch --unshallow --tags
          - docker#v3.14.0:
              image: "${BUILD_ENVIRONMENT_IMAGE}"
        artifact_paths:
          - sdk/nodejs/bin/dist/*

  - wait

  # This will build the providers, package them up, upload them to
  # Github, and announce them.
  #
  # We're intentionally publishing the SDKs after this; see below.
  - label: ":github: Release!"
    command:
      - goreleaser release
    plugins:
      - grapl-security/vault-login#v0.1.3
      - grapl-security/vault-env#v0.2.0:
          secrets:
            - GITHUB_TOKEN
      - improbable-eng/metahook#v0.4.1:
          pre-command: git fetch --unshallow
      - docker#v3.14.0:
          image: "${BUILD_ENVIRONMENT_IMAGE}"
          environment:
            - GITHUB_TOKEN
    agents:
      queue: github-release

  - wait

  # We want to ensure that installing the SDKs will *also* install the
  # correct provider binary. This has to happen after the Github
  # release (because that's where the SDKs will pull the binaries
  # from), but before we push to PyPI, NPM, etc. (because we don't
  # want to publish something that can't pull the binaries).
  #
  # We're just installing from the tarball artifacts.
  #
  # Ideally, I'd like to use a matrix here, but you cannot currently
  # interpolate matrix values in plugin configurations. We *could*
  # pull the artifact downloading into the script, if we needed to,
  # though.
  - group: "Validate Installation"
    steps:
      - label: ":python: SDK Installation Validation"
        command:
          - .buildkite/scripts/validate-sdk-install python sdk/python/bin/dist/* $(buildkite-agent meta-data get release-tag)
        plugins:
          - artifacts#v1.5.0:
              download: sdk/python/bin/dist/*
          - docker#v3.14.0:
              image: "${BUILD_ENVIRONMENT_IMAGE}"

      - label: ":nodejs: SDK Installation Validation"
        command:
          - .buildkite/scripts/validate-sdk-install nodejs sdk/nodejs/bin/dist/* $(buildkite-agent meta-data get release-tag)
        plugins:
          - artifacts#v1.5.0:
              download: sdk/nodejs/bin/dist/*
          - docker#v3.14.0:
              image: "${BUILD_ENVIRONMENT_IMAGE}"

      - label: ":go: SDK Installation Validation"
        command:
          - .buildkite/scripts/validate-go-sdk-install $(buildkite-agent meta-data get release-tag)
        plugins:
          - docker#v3.14.0:
              image: "${BUILD_ENVIRONMENT_IMAGE}"

  - wait

  # We're publishing the SDKs *after* the Github release, because in
  # order to *use* the SDKs, the binaries must be in the Github
  # release first.
  #
  # This will hopefully save us from situations where we successfully
  # publish the SDKs, but for whatever reason, the Github release
  # fails.
  - group: "Publish SDKs"
    steps:
      - label: ":python: Publish Python SDK"
        depends_on: build-python-sdk
        plugins:
          - grapl-security/vault-login#v0.1.3
          - grapl-security/vault-env#v0.2.0:
              secrets:
                - PYPI_API_TOKEN
          - artifacts#v1.5.0:
              download: sdk/python/bin/dist/*
          - grapl-security/pypi#v0.1.0:
              file: sdk/python/bin/dist/*
        agents:
          queue: artifact-uploaders

      - label: ":npm: Publish NodeJS SDK"
        depends_on: build-nodejs-sdk
        command:
          - .buildkite/scripts/npm-upload
        plugins:
          - grapl-security/vault-login#v0.1.3
          - grapl-security/vault-env#v0.2.0:
              secrets:
                - NPM_API_TOKEN
          - artifacts#v1.5.0:
              download: sdk/nodejs/bin/dist/*.tgz
          - docker#v3.14.0:
              # We don't install `npm` on our build agents, so this is
              # a convenient way to have it available.
              image: "${BUILD_ENVIRONMENT_IMAGE}"
              environment:
                - NPM_API_TOKEN
        agents:
          queue: artifact-uploaders
